
Project2.elf:     file format elf32-littlenios2
Project2.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000001e4

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x0000d500 memsz 0x0000d500 flags r-x
    LOAD off    0x0000e520 vaddr 0x0000d520 paddr 0x0000ef78 align 2**12
         filesz 0x00001a58 memsz 0x00001a58 flags rw-
    LOAD off    0x000109d0 vaddr 0x000109d0 paddr 0x000109d0 align 2**12
         filesz 0x00000000 memsz 0x00000308 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   000001c4  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000cf28  000001e4  000001e4  000011e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000414  0000d10c  0000d10c  0000e10c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001a58  0000d520  0000ef78  0000e520  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000308  000109d0  000109d0  000109d0  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000023  00000000  00000000  0000ff78  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000e00  00000000  00000000  0000ffa0  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   00025500  00000000  00000000  00010da0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00009813  00000000  00000000  000362a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   0000ab43  00000000  00000000  0003fab3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00001a38  00000000  00000000  0004a5f8  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00002f87  00000000  00000000  0004c030  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    0001128f  00000000  00000000  0004efb7  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_alt_sim_info 00000010  00000000  00000000  00060248  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000a98  00000000  00000000  00060258  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .thread_model 00000003  00000000  00000000  00063ee6  2**0
                  CONTENTS, READONLY
 17 .cpu          00000003  00000000  00000000  00063ee9  2**0
                  CONTENTS, READONLY
 18 .simulation_enabled 00000001  00000000  00000000  00063eec  2**0
                  CONTENTS, READONLY
 19 .sysid_hash   00000004  00000000  00000000  00063eed  2**0
                  CONTENTS, READONLY
 20 .sysid_base   00000004  00000000  00000000  00063ef1  2**0
                  CONTENTS, READONLY
 21 .sysid_time   00000004  00000000  00000000  00063ef5  2**0
                  CONTENTS, READONLY
 22 .stderr_dev   00000009  00000000  00000000  00063ef9  2**0
                  CONTENTS, READONLY
 23 .stdin_dev    00000009  00000000  00000000  00063f02  2**0
                  CONTENTS, READONLY
 24 .stdout_dev   00000009  00000000  00000000  00063f0b  2**0
                  CONTENTS, READONLY
 25 .sopc_system_name 0000000b  00000000  00000000  00063f14  2**0
                  CONTENTS, READONLY
 26 .quartus_project_dir 0000001d  00000000  00000000  00063f1f  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     0006a1c7  00000000  00000000  00063f3c  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
000001e4 l    d  .text	00000000 .text
0000d10c l    d  .rodata	00000000 .rodata
0000d520 l    d  .rwdata	00000000 .rwdata
000109d0 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../Project2_bsp//obj/HAL/src/crt0.o
0000021c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_exception_entry.o
00000094 l       .exceptions	00000000 alt_exception_unknown
00000000 l    df *ABS*	00000000 obj/default/Injection.o
000000b8 l       .exceptions	00000000 not_timer
000000b0 l       .exceptions	00000000 switch_context
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000d14 l     F .text	00000074 udivmodsi4
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 calloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 impure.c
0000d520 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 vfprintf.c
000019e8 l     F .text	00000034 __sprint_r
0000d24a l     O .rodata	00000010 blanks.3515
0000d25a l     O .rodata	00000010 zeroes.3516
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
00003a30 l     F .text	0000023c quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
000054a0 l     F .text	00000008 __fp_lock
000054a8 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 locale.c
0000d28c l     O .rodata	00000030 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mprec.c
0000d3d4 l     O .rodata	0000000c p05.2435
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_isinfd.c
00000000 l    df *ABS*	00000000 s_isnand.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
00009040 l     F .text	00000354 _fpadd_parts
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_close.c
0000a4fc l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0000a618 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0000a644 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0000a744 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0000a838 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0000a924 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_read.c
0000ad88 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0000ef68 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_write.c
0000b198 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0000b2d8 l     F .text	00000038 alt_dev_reg
0000dedc l     O .rwdata	00001060 JTAG_UART
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0000b5c8 l     F .text	00000204 altera_avalon_jtag_uart_irq
0000b7cc l     F .text	000000a4 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0000be08 l     F .text	00000074 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0000bf20 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0000c3ac l     F .text	000000e0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0000c504 l     F .text	00000050 alt_get_errno
0000c554 l     F .text	000000f0 alt_file_locked
00000000 l    df *ABS*	00000000 altera_nios2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 
000075c0 g     F .text	00000074 _mprec_log10
000076b0 g     F .text	00000084 __any_on
0000828c g     F .text	00000064 _isatty_r
0000d2bc g     O .rodata	00000028 __mprec_tinytens
0000aa48 g     F .text	00000078 alt_main
00010a34 g     O .bss	00000014 heads
0000a378 g     F .text	00000044 __ashldi3
00010a48 g     O .bss	00000100 alt_irq
000082f0 g     F .text	0000006c _lseek_r
0000ef78 g       *ABS*	00000000 __flash_rwdata_start
000098e0 g     F .text	0000005c __eqdf2
00010cd8 g       *ABS*	00000000 __alt_heap_start
00001948 g     F .text	0000003c printf
00007e70 g     F .text	0000005c __sseek
00005544 g     F .text	0000010c __sinit
0000cca8 g     F .text	0000013c __swbuf_r
000061dc g     F .text	0000009c _setlocale_r
000054bc g     F .text	00000078 __sfmoreglue
0000aae0 g     F .text	00000020 __malloc_unlock
00006558 g     F .text	0000018c memmove
00005534 g     F .text	00000010 _cleanup
000066e4 g     F .text	000000a8 _Balloc
00009998 g     F .text	00000064 __gtdf2
00000000  w      *UND*	00000000 __errno
00000000 g     F .entry	0000000c __reset
00000020 g       *ABS*	00000000 __flash_exceptions_start
00008224 g     F .text	00000068 _fstat_r
000109e4 g     O .bss	00000004 errno
000109f8 g     O .bss	00000004 alt_argv
00016f3c g       *ABS*	00000000 _gp
00000a1c g     F .text	00000164 mythread_create
0000dd5c g     O .rwdata	00000180 alt_fd_list
0000c7bc g     F .text	00000090 alt_find_dev
00001700 g     F .text	00000140 memcpy
000054b0 g     F .text	0000000c _cleanup_r
00009abc g     F .text	000000d4 __floatsidf
0000c48c g     F .text	00000078 alt_io_redirect
00009a60 g     F .text	0000005c __ltdf2
0000d10c g       *ABS*	00000000 __DTOR_END__
0000c79c g     F .text	00000020 altera_nios2_irq_init
0000751c g     F .text	000000a4 __ratio
0000b9cc g     F .text	00000218 altera_avalon_jtag_uart_read
00000f54 g     F .text	00000014 malloc
0000191c g     F .text	0000002c _printf_r
00000e34 g     F .text	00000008 __udivsi3
0000a794 g     F .text	000000a4 isatty
0000d30c g     O .rodata	000000c8 __mprec_tens
00006278 g     F .text	0000000c __locale_charset
000109e0 g     O .bss	00000004 __malloc_top_pad
0000ef4c g     O .rwdata	00000004 __mb_cur_max
00006284 g     F .text	0000000c _localeconv_r
00006b14 g     F .text	0000003c __i2b
00005b98 g     F .text	000004e4 __sfvwrite_r
00001984 g     F .text	00000064 _sbrk_r
0000835c g     F .text	0000006c _read_r
0000dd28 g     O .rwdata	0000000c __lc_ctype
0000ef60 g     O .rwdata	00000004 alt_max_fd
0000a160 g     F .text	00000104 __unpack_d
000080d4 g     F .text	0000013c _fclose_r
00005470 g     F .text	00000030 fflush
000109dc g     O .bss	00000004 __malloc_max_sbrked_mem
00009394 g     F .text	00000054 __adddf3
00007290 g     F .text	00000148 __b2d
00008a18 g     F .text	00000628 __umoddi3
0000a974 g     F .text	000000d4 lseek
0000ef3c g     O .rwdata	00000004 _global_impure_ptr
00007734 g     F .text	000005fc _realloc_r
00010cd8 g       *ABS*	00000000 __bss_end
0000c2bc g     F .text	000000f0 alt_iic_isr_register
0000b094 g     F .text	00000104 alt_tick
000083c8 g     F .text	00000650 __udivdi3
0000d2e4 g     O .rodata	00000028 __mprec_bigtens
000068f8 g     F .text	00000104 __s2b
00009c64 g     F .text	0000011c __floatunsidf
00000984 g     F .text	00000098 mythread
00007030 g     F .text	00000058 __mcmp
0000575c g     F .text	00000018 __fp_lock_all
0000c270 g     F .text	0000004c alt_ic_irq_enabled
0000affc g     F .text	00000098 alt_alarm_stop
00010a08 g     O .bss	00000004 alt_irq_active
00000924 g     F .text	00000060 mythread_handler
00000118 g     F .exceptions	000000cc alt_irq_handler
0000dd34 g     O .rwdata	00000028 alt_dev_null
0000bf04 g     F .text	0000001c alt_dcache_flush_all
000069fc g     F .text	00000068 __hi0bits
00009b90 g     F .text	000000d4 __fixdfsi
00000e6c g     F .text	0000001c calloc
0000ef78 g       *ABS*	00000000 __ram_rwdata_end
0000ef58 g     O .rwdata	00000008 alt_dev_list
0000b1e8 g     F .text	000000f0 write
0000cafc g     F .text	000000bc _putc_r
0000d520 g       *ABS*	00000000 __ram_rodata_end
0000a694 g     F .text	000000b0 fstat
0000a334 g     F .text	00000044 __lshrdi3
00000000 g       *ABS*	00000000 __alt_mem_SDRAM
00006da8 g     F .text	0000012c __pow5mult
000109f0 g     O .bss	00000004 __nlocale_changed
00000e3c g     F .text	00000008 __umodsi3
00010cd8 g       *ABS*	00000000 end
0000b508 g     F .text	000000c0 altera_avalon_jtag_uart_init
0000d10c g       *ABS*	00000000 __CTOR_LIST__
00800000 g       *ABS*	00000000 __alt_stack_pointer
0000be7c g     F .text	00000088 alt_avalon_timer_sc_init
00009e90 g     F .text	000000ac __clzsi2
0000bbe4 g     F .text	00000224 altera_avalon_jtag_uart_write
0000574c g     F .text	00000004 __sfp_lock_acquire
00006460 g     F .text	000000f8 memchr
00001a1c g     F .text	00001e7c ___vfprintf_internal_r
000058c8 g     F .text	000002d0 _free_r
0000ab00 g     F .text	00000244 alt_printf
0000cf30 g     F .text	000001a0 __call_exitprocs
000109ec g     O .bss	00000004 __mlocale_changed
0000ef44 g     O .rwdata	00000004 __malloc_sbrk_base
000001e4 g     F .text	0000003c _start
000109d4 g     O .bss	00000004 timer_interrupt_flag
00010a00 g     O .bss	00000004 _alt_tick_rate
00006ed4 g     F .text	0000015c __lshift
00010a04 g     O .bss	00000004 _alt_nticks
0000add8 g     F .text	000000f4 read
0000b344 g     F .text	00000060 alt_sys_init
0000ce00 g     F .text	00000130 __register_exitproc
00006b50 g     F .text	00000258 __multiply
0000b870 g     F .text	00000068 altera_avalon_jtag_uart_close
00000e44 g     F .text	00000028 __mulsi3
0000d520 g       *ABS*	00000000 __ram_rwdata_start
0000d10c g       *ABS*	00000000 __ram_rodata_start
00010a0c g     O .bss	00000028 __malloc_current_mallinfo
000073d8 g     F .text	00000144 __d2b
0000b3a4 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0000c960 g     F .text	000000d4 alt_get_fd
0000a264 g     F .text	000000d0 __fpcmp_parts_d
00008070 g     F .text	00000064 _close_r
0000ca80 g     F .text	0000007c memcmp
0000b464 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00010cd8 g       *ABS*	00000000 __alt_stack_base
0000b4b4 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
000038bc g     F .text	00000174 __swsetup_r
0000972c g     F .text	000001b4 __divdf3
00005650 g     F .text	000000fc __sfp
00007634 g     F .text	0000007c __copybits
0000d920 g     O .rwdata	00000408 __malloc_av_
00005758 g     F .text	00000004 __sinit_lock_release
00009448 g     F .text	000002e4 __muldf3
00007d94 g     F .text	00000054 __sread
0000c84c g     F .text	00000114 alt_find_file
0000bf70 g     F .text	000000a0 alt_dev_llist_insert
0000aac0 g     F .text	00000020 __malloc_lock
0000af4c g     F .text	000000b0 sbrk
00000cc8 g     F .text	00000020 reset_timer_flag
000003c0 g     F .text	00000178 pop
00005288 g     F .text	000001e8 _fflush_r
00000e88 g     F .text	000000cc _calloc_r
00000c1c g     F .text	0000008c mythread_cleanup
000109d0 g       *ABS*	00000000 __bss_start
00001840 g     F .text	000000dc memset
00000ce8 g     F .text	0000002c main
000109fc g     O .bss	00000004 alt_envp
000109d8 g     O .bss	00000004 __malloc_max_total_mem
0000b404 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0000cde4 g     F .text	0000001c __swbuf
00007ecc g     F .text	00000008 __sclose
00800000 g       *ABS*	00000000 __alt_heap_limit
00008210 g     F .text	00000014 fclose
00010b48 g     O .bss	00000190 _atexit0
00003c6c g     F .text	0000161c _dtoa_r
00000f7c g     F .text	00000784 _malloc_r
0000ef64 g     O .rwdata	00000004 alt_errno
0000607c g     F .text	000000a8 _fwalk
0000cbb8 g     F .text	000000f0 putc
00000d88 g     F .text	00000050 __divsi3
0000d3e0 g     O .rodata	00000014 __thenan_df
0000578c g     F .text	0000013c _malloc_trim_r
0000d10c g       *ABS*	00000000 __CTOR_END__
00007ed4 g     F .text	000000a4 strcmp
0000d10c g       *ABS*	00000000 __flash_rodata_start
0000d10c g       *ABS*	00000000 __DTOR_LIST__
00000220 g     F .text	000001a0 add_node
00000620 g     F .text	000000c0 lookup_node
0000993c g     F .text	0000005c __nedf2
0000b310 g     F .text	00000034 alt_irq_init
0000aecc g     F .text	00000080 alt_release_fd
0000d3f4 g     O .rodata	00000100 __clz_tab
000109e8 g     O .bss	00000004 _PathLocale
0000ca34 g     F .text	00000014 atexit
00008004 g     F .text	0000006c _write_r
00006290 g     F .text	0000001c setlocale
0000ef40 g     O .rwdata	00000004 _impure_ptr
000109f4 g     O .bss	00000004 alt_argc
0000c06c g     F .text	0000005c _do_dtors
00000020 g       .exceptions	00000000 alt_irq_entry
00007230 g     F .text	00000060 __ulp
00007d30 g     F .text	00000038 __isinfd
00005774 g     F .text	00000018 __fp_unlock_all
0000ef50 g     O .rwdata	00000008 alt_fs_list
00000020 g       *ABS*	00000000 __ram_exceptions_start
000062ac g     F .text	0000000c localeconv
0000c0e4 g     F .text	00000050 alt_ic_isr_register
0000ef78 g       *ABS*	00000000 _edata
00010cd8 g       *ABS*	00000000 _end
000001e4 g       *ABS*	00000000 __ram_exceptions_end
0000b8d8 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
000006e0 g     F .text	0000012c prototype_os
0000c1d0 g     F .text	000000a0 alt_ic_irq_disable
00007de8 g     F .text	00000088 __swrite
0000ef48 g     O .rwdata	00000004 __malloc_trim_threshold
0000ca48 g     F .text	00000038 exit
00006124 g     F .text	000000b8 _fwalk_reent
00007088 g     F .text	000001a8 __mdiff
00000dd8 g     F .text	0000005c __modsi3
00800000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
00005750 g     F .text	00000004 __sfp_lock_release
000109d0 g     O .bss	00000004 running_thread
0000d0d0 g     F .text	0000003c _exit
00007d68 g     F .text	0000002c __isnand
0000a3bc g     F .text	00000140 alt_alarm_start
00009d80 g     F .text	00000110 __muldi3
00000538 g     F .text	000000e8 remove_node
000062b8 g     F .text	000001a8 __smakebuf_r
00007f78 g     F .text	0000008c strlen
0000c644 g     F .text	00000158 open
000099fc g     F .text	00000064 __gedf2
00000ca8 g     F .text	00000020 check_timer_flag
0000ad44 g     F .text	00000044 alt_putchar
08000000 g       *ABS*	00000000 __alt_mem_SRAM
0000c0c8 g     F .text	0000001c alt_icache_flush_all
0000ef74 g     O .rwdata	00000004 alt_priority_mask
0000c134 g     F .text	0000009c alt_ic_irq_enable
00003898 g     F .text	00000024 __vfprintf_internal
000093e8 g     F .text	00000060 __subdf3
00006a64 g     F .text	000000b0 __lo0bits
0000ef6c g     O .rwdata	00000008 alt_alarm_list
0000c010 g     F .text	0000005c _do_ctors
0000080c g     F .text	00000118 mythread_scheduler
09000000 g       *ABS*	00000000 __alt_mem_Onchip_memory
0000a54c g     F .text	000000cc close
0000a8a4 g     F .text	00000080 alt_load
00009f3c g     F .text	00000224 __pack_d
00000f68 g     F .text	00000014 free
00005754 g     F .text	00000004 __sinit_lock_acquire
000067b4 g     F .text	00000144 __multadd
0000678c g     F .text	00000028 _Bfree
00000b80 g     F .text	0000009c mythread_join



Disassembly of section .entry:

00000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   0:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
   4:	08407914 	ori	at,at,484
    jmp r1
   8:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  44:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00001180 	call	118 <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000306 	br	98 <alt_exception_unknown+0x4>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
  8c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)

00000094 <alt_exception_unknown>:
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
  94:	003da03a 	break	0
		stw   fp, 84(sp) //fp doesn't actually move....
		entry_not_timer:
		nop*/
		.section .exceptions.exit.user, "xa"
		// Disable Interrupts
		wrctl status, zero
  98:	0001703a 	wrctl	status,zero
		// Check timerflag
		call    check_timer_flag
  9c:	0000ca80 	call	ca8 <check_timer_flag>
		beq   r2, r0, not_timer
  a0:	10000526 	beq	r2,zero,b8 <not_timer>
		stw   fp, 84(sp)
  a4:	df001515 	stw	fp,84(sp)
		mov   r4, sp
  a8:	d809883a 	mov	r4,sp
		call mythread_scheduler
  ac:	000080c0 	call	80c <mythread_scheduler>

000000b0 <switch_context>:
		/* TODO: check if context changes? Maybe a -1 or something if it should not. Or a zero*/
		switch_context:
		mov   sp, r2
  b0:	1037883a 	mov	sp,r2
		/* Set the new frame pointer */
        ldw   fp, 84(sp)
  b4:	df001517 	ldw	fp,84(sp)

000000b8 <not_timer>:
		not_timer:
		call    reset_timer_flag
  b8:	0000cc80 	call	cc8 <reset_timer_flag>
		// Enable interrupts
		movi et, 1
  bc:	06000044 	movi	et,1
		wrctl status, et
  c0:	c001703a 	wrctl	status,et
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  c4:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  c8:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  cc:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  d0:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  d4:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  d8:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  dc:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  e0:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  e4:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  e8:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  ec:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  f0:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  f4:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  f8:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  fc:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 100:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 104:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 108:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 10c:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
 110:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 114:	ef80083a 	eret

00000118 <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 118:	defff904 	addi	sp,sp,-28
 11c:	dfc00615 	stw	ra,24(sp)
 120:	df000515 	stw	fp,20(sp)
 124:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 128:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 12c:	0005313a 	rdctl	r2,ipending
 130:	e0bffe15 	stw	r2,-8(fp)

  return active;
 134:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 138:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 13c:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 140:	00800044 	movi	r2,1
 144:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 148:	e0fffb17 	ldw	r3,-20(fp)
 14c:	e0bffc17 	ldw	r2,-16(fp)
 150:	1884703a 	and	r2,r3,r2
 154:	10001726 	beq	r2,zero,1b4 <alt_irq_handler+0x9c>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 158:	00c00074 	movhi	r3,1
 15c:	18c29204 	addi	r3,r3,2632
 160:	e0bffd17 	ldw	r2,-12(fp)
 164:	100490fa 	slli	r2,r2,3
 168:	1885883a 	add	r2,r3,r2
 16c:	10c00017 	ldw	r3,0(r2)
 170:	01000074 	movhi	r4,1
 174:	21029204 	addi	r4,r4,2632
 178:	e0bffd17 	ldw	r2,-12(fp)
 17c:	100490fa 	slli	r2,r2,3
 180:	2085883a 	add	r2,r4,r2
 184:	10800104 	addi	r2,r2,4
 188:	10800017 	ldw	r2,0(r2)
 18c:	1009883a 	mov	r4,r2
 190:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 194:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 198:	0005313a 	rdctl	r2,ipending
 19c:	e0bfff15 	stw	r2,-4(fp)

  return active;
 1a0:	e0bfff17 	ldw	r2,-4(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
 1a4:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 1a8:	e0bffb17 	ldw	r2,-20(fp)
 1ac:	103fe31e 	bne	r2,zero,13c <alt_irq_handler+0x24>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 1b0:	00000706 	br	1d0 <alt_irq_handler+0xb8>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
 1b4:	e0bffc17 	ldw	r2,-16(fp)
 1b8:	1085883a 	add	r2,r2,r2
 1bc:	e0bffc15 	stw	r2,-16(fp)
      i++;
 1c0:	e0bffd17 	ldw	r2,-12(fp)
 1c4:	10800044 	addi	r2,r2,1
 1c8:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 1cc:	003fde06 	br	148 <alt_irq_handler+0x30>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
 1d0:	e037883a 	mov	sp,fp
 1d4:	dfc00117 	ldw	ra,4(sp)
 1d8:	df000017 	ldw	fp,0(sp)
 1dc:	dec00204 	addi	sp,sp,8
 1e0:	f800283a 	ret

Disassembly of section .text:

000001e4 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     1e4:	06c02034 	movhi	sp,128
    ori sp, sp, %lo(__alt_stack_pointer)
     1e8:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
     1ec:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
     1f0:	d69bcf14 	ori	gp,gp,28476
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     1f4:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
     1f8:	10827414 	ori	r2,r2,2512

    movhi r3, %hi(__bss_end)
     1fc:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
     200:	18c33614 	ori	r3,r3,3288

    beq r2, r3, 1f
     204:	10c00326 	beq	r2,r3,214 <_start+0x30>

0:
    stw zero, (r2)
     208:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     20c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     210:	10fffd36 	bltu	r2,r3,208 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     214:	000a8a40 	call	a8a4 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     218:	000aa480 	call	aa48 <alt_main>

0000021c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     21c:	003fff06 	br	21c <alt_after_alt_main>

00000220 <add_node>:
        struct Node *next;
} Node;

Node *(heads[5]);

void add_node(Node *new_node, int status) {
     220:	defffd04 	addi	sp,sp,-12
     224:	df000215 	stw	fp,8(sp)
     228:	df000204 	addi	fp,sp,8
     22c:	e13ffe15 	stw	r4,-8(fp)
     230:	e17fff15 	stw	r5,-4(fp)
        if (heads[status] == NULL) // 0 nodes
     234:	00c00074 	movhi	r3,1
     238:	18c28d04 	addi	r3,r3,2612
     23c:	e0bfff17 	ldw	r2,-4(fp)
     240:	1085883a 	add	r2,r2,r2
     244:	1085883a 	add	r2,r2,r2
     248:	1885883a 	add	r2,r3,r2
     24c:	10800017 	ldw	r2,0(r2)
     250:	1000091e 	bne	r2,zero,278 <add_node+0x58>
        {
                heads[status] = new_node;
     254:	00c00074 	movhi	r3,1
     258:	18c28d04 	addi	r3,r3,2612
     25c:	e0bfff17 	ldw	r2,-4(fp)
     260:	1085883a 	add	r2,r2,r2
     264:	1085883a 	add	r2,r2,r2
     268:	1885883a 	add	r2,r3,r2
     26c:	e0fffe17 	ldw	r3,-8(fp)
     270:	10c00015 	stw	r3,0(r2)
     274:	00004e06 	br	3b0 <add_node+0x190>
        }
        else if (heads[status]->next == NULL) // 1 node
     278:	00c00074 	movhi	r3,1
     27c:	18c28d04 	addi	r3,r3,2612
     280:	e0bfff17 	ldw	r2,-4(fp)
     284:	1085883a 	add	r2,r2,r2
     288:	1085883a 	add	r2,r2,r2
     28c:	1885883a 	add	r2,r3,r2
     290:	10800017 	ldw	r2,0(r2)
     294:	10800217 	ldw	r2,8(r2)
     298:	1000251e 	bne	r2,zero,330 <add_node+0x110>
        {
                heads[status]->next = new_node;
     29c:	00c00074 	movhi	r3,1
     2a0:	18c28d04 	addi	r3,r3,2612
     2a4:	e0bfff17 	ldw	r2,-4(fp)
     2a8:	1085883a 	add	r2,r2,r2
     2ac:	1085883a 	add	r2,r2,r2
     2b0:	1885883a 	add	r2,r3,r2
     2b4:	10800017 	ldw	r2,0(r2)
     2b8:	e0fffe17 	ldw	r3,-8(fp)
     2bc:	10c00215 	stw	r3,8(r2)
                heads[status]->previous = new_node;
     2c0:	00c00074 	movhi	r3,1
     2c4:	18c28d04 	addi	r3,r3,2612
     2c8:	e0bfff17 	ldw	r2,-4(fp)
     2cc:	1085883a 	add	r2,r2,r2
     2d0:	1085883a 	add	r2,r2,r2
     2d4:	1885883a 	add	r2,r3,r2
     2d8:	10800017 	ldw	r2,0(r2)
     2dc:	e0fffe17 	ldw	r3,-8(fp)
     2e0:	10c00115 	stw	r3,4(r2)
                new_node->next = heads[status];
     2e4:	00c00074 	movhi	r3,1
     2e8:	18c28d04 	addi	r3,r3,2612
     2ec:	e0bfff17 	ldw	r2,-4(fp)
     2f0:	1085883a 	add	r2,r2,r2
     2f4:	1085883a 	add	r2,r2,r2
     2f8:	1885883a 	add	r2,r3,r2
     2fc:	10c00017 	ldw	r3,0(r2)
     300:	e0bffe17 	ldw	r2,-8(fp)
     304:	10c00215 	stw	r3,8(r2)
                new_node->previous = heads[status];
     308:	00c00074 	movhi	r3,1
     30c:	18c28d04 	addi	r3,r3,2612
     310:	e0bfff17 	ldw	r2,-4(fp)
     314:	1085883a 	add	r2,r2,r2
     318:	1085883a 	add	r2,r2,r2
     31c:	1885883a 	add	r2,r3,r2
     320:	10c00017 	ldw	r3,0(r2)
     324:	e0bffe17 	ldw	r2,-8(fp)
     328:	10c00115 	stw	r3,4(r2)
     32c:	00002006 	br	3b0 <add_node+0x190>
        }
        else // 2+ nodes
        {
                new_node->next = heads[status]; // wrap around
     330:	00c00074 	movhi	r3,1
     334:	18c28d04 	addi	r3,r3,2612
     338:	e0bfff17 	ldw	r2,-4(fp)
     33c:	1085883a 	add	r2,r2,r2
     340:	1085883a 	add	r2,r2,r2
     344:	1885883a 	add	r2,r3,r2
     348:	10c00017 	ldw	r3,0(r2)
     34c:	e0bffe17 	ldw	r2,-8(fp)
     350:	10c00215 	stw	r3,8(r2)
                new_node->previous = heads[status]->previous;
     354:	00c00074 	movhi	r3,1
     358:	18c28d04 	addi	r3,r3,2612
     35c:	e0bfff17 	ldw	r2,-4(fp)
     360:	1085883a 	add	r2,r2,r2
     364:	1085883a 	add	r2,r2,r2
     368:	1885883a 	add	r2,r3,r2
     36c:	10800017 	ldw	r2,0(r2)
     370:	10c00117 	ldw	r3,4(r2)
     374:	e0bffe17 	ldw	r2,-8(fp)
     378:	10c00115 	stw	r3,4(r2)
                new_node->previous->next = new_node;
     37c:	e0bffe17 	ldw	r2,-8(fp)
     380:	10800117 	ldw	r2,4(r2)
     384:	e0fffe17 	ldw	r3,-8(fp)
     388:	10c00215 	stw	r3,8(r2)
                heads[status]->previous = new_node; //wrap around
     38c:	00c00074 	movhi	r3,1
     390:	18c28d04 	addi	r3,r3,2612
     394:	e0bfff17 	ldw	r2,-4(fp)
     398:	1085883a 	add	r2,r2,r2
     39c:	1085883a 	add	r2,r2,r2
     3a0:	1885883a 	add	r2,r3,r2
     3a4:	10800017 	ldw	r2,0(r2)
     3a8:	e0fffe17 	ldw	r3,-8(fp)
     3ac:	10c00115 	stw	r3,4(r2)
        }
}
     3b0:	e037883a 	mov	sp,fp
     3b4:	df000017 	ldw	fp,0(sp)
     3b8:	dec00104 	addi	sp,sp,4
     3bc:	f800283a 	ret

000003c0 <pop>:
Node * pop(int status) {
     3c0:	defffc04 	addi	sp,sp,-16
     3c4:	dfc00315 	stw	ra,12(sp)
     3c8:	df000215 	stw	fp,8(sp)
     3cc:	df000204 	addi	fp,sp,8
     3d0:	e13fff15 	stw	r4,-4(fp)
        Node *popped = NULL;
     3d4:	e03ffe15 	stw	zero,-8(fp)
        if (heads[status] == NULL)
     3d8:	00c00074 	movhi	r3,1
     3dc:	18c28d04 	addi	r3,r3,2612
     3e0:	e0bfff17 	ldw	r2,-4(fp)
     3e4:	1085883a 	add	r2,r2,r2
     3e8:	1085883a 	add	r2,r2,r2
     3ec:	1885883a 	add	r2,r3,r2
     3f0:	10800017 	ldw	r2,0(r2)
     3f4:	1000051e 	bne	r2,zero,40c <pop+0x4c>
        {
                alt_printf("Can't pop");
     3f8:	01000074 	movhi	r4,1
     3fc:	21344304 	addi	r4,r4,-12020
     400:	000ab000 	call	ab00 <alt_printf>
                heads[status] = popped->next; // update head
                heads[status]->previous = popped->previous; // prev
                heads[status]->previous->next = heads[status]; // prev
                return popped;
        }
        return popped;
     404:	e0bffe17 	ldw	r2,-8(fp)
     408:	00004606 	br	524 <pop+0x164>
        Node *popped = NULL;
        if (heads[status] == NULL)
        {
                alt_printf("Can't pop");
        }
        else if (heads[status]->next == NULL)
     40c:	00c00074 	movhi	r3,1
     410:	18c28d04 	addi	r3,r3,2612
     414:	e0bfff17 	ldw	r2,-4(fp)
     418:	1085883a 	add	r2,r2,r2
     41c:	1085883a 	add	r2,r2,r2
     420:	1885883a 	add	r2,r3,r2
     424:	10800017 	ldw	r2,0(r2)
     428:	10800217 	ldw	r2,8(r2)
     42c:	1000111e 	bne	r2,zero,474 <pop+0xb4>
        {
                popped = heads[status];
     430:	00c00074 	movhi	r3,1
     434:	18c28d04 	addi	r3,r3,2612
     438:	e0bfff17 	ldw	r2,-4(fp)
     43c:	1085883a 	add	r2,r2,r2
     440:	1085883a 	add	r2,r2,r2
     444:	1885883a 	add	r2,r3,r2
     448:	10800017 	ldw	r2,0(r2)
     44c:	e0bffe15 	stw	r2,-8(fp)
                heads[status] = NULL;
     450:	00c00074 	movhi	r3,1
     454:	18c28d04 	addi	r3,r3,2612
     458:	e0bfff17 	ldw	r2,-4(fp)
     45c:	1085883a 	add	r2,r2,r2
     460:	1085883a 	add	r2,r2,r2
     464:	1885883a 	add	r2,r3,r2
     468:	10000015 	stw	zero,0(r2)
                return popped;
     46c:	e0bffe17 	ldw	r2,-8(fp)
     470:	00002c06 	br	524 <pop+0x164>
        }
        else
        {
                popped = heads[status];
     474:	00c00074 	movhi	r3,1
     478:	18c28d04 	addi	r3,r3,2612
     47c:	e0bfff17 	ldw	r2,-4(fp)
     480:	1085883a 	add	r2,r2,r2
     484:	1085883a 	add	r2,r2,r2
     488:	1885883a 	add	r2,r3,r2
     48c:	10800017 	ldw	r2,0(r2)
     490:	e0bffe15 	stw	r2,-8(fp)
                heads[status] = popped->next; // update head
     494:	e0bffe17 	ldw	r2,-8(fp)
     498:	10c00217 	ldw	r3,8(r2)
     49c:	01000074 	movhi	r4,1
     4a0:	21028d04 	addi	r4,r4,2612
     4a4:	e0bfff17 	ldw	r2,-4(fp)
     4a8:	1085883a 	add	r2,r2,r2
     4ac:	1085883a 	add	r2,r2,r2
     4b0:	2085883a 	add	r2,r4,r2
     4b4:	10c00015 	stw	r3,0(r2)
                heads[status]->previous = popped->previous; // prev
     4b8:	00c00074 	movhi	r3,1
     4bc:	18c28d04 	addi	r3,r3,2612
     4c0:	e0bfff17 	ldw	r2,-4(fp)
     4c4:	1085883a 	add	r2,r2,r2
     4c8:	1085883a 	add	r2,r2,r2
     4cc:	1885883a 	add	r2,r3,r2
     4d0:	10800017 	ldw	r2,0(r2)
     4d4:	e0fffe17 	ldw	r3,-8(fp)
     4d8:	18c00117 	ldw	r3,4(r3)
     4dc:	10c00115 	stw	r3,4(r2)
                heads[status]->previous->next = heads[status]; // prev
     4e0:	00c00074 	movhi	r3,1
     4e4:	18c28d04 	addi	r3,r3,2612
     4e8:	e0bfff17 	ldw	r2,-4(fp)
     4ec:	1085883a 	add	r2,r2,r2
     4f0:	1085883a 	add	r2,r2,r2
     4f4:	1885883a 	add	r2,r3,r2
     4f8:	10800017 	ldw	r2,0(r2)
     4fc:	10c00117 	ldw	r3,4(r2)
     500:	01000074 	movhi	r4,1
     504:	21028d04 	addi	r4,r4,2612
     508:	e0bfff17 	ldw	r2,-4(fp)
     50c:	1085883a 	add	r2,r2,r2
     510:	1085883a 	add	r2,r2,r2
     514:	2085883a 	add	r2,r4,r2
     518:	10800017 	ldw	r2,0(r2)
     51c:	18800215 	stw	r2,8(r3)
                return popped;
     520:	e0bffe17 	ldw	r2,-8(fp)
        }
        return popped;
}
     524:	e037883a 	mov	sp,fp
     528:	dfc00117 	ldw	ra,4(sp)
     52c:	df000017 	ldw	fp,0(sp)
     530:	dec00204 	addi	sp,sp,8
     534:	f800283a 	ret

00000538 <remove_node>:

//FIXME: not sure if correct
void remove_node(Node *node, int status) {
     538:	defffb04 	addi	sp,sp,-20
     53c:	df000415 	stw	fp,16(sp)
     540:	df000404 	addi	fp,sp,16
     544:	e13ffe15 	stw	r4,-8(fp)
     548:	e17fff15 	stw	r5,-4(fp)
        if (node->next == NULL)
     54c:	e0bffe17 	ldw	r2,-8(fp)
     550:	10800217 	ldw	r2,8(r2)
     554:	1000111e 	bne	r2,zero,59c <remove_node+0x64>
        {
                if (node == heads[status])
     558:	00c00074 	movhi	r3,1
     55c:	18c28d04 	addi	r3,r3,2612
     560:	e0bfff17 	ldw	r2,-4(fp)
     564:	1085883a 	add	r2,r2,r2
     568:	1085883a 	add	r2,r2,r2
     56c:	1885883a 	add	r2,r3,r2
     570:	10c00017 	ldw	r3,0(r2)
     574:	e0bffe17 	ldw	r2,-8(fp)
     578:	1880251e 	bne	r3,r2,610 <remove_node+0xd8>
                {
                        heads[status] = NULL;
     57c:	00c00074 	movhi	r3,1
     580:	18c28d04 	addi	r3,r3,2612
     584:	e0bfff17 	ldw	r2,-4(fp)
     588:	1085883a 	add	r2,r2,r2
     58c:	1085883a 	add	r2,r2,r2
     590:	1885883a 	add	r2,r3,r2
     594:	10000015 	stw	zero,0(r2)
     598:	00001d06 	br	610 <remove_node+0xd8>
                }
        }
        else
        {
                Node *previous = node->previous;
     59c:	e0bffe17 	ldw	r2,-8(fp)
     5a0:	10800117 	ldw	r2,4(r2)
     5a4:	e0bffc15 	stw	r2,-16(fp)
                Node *next = node->next;
     5a8:	e0bffe17 	ldw	r2,-8(fp)
     5ac:	10800217 	ldw	r2,8(r2)
     5b0:	e0bffd15 	stw	r2,-12(fp)
                previous->next = next;
     5b4:	e0bffc17 	ldw	r2,-16(fp)
     5b8:	e0fffd17 	ldw	r3,-12(fp)
     5bc:	10c00215 	stw	r3,8(r2)
                next->previous = previous;
     5c0:	e0bffd17 	ldw	r2,-12(fp)
     5c4:	e0fffc17 	ldw	r3,-16(fp)
     5c8:	10c00115 	stw	r3,4(r2)
                if (node == heads[status])
     5cc:	00c00074 	movhi	r3,1
     5d0:	18c28d04 	addi	r3,r3,2612
     5d4:	e0bfff17 	ldw	r2,-4(fp)
     5d8:	1085883a 	add	r2,r2,r2
     5dc:	1085883a 	add	r2,r2,r2
     5e0:	1885883a 	add	r2,r3,r2
     5e4:	10c00017 	ldw	r3,0(r2)
     5e8:	e0bffe17 	ldw	r2,-8(fp)
     5ec:	1880081e 	bne	r3,r2,610 <remove_node+0xd8>
                {
                        heads[status] = next;
     5f0:	00c00074 	movhi	r3,1
     5f4:	18c28d04 	addi	r3,r3,2612
     5f8:	e0bfff17 	ldw	r2,-4(fp)
     5fc:	1085883a 	add	r2,r2,r2
     600:	1085883a 	add	r2,r2,r2
     604:	1885883a 	add	r2,r3,r2
     608:	e0fffd17 	ldw	r3,-12(fp)
     60c:	10c00015 	stw	r3,0(r2)
                }
        }
}
     610:	e037883a 	mov	sp,fp
     614:	df000017 	ldw	fp,0(sp)
     618:	dec00104 	addi	sp,sp,4
     61c:	f800283a 	ret

00000620 <lookup_node>:

//FIXME: not checked
Node * lookup_node(int id, int status) {
     620:	defffc04 	addi	sp,sp,-16
     624:	df000315 	stw	fp,12(sp)
     628:	df000304 	addi	fp,sp,12
     62c:	e13ffe15 	stw	r4,-8(fp)
     630:	e17fff15 	stw	r5,-4(fp)
        Node * node = heads[status];
     634:	00c00074 	movhi	r3,1
     638:	18c28d04 	addi	r3,r3,2612
     63c:	e0bfff17 	ldw	r2,-4(fp)
     640:	1085883a 	add	r2,r2,r2
     644:	1085883a 	add	r2,r2,r2
     648:	1885883a 	add	r2,r3,r2
     64c:	10800017 	ldw	r2,0(r2)
     650:	e0bffd15 	stw	r2,-12(fp)
        if (node->thread->thread_id == id)
     654:	e0bffd17 	ldw	r2,-12(fp)
     658:	10800017 	ldw	r2,0(r2)
     65c:	10c00017 	ldw	r3,0(r2)
     660:	e0bffe17 	ldw	r2,-8(fp)
     664:	1880021e 	bne	r3,r2,670 <lookup_node+0x50>
                                return node;
     668:	e0bffd17 	ldw	r2,-12(fp)
     66c:	00001806 	br	6d0 <lookup_node+0xb0>
        node = node->next;
     670:	e0bffd17 	ldw	r2,-12(fp)
     674:	10800217 	ldw	r2,8(r2)
     678:	e0bffd15 	stw	r2,-12(fp)
        while (node != heads[status])
     67c:	00000a06 	br	6a8 <lookup_node+0x88>
        {
                if (node->thread->thread_id == id)
     680:	e0bffd17 	ldw	r2,-12(fp)
     684:	10800017 	ldw	r2,0(r2)
     688:	10c00017 	ldw	r3,0(r2)
     68c:	e0bffe17 	ldw	r2,-8(fp)
     690:	1880021e 	bne	r3,r2,69c <lookup_node+0x7c>
                        return node;
     694:	e0bffd17 	ldw	r2,-12(fp)
     698:	00000d06 	br	6d0 <lookup_node+0xb0>
                node = node->next;
     69c:	e0bffd17 	ldw	r2,-12(fp)
     6a0:	10800217 	ldw	r2,8(r2)
     6a4:	e0bffd15 	stw	r2,-12(fp)
Node * lookup_node(int id, int status) {
        Node * node = heads[status];
        if (node->thread->thread_id == id)
                                return node;
        node = node->next;
        while (node != heads[status])
     6a8:	00c00074 	movhi	r3,1
     6ac:	18c28d04 	addi	r3,r3,2612
     6b0:	e0bfff17 	ldw	r2,-4(fp)
     6b4:	1085883a 	add	r2,r2,r2
     6b8:	1085883a 	add	r2,r2,r2
     6bc:	1885883a 	add	r2,r3,r2
     6c0:	10c00017 	ldw	r3,0(r2)
     6c4:	e0bffd17 	ldw	r2,-12(fp)
     6c8:	18bfed1e 	bne	r3,r2,680 <lookup_node+0x60>
        {
                if (node->thread->thread_id == id)
                        return node;
                node = node->next;
        }
        return 0;
     6cc:	0005883a 	mov	r2,zero
}
     6d0:	e037883a 	mov	sp,fp
     6d4:	df000017 	ldw	fp,0(sp)
     6d8:	dec00104 	addi	sp,sp,4
     6dc:	f800283a 	ret

000006e0 <prototype_os>:
void mythread_join(TCB *tcb);
void mythread_cleanup();
int timer_interrupt_flag;

void prototype_os()
{
     6e0:	defff204 	addi	sp,sp,-56
     6e4:	dfc00d15 	stw	ra,52(sp)
     6e8:	df000c15 	stw	fp,48(sp)
     6ec:	df000c04 	addi	fp,sp,48
        int i = 0;
     6f0:	e03ff415 	stw	zero,-48(fp)
        TCB *threads[NUM_THREADS];
        for (i = 0; i < NUM_THREADS; i++)
     6f4:	e03ff415 	stw	zero,-48(fp)
     6f8:	00001306 	br	748 <prototype_os+0x68>
        {
                // Here: call mythread_create so that the TCB for each thread is created
                TCB *tcb = (TCB *) malloc(sizeof(TCB));
     6fc:	01000404 	movi	r4,16
     700:	0000f540 	call	f54 <malloc>
     704:	e0bff615 	stw	r2,-40(fp)
                mythread_create(tcb, &mythread, i);
     708:	e13ff617 	ldw	r4,-40(fp)
     70c:	01400034 	movhi	r5,0
     710:	29426104 	addi	r5,r5,2436
     714:	e1bff417 	ldw	r6,-48(fp)
     718:	0000a1c0 	call	a1c <mythread_create>
                threads[i] = tcb;
     71c:	e0bff417 	ldw	r2,-48(fp)
     720:	1085883a 	add	r2,r2,r2
     724:	1085883a 	add	r2,r2,r2
     728:	e0fff404 	addi	r3,fp,-48
     72c:	1885883a 	add	r2,r3,r2
     730:	10800304 	addi	r2,r2,12
     734:	e0fff617 	ldw	r3,-40(fp)
     738:	10c00015 	stw	r3,0(r2)

void prototype_os()
{
        int i = 0;
        TCB *threads[NUM_THREADS];
        for (i = 0; i < NUM_THREADS; i++)
     73c:	e0bff417 	ldw	r2,-48(fp)
     740:	10800044 	addi	r2,r2,1
     744:	e0bff415 	stw	r2,-48(fp)
     748:	e0bff417 	ldw	r2,-48(fp)
     74c:	10800210 	cmplti	r2,r2,8
     750:	103fea1e 	bne	r2,zero,6fc <prototype_os+0x1c>
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
     754:	00800074 	movhi	r2,1
     758:	10828004 	addi	r2,r2,2560
     75c:	10800017 	ldw	r2,0(r2)
                mythread_create(tcb, &mythread, i);
                threads[i] = tcb;
        }
        // Here: initialize the timer and its interrupt handler as is done in Project I
        alt_alarm * myAlarm;
        alt_alarm_start( &myAlarm, ALARMTICKS(QUANTUM_LENGTH), &mythread_handler, NULL);
     760:	1009883a 	mov	r4,r2
     764:	01400504 	movi	r5,20
     768:	0000e440 	call	e44 <__mulsi3>
     76c:	1009883a 	mov	r4,r2
     770:	01400284 	movi	r5,10
     774:	0000e340 	call	e34 <__udivsi3>
     778:	e0ffff04 	addi	r3,fp,-4
     77c:	1809883a 	mov	r4,r3
     780:	100b883a 	mov	r5,r2
     784:	01800034 	movhi	r6,0
     788:	31824904 	addi	r6,r6,2340
     78c:	000f883a 	mov	r7,zero
     790:	000a3bc0 	call	a3bc <alt_alarm_start>
        for (i = 0; i < NUM_THREADS; i++)
     794:	e03ff415 	stw	zero,-48(fp)
     798:	00000c06 	br	7cc <prototype_os+0xec>
        {
                // Here: call mythread_join to suspend prototype_os
                mythread_join((threads[i]));
     79c:	e0bff417 	ldw	r2,-48(fp)
     7a0:	1085883a 	add	r2,r2,r2
     7a4:	1085883a 	add	r2,r2,r2
     7a8:	e0fff404 	addi	r3,fp,-48
     7ac:	1885883a 	add	r2,r3,r2
     7b0:	10800304 	addi	r2,r2,12
     7b4:	10800017 	ldw	r2,0(r2)
     7b8:	1009883a 	mov	r4,r2
     7bc:	0000b800 	call	b80 <mythread_join>
                threads[i] = tcb;
        }
        // Here: initialize the timer and its interrupt handler as is done in Project I
        alt_alarm * myAlarm;
        alt_alarm_start( &myAlarm, ALARMTICKS(QUANTUM_LENGTH), &mythread_handler, NULL);
        for (i = 0; i < NUM_THREADS; i++)
     7c0:	e0bff417 	ldw	r2,-48(fp)
     7c4:	10800044 	addi	r2,r2,1
     7c8:	e0bff415 	stw	r2,-48(fp)
     7cc:	e0bff417 	ldw	r2,-48(fp)
     7d0:	10800210 	cmplti	r2,r2,8
     7d4:	103ff11e 	bne	r2,zero,79c <prototype_os+0xbc>
                mythread_join((threads[i]));
        }

        while (TRUE)
        {
                alt_printf ("This is the OS prototype for my exciting CSE351 course projects!\n");
     7d8:	01000074 	movhi	r4,1
     7dc:	21344604 	addi	r4,r4,-12008
     7e0:	000ab000 	call	ab00 <alt_printf>
                int j = 0;
     7e4:	e03ff515 	stw	zero,-44(fp)
                for (j = 0 ; j < MAX; j++);
     7e8:	e03ff515 	stw	zero,-44(fp)
     7ec:	00000306 	br	7fc <prototype_os+0x11c>
     7f0:	e0bff517 	ldw	r2,-44(fp)
     7f4:	10800044 	addi	r2,r2,1
     7f8:	e0bff515 	stw	r2,-44(fp)
     7fc:	e0bff517 	ldw	r2,-44(fp)
     800:	00f0d3d4 	movui	r3,49999
     804:	18bffa0e 	bge	r3,r2,7f0 <prototype_os+0x110>
        }
     808:	003ff306 	br	7d8 <prototype_os+0xf8>

0000080c <mythread_scheduler>:
}

int mythread_scheduler(void *param_list) // context pointer
{
     80c:	defffa04 	addi	sp,sp,-24
     810:	dfc00515 	stw	ra,20(sp)
     814:	df000415 	stw	fp,16(sp)
     818:	df000404 	addi	fp,sp,16
     81c:	e13fff15 	stw	r4,-4(fp)
        // If running thread is null, then store the context and add to the run queue

        if (running_thread == NULL)
     820:	d0a6a517 	ldw	r2,-25964(gp)
     824:	1000141e 	bne	r2,zero,878 <mythread_scheduler+0x6c>
        {
                // Store a new context (os_prototype, most likely)
                TCB *tcb = (TCB *) malloc(sizeof(TCB));
     828:	01000404 	movi	r4,16
     82c:	0000f540 	call	f54 <malloc>
     830:	e0bffc15 	stw	r2,-16(fp)
                tcb->thread_id = NUM_THREADS + 1; // TODO:set to something legitimate
     834:	e0bffc17 	ldw	r2,-16(fp)
     838:	00c00244 	movi	r3,9
     83c:	10c00015 	stw	r3,0(r2)
                tcb->context = param_list; // context pointer <---not sure this is correct?
     840:	e0bffc17 	ldw	r2,-16(fp)
     844:	e0ffff17 	ldw	r3,-4(fp)
     848:	10c00215 	stw	r3,8(r2)
                Node *node = (Node *) malloc(sizeof(Node));
     84c:	01000304 	movi	r4,12
     850:	0000f540 	call	f54 <malloc>
     854:	e0bffd15 	stw	r2,-12(fp)
                node->thread = tcb;
     858:	e0bffd17 	ldw	r2,-12(fp)
     85c:	e0fffc17 	ldw	r3,-16(fp)
     860:	10c00015 	stw	r3,0(r2)
                running_thread = node;
     864:	e0bffd17 	ldw	r2,-12(fp)
     868:	d0a6a515 	stw	r2,-25964(gp)
                running_thread->thread->scheduling_status = RUNNING;
     86c:	d0a6a517 	ldw	r2,-25964(gp)
     870:	10800017 	ldw	r2,0(r2)
     874:	10000115 	stw	zero,4(r2)
        }
        running_thread->thread->context = param_list; // update context pointer
     878:	d0a6a517 	ldw	r2,-25964(gp)
     87c:	10800017 	ldw	r2,0(r2)
     880:	e0ffff17 	ldw	r3,-4(fp)
     884:	10c00215 	stw	r3,8(r2)

        // Here: perform thread scheduling

        Node *next = pop(READY);
     888:	01000044 	movi	r4,1
     88c:	00003c00 	call	3c0 <pop>
     890:	e0bffe15 	stw	r2,-8(fp)
        if (next != NULL)
     894:	e0bffe17 	ldw	r2,-8(fp)
     898:	10001726 	beq	r2,zero,8f8 <mythread_scheduler+0xec>
        {
                // The context of the second thread (1) is crap. Something is probably wrong with creation or join. Else there's a problem in assembly with storing the fp
                if (running_thread->thread->scheduling_status == RUNNING || running_thread->thread->scheduling_status == READY) {
     89c:	d0a6a517 	ldw	r2,-25964(gp)
     8a0:	10800017 	ldw	r2,0(r2)
     8a4:	10800117 	ldw	r2,4(r2)
     8a8:	10000526 	beq	r2,zero,8c0 <mythread_scheduler+0xb4>
     8ac:	d0a6a517 	ldw	r2,-25964(gp)
     8b0:	10800017 	ldw	r2,0(r2)
     8b4:	10800117 	ldw	r2,4(r2)
     8b8:	10800058 	cmpnei	r2,r2,1
     8bc:	1000081e 	bne	r2,zero,8e0 <mythread_scheduler+0xd4>
                        add_node(running_thread, READY);
     8c0:	d0a6a517 	ldw	r2,-25964(gp)
     8c4:	1009883a 	mov	r4,r2
     8c8:	01400044 	movi	r5,1
     8cc:	00002200 	call	220 <add_node>
                        running_thread->thread->scheduling_status = READY;
     8d0:	d0a6a517 	ldw	r2,-25964(gp)
     8d4:	10800017 	ldw	r2,0(r2)
     8d8:	00c00044 	movi	r3,1
     8dc:	10c00115 	stw	r3,4(r2)
                }
                running_thread = next;
     8e0:	e0bffe17 	ldw	r2,-8(fp)
     8e4:	d0a6a515 	stw	r2,-25964(gp)
                running_thread->thread->scheduling_status = RUNNING;
     8e8:	d0a6a517 	ldw	r2,-25964(gp)
     8ec:	10800017 	ldw	r2,0(r2)
     8f0:	10000115 	stw	zero,4(r2)
     8f4:	00000306 	br	904 <mythread_scheduler+0xf8>
        }
        else // No other threads available
        {
                alt_printf("Interrupted by the DE2 timer!\n");
     8f8:	01000074 	movhi	r4,1
     8fc:	21345704 	addi	r4,r4,-11940
     900:	000ab000 	call	ab00 <alt_printf>
        }
        // Return the new context
        return running_thread->thread->context;
     904:	d0a6a517 	ldw	r2,-25964(gp)
     908:	10800017 	ldw	r2,0(r2)
     90c:	10800217 	ldw	r2,8(r2)
}
     910:	e037883a 	mov	sp,fp
     914:	dfc00117 	ldw	ra,4(sp)
     918:	df000017 	ldw	fp,0(sp)
     91c:	dec00204 	addi	sp,sp,8
     920:	f800283a 	ret

00000924 <mythread_handler>:

alt_u32 mythread_handler(void *param_list)
{
     924:	defffd04 	addi	sp,sp,-12
     928:	dfc00215 	stw	ra,8(sp)
     92c:	df000115 	stw	fp,4(sp)
     930:	df000104 	addi	fp,sp,4
     934:	e13fff15 	stw	r4,-4(fp)
        // Here: the global flag is used to indicate a timer interrupt
        timer_interrupt_flag = 1;
     938:	00800044 	movi	r2,1
     93c:	d0a6a615 	stw	r2,-25960(gp)
        alt_printf("Interrupted by the timer!\n");
     940:	01000074 	movhi	r4,1
     944:	21345f04 	addi	r4,r4,-11908
     948:	000ab000 	call	ab00 <alt_printf>
     94c:	00800074 	movhi	r2,1
     950:	10828004 	addi	r2,r2,2560
     954:	10800017 	ldw	r2,0(r2)
        return ALARMTICKS(QUANTUM_LENGTH);
     958:	1009883a 	mov	r4,r2
     95c:	01400504 	movi	r5,20
     960:	0000e440 	call	e44 <__mulsi3>
     964:	1009883a 	mov	r4,r2
     968:	01400284 	movi	r5,10
     96c:	0000e340 	call	e34 <__udivsi3>
}
     970:	e037883a 	mov	sp,fp
     974:	dfc00117 	ldw	ra,4(sp)
     978:	df000017 	ldw	fp,0(sp)
     97c:	dec00204 	addi	sp,sp,8
     980:	f800283a 	ret

00000984 <mythread>:

void mythread(int thread_id)
{
     984:	defffa04 	addi	sp,sp,-24
     988:	dfc00515 	stw	ra,20(sp)
     98c:	df000415 	stw	fp,16(sp)
     990:	df000404 	addi	fp,sp,16
     994:	e13fff15 	stw	r4,-4(fp)
        // The declaration of j as an integer was added on 10/24/2011
        int i, j, n;
        n = (thread_id % 2 == 0)? 10: 15;
     998:	e0bfff17 	ldw	r2,-4(fp)
     99c:	1080004c 	andi	r2,r2,1
     9a0:	1000021e 	bne	r2,zero,9ac <mythread+0x28>
     9a4:	00800284 	movi	r2,10
     9a8:	00000106 	br	9b0 <mythread+0x2c>
     9ac:	008003c4 	movi	r2,15
     9b0:	e0bffe15 	stw	r2,-8(fp)
        for (i = 0; i < n; i++)
     9b4:	e03ffc15 	stw	zero,-16(fp)
     9b8:	00001006 	br	9fc <mythread+0x78>
        {
                printf("This is message %d of thread #%d.\n", i, thread_id);
     9bc:	01000074 	movhi	r4,1
     9c0:	21346604 	addi	r4,r4,-11880
     9c4:	e17ffc17 	ldw	r5,-16(fp)
     9c8:	e1bfff17 	ldw	r6,-4(fp)
     9cc:	00019480 	call	1948 <printf>
                for (j = 0; j < MAX; j++);
     9d0:	e03ffd15 	stw	zero,-12(fp)
     9d4:	00000306 	br	9e4 <mythread+0x60>
     9d8:	e0bffd17 	ldw	r2,-12(fp)
     9dc:	10800044 	addi	r2,r2,1
     9e0:	e0bffd15 	stw	r2,-12(fp)
     9e4:	e0bffd17 	ldw	r2,-12(fp)
     9e8:	00f0d3d4 	movui	r3,49999
     9ec:	18bffa0e 	bge	r3,r2,9d8 <mythread+0x54>
void mythread(int thread_id)
{
        // The declaration of j as an integer was added on 10/24/2011
        int i, j, n;
        n = (thread_id % 2 == 0)? 10: 15;
        for (i = 0; i < n; i++)
     9f0:	e0bffc17 	ldw	r2,-16(fp)
     9f4:	10800044 	addi	r2,r2,1
     9f8:	e0bffc15 	stw	r2,-16(fp)
     9fc:	e0fffc17 	ldw	r3,-16(fp)
     a00:	e0bffe17 	ldw	r2,-8(fp)
     a04:	18bfed16 	blt	r3,r2,9bc <mythread+0x38>
        {
                printf("This is message %d of thread #%d.\n", i, thread_id);
                for (j = 0; j < MAX; j++);
        }
}
     a08:	e037883a 	mov	sp,fp
     a0c:	dfc00117 	ldw	ra,4(sp)
     a10:	df000017 	ldw	fp,0(sp)
     a14:	dec00204 	addi	sp,sp,8
     a18:	f800283a 	ret

00000a1c <mythread_create>:

void mythread_create(TCB *tcb, void *(*start_routine)(void*), int thread_id)
{
     a1c:	defff804 	addi	sp,sp,-32
     a20:	dfc00715 	stw	ra,28(sp)
     a24:	df000615 	stw	fp,24(sp)
     a28:	df000604 	addi	fp,sp,24
     a2c:	e13ffd15 	stw	r4,-12(fp)
     a30:	e17ffe15 	stw	r5,-8(fp)
     a34:	e1bfff15 	stw	r6,-4(fp)
        alt_printf("Creating...\n");
     a38:	01000074 	movhi	r4,1
     a3c:	21346f04 	addi	r4,r4,-11844
     a40:	000ab000 	call	ab00 <alt_printf>
        // Creates a Thread Control Block for a thread
        tcb->thread_id = thread_id;
     a44:	e0ffff17 	ldw	r3,-4(fp)
     a48:	e0bffd17 	ldw	r2,-12(fp)
     a4c:	10c00015 	stw	r3,0(r2)
        tcb->scheduling_status = READY;
     a50:	e0bffd17 	ldw	r2,-12(fp)
     a54:	00c00044 	movi	r3,1
     a58:	10c00115 	stw	r3,4(r2)
        tcb->context = calloc(1, 768) + 128/4;
     a5c:	01000044 	movi	r4,1
     a60:	0140c004 	movi	r5,768
     a64:	0000e6c0 	call	e6c <calloc>
     a68:	10c00804 	addi	r3,r2,32
     a6c:	e0bffd17 	ldw	r2,-12(fp)
     a70:	10c00215 	stw	r3,8(r2)
        int one = 1;
     a74:	00800044 	movi	r2,1
     a78:	e0bffb15 	stw	r2,-20(fp)
        void *(*ra)(void *) = &mythread_cleanup;
     a7c:	00800034 	movhi	r2,0
     a80:	10830704 	addi	r2,r2,3100
     a84:	e0bffc15 	stw	r2,-16(fp)
        memcpy(tcb->context + 0, &ra, 4);//ra
     a88:	e0bffd17 	ldw	r2,-12(fp)
     a8c:	10c00217 	ldw	r3,8(r2)
     a90:	e0bffc04 	addi	r2,fp,-16
     a94:	1809883a 	mov	r4,r3
     a98:	100b883a 	mov	r5,r2
     a9c:	01800104 	movi	r6,4
     aa0:	00017000 	call	1700 <memcpy>
        memcpy(tcb->context + 20/4, &thread_id, 4);//r4?
     aa4:	e0bffd17 	ldw	r2,-12(fp)
     aa8:	10800217 	ldw	r2,8(r2)
     aac:	10c00504 	addi	r3,r2,20
     ab0:	e0bfff04 	addi	r2,fp,-4
     ab4:	1809883a 	mov	r4,r3
     ab8:	100b883a 	mov	r5,r2
     abc:	01800104 	movi	r6,4
     ac0:	00017000 	call	1700 <memcpy>
        memcpy(tcb->context + 72/4, &start_routine, 4);//ea
     ac4:	e0bffd17 	ldw	r2,-12(fp)
     ac8:	10800217 	ldw	r2,8(r2)
     acc:	10c01204 	addi	r3,r2,72
     ad0:	e0bffe04 	addi	r2,fp,-8
     ad4:	1809883a 	mov	r4,r3
     ad8:	100b883a 	mov	r5,r2
     adc:	01800104 	movi	r6,4
     ae0:	00017000 	call	1700 <memcpy>
        memcpy(tcb->context + 68/4, &one, 4);//estatus
     ae4:	e0bffd17 	ldw	r2,-12(fp)
     ae8:	10800217 	ldw	r2,8(r2)
     aec:	10c01104 	addi	r3,r2,68
     af0:	e0bffb04 	addi	r2,fp,-20
     af4:	1809883a 	mov	r4,r3
     af8:	100b883a 	mov	r5,r2
     afc:	01800104 	movi	r6,4
     b00:	00017000 	call	1700 <memcpy>
        memcpy(tcb->context + 84/4, &tcb->context, 4);//fp shoud be at 2048 if calloc returns addr 1024?
     b04:	e0bffd17 	ldw	r2,-12(fp)
     b08:	10800217 	ldw	r2,8(r2)
     b0c:	10c01504 	addi	r3,r2,84
     b10:	e0bffd17 	ldw	r2,-12(fp)
     b14:	10800204 	addi	r2,r2,8
     b18:	1809883a 	mov	r4,r3
     b1c:	100b883a 	mov	r5,r2
     b20:	01800104 	movi	r6,4
     b24:	00017000 	call	1700 <memcpy>

        // Add to ready queue
        Node *node = (Node *) malloc(sizeof(Node));
     b28:	01000304 	movi	r4,12
     b2c:	0000f540 	call	f54 <malloc>
     b30:	e0bffa15 	stw	r2,-24(fp)
        node->thread = tcb;
     b34:	e0bffa17 	ldw	r2,-24(fp)
     b38:	e0fffd17 	ldw	r3,-12(fp)
     b3c:	10c00015 	stw	r3,0(r2)
        add_node(node, READY);
     b40:	e13ffa17 	ldw	r4,-24(fp)
     b44:	01400044 	movi	r5,1
     b48:	00002200 	call	220 <add_node>
        alt_printf("Finished creation (%x): sp: (%x)\n", thread_id, tcb->context);
     b4c:	e0ffff17 	ldw	r3,-4(fp)
     b50:	e0bffd17 	ldw	r2,-12(fp)
     b54:	10800217 	ldw	r2,8(r2)
     b58:	01000074 	movhi	r4,1
     b5c:	21347304 	addi	r4,r4,-11828
     b60:	180b883a 	mov	r5,r3
     b64:	100d883a 	mov	r6,r2
     b68:	000ab000 	call	ab00 <alt_printf>
}
     b6c:	e037883a 	mov	sp,fp
     b70:	dfc00117 	ldw	ra,4(sp)
     b74:	df000017 	ldw	fp,0(sp)
     b78:	dec00204 	addi	sp,sp,8
     b7c:	f800283a 	ret

00000b80 <mythread_join>:

void mythread_join(TCB *tcb)
{
     b80:	defffb04 	addi	sp,sp,-20
     b84:	dfc00415 	stw	ra,16(sp)
     b88:	df000315 	stw	fp,12(sp)
     b8c:	df000304 	addi	fp,sp,12
     b90:	e13fff15 	stw	r4,-4(fp)
        while (running_thread == NULL)
     b94:	00000806 	br	bb8 <mythread_join+0x38>
        {
                int i;
                for (i = 0 ; i < MAX; i++);
     b98:	e03ffd15 	stw	zero,-12(fp)
     b9c:	00000306 	br	bac <mythread_join+0x2c>
     ba0:	e0bffd17 	ldw	r2,-12(fp)
     ba4:	10800044 	addi	r2,r2,1
     ba8:	e0bffd15 	stw	r2,-12(fp)
     bac:	e0bffd17 	ldw	r2,-12(fp)
     bb0:	00f0d3d4 	movui	r3,49999
     bb4:	18bffa0e 	bge	r3,r2,ba0 <mythread_join+0x20>
        alt_printf("Finished creation (%x): sp: (%x)\n", thread_id, tcb->context);
}

void mythread_join(TCB *tcb)
{
        while (running_thread == NULL)
     bb8:	d0a6a517 	ldw	r2,-25964(gp)
     bbc:	103ff626 	beq	r2,zero,b98 <mythread_join+0x18>
        {
                int i;
                for (i = 0 ; i < MAX; i++);
        }

        DISABLE_INTERRUPTS();
     bc0:	0001703a 	wrctl	status,zero
        int id = running_thread->thread->thread_id;
     bc4:	d0a6a517 	ldw	r2,-25964(gp)
     bc8:	10800017 	ldw	r2,0(r2)
     bcc:	10800017 	ldw	r2,0(r2)
     bd0:	e0bffe15 	stw	r2,-8(fp)
        running_thread->thread->scheduling_status = WAITING;
     bd4:	d0a6a517 	ldw	r2,-25964(gp)
     bd8:	10800017 	ldw	r2,0(r2)
     bdc:	00c00084 	movi	r3,2
     be0:	10c00115 	stw	r3,4(r2)
        add_node(running_thread, WAITING);
     be4:	d0a6a517 	ldw	r2,-25964(gp)
     be8:	1009883a 	mov	r4,r2
     bec:	01400084 	movi	r5,2
     bf0:	00002200 	call	220 <add_node>
        tcb->blocking_id = id;
     bf4:	e0bfff17 	ldw	r2,-4(fp)
     bf8:	e0fffe17 	ldw	r3,-8(fp)
     bfc:	10c00315 	stw	r3,12(r2)
        ENABLE_INTERRUPTS();
     c00:	06000044 	movi	et,1
     c04:	c001703a 	wrctl	status,et
}
     c08:	e037883a 	mov	sp,fp
     c0c:	dfc00117 	ldw	ra,4(sp)
     c10:	df000017 	ldw	fp,0(sp)
     c14:	dec00204 	addi	sp,sp,8
     c18:	f800283a 	ret

00000c1c <mythread_cleanup>:

// Set return address to this
void mythread_cleanup()//mythread_done
{
     c1c:	defffd04 	addi	sp,sp,-12
     c20:	dfc00215 	stw	ra,8(sp)
     c24:	df000115 	stw	fp,4(sp)
     c28:	df000104 	addi	fp,sp,4
        DISABLE_INTERRUPTS();
     c2c:	0001703a 	wrctl	status,zero
        alt_printf("COMPLETING THREAD\n");
     c30:	01000074 	movhi	r4,1
     c34:	21347c04 	addi	r4,r4,-11792
     c38:	000ab000 	call	ab00 <alt_printf>
        running_thread->thread->scheduling_status = DONE;
     c3c:	d0a6a517 	ldw	r2,-25964(gp)
     c40:	10800017 	ldw	r2,0(r2)
     c44:	00c00104 	movi	r3,4
     c48:	10c00115 	stw	r3,4(r2)
        add_node(running_thread, DONE);
     c4c:	d0a6a517 	ldw	r2,-25964(gp)
     c50:	1009883a 	mov	r4,r2
     c54:	01400104 	movi	r5,4
     c58:	00002200 	call	220 <add_node>
        // Unblock thread blocked by join
        Node * blocked_node = lookup_node(running_thread->thread->blocking_id, WAITING);
     c5c:	d0a6a517 	ldw	r2,-25964(gp)
     c60:	10800017 	ldw	r2,0(r2)
     c64:	10800317 	ldw	r2,12(r2)
     c68:	1009883a 	mov	r4,r2
     c6c:	01400084 	movi	r5,2
     c70:	00006200 	call	620 <lookup_node>
     c74:	e0bfff15 	stw	r2,-4(fp)
        if (blocked_node != NULL)
     c78:	e0bfff17 	ldw	r2,-4(fp)
     c7c:	10000726 	beq	r2,zero,c9c <mythread_cleanup+0x80>
        {
                blocked_node->thread->scheduling_status = READY;
     c80:	e0bfff17 	ldw	r2,-4(fp)
     c84:	10800017 	ldw	r2,0(r2)
     c88:	00c00044 	movi	r3,1
     c8c:	10c00115 	stw	r3,4(r2)
                add_node(blocked_node, READY);
     c90:	e13fff17 	ldw	r4,-4(fp)
     c94:	01400044 	movi	r5,1
     c98:	00002200 	call	220 <add_node>
        }
        ENABLE_INTERRUPTS();
     c9c:	06000044 	movi	et,1
     ca0:	c001703a 	wrctl	status,et
        while(TRUE);
     ca4:	003fff06 	br	ca4 <mythread_cleanup+0x88>

00000ca8 <check_timer_flag>:
}

int check_timer_flag()
{
     ca8:	deffff04 	addi	sp,sp,-4
     cac:	df000015 	stw	fp,0(sp)
     cb0:	d839883a 	mov	fp,sp
        return timer_interrupt_flag; //returns in registers (2 and 3?)
     cb4:	d0a6a617 	ldw	r2,-25960(gp)
}
     cb8:	e037883a 	mov	sp,fp
     cbc:	df000017 	ldw	fp,0(sp)
     cc0:	dec00104 	addi	sp,sp,4
     cc4:	f800283a 	ret

00000cc8 <reset_timer_flag>:

void reset_timer_flag()
{
     cc8:	deffff04 	addi	sp,sp,-4
     ccc:	df000015 	stw	fp,0(sp)
     cd0:	d839883a 	mov	fp,sp
        timer_interrupt_flag = 0; //returns in registers (2 and 3?)
     cd4:	d026a615 	stw	zero,-25960(gp)
}
     cd8:	e037883a 	mov	sp,fp
     cdc:	df000017 	ldw	fp,0(sp)
     ce0:	dec00104 	addi	sp,sp,4
     ce4:	f800283a 	ret

00000ce8 <main>:

// The main method that starts up the prototype operating system
int main()
{
     ce8:	defffe04 	addi	sp,sp,-8
     cec:	dfc00115 	stw	ra,4(sp)
     cf0:	df000015 	stw	fp,0(sp)
     cf4:	d839883a 	mov	fp,sp
        //alt_printf("Hello from Nios II!\n");
        prototype_os();
     cf8:	00006e00 	call	6e0 <prototype_os>
        return 0;
     cfc:	0005883a 	mov	r2,zero
}
     d00:	e037883a 	mov	sp,fp
     d04:	dfc00117 	ldw	ra,4(sp)
     d08:	df000017 	ldw	fp,0(sp)
     d0c:	dec00204 	addi	sp,sp,8
     d10:	f800283a 	ret

00000d14 <udivmodsi4>:
     d14:	2005883a 	mov	r2,r4
     d18:	2900182e 	bgeu	r5,r4,d7c <udivmodsi4+0x68>
     d1c:	28001716 	blt	r5,zero,d7c <udivmodsi4+0x68>
     d20:	01000804 	movi	r4,32
     d24:	00c00044 	movi	r3,1
     d28:	00000206 	br	d34 <udivmodsi4+0x20>
     d2c:	20001126 	beq	r4,zero,d74 <udivmodsi4+0x60>
     d30:	28000516 	blt	r5,zero,d48 <udivmodsi4+0x34>
     d34:	294b883a 	add	r5,r5,r5
     d38:	213fffc4 	addi	r4,r4,-1
     d3c:	18c7883a 	add	r3,r3,r3
     d40:	28bffa36 	bltu	r5,r2,d2c <udivmodsi4+0x18>
     d44:	18000b26 	beq	r3,zero,d74 <udivmodsi4+0x60>
     d48:	0009883a 	mov	r4,zero
     d4c:	11400236 	bltu	r2,r5,d58 <udivmodsi4+0x44>
     d50:	1145c83a 	sub	r2,r2,r5
     d54:	20c8b03a 	or	r4,r4,r3
     d58:	1806d07a 	srli	r3,r3,1
     d5c:	280ad07a 	srli	r5,r5,1
     d60:	183ffa1e 	bne	r3,zero,d4c <udivmodsi4+0x38>
     d64:	3000021e 	bne	r6,zero,d70 <udivmodsi4+0x5c>
     d68:	2005883a 	mov	r2,r4
     d6c:	f800283a 	ret
     d70:	f800283a 	ret
     d74:	0009883a 	mov	r4,zero
     d78:	003ffa06 	br	d64 <udivmodsi4+0x50>
     d7c:	00c00044 	movi	r3,1
     d80:	0009883a 	mov	r4,zero
     d84:	003ff106 	br	d4c <udivmodsi4+0x38>

00000d88 <__divsi3>:
     d88:	defffe04 	addi	sp,sp,-8
     d8c:	dfc00115 	stw	ra,4(sp)
     d90:	dc000015 	stw	r16,0(sp)
     d94:	20000a16 	blt	r4,zero,dc0 <__divsi3+0x38>
     d98:	0021883a 	mov	r16,zero
     d9c:	28000b16 	blt	r5,zero,dcc <__divsi3+0x44>
     da0:	000d883a 	mov	r6,zero
     da4:	0000d140 	call	d14 <udivmodsi4>
     da8:	80000126 	beq	r16,zero,db0 <__divsi3+0x28>
     dac:	0085c83a 	sub	r2,zero,r2
     db0:	dfc00117 	ldw	ra,4(sp)
     db4:	dc000017 	ldw	r16,0(sp)
     db8:	dec00204 	addi	sp,sp,8
     dbc:	f800283a 	ret
     dc0:	0109c83a 	sub	r4,zero,r4
     dc4:	04000044 	movi	r16,1
     dc8:	283ff50e 	bge	r5,zero,da0 <__divsi3+0x18>
     dcc:	014bc83a 	sub	r5,zero,r5
     dd0:	8400005c 	xori	r16,r16,1
     dd4:	003ff206 	br	da0 <__divsi3+0x18>

00000dd8 <__modsi3>:
     dd8:	deffff04 	addi	sp,sp,-4
     ddc:	dfc00015 	stw	ra,0(sp)
     de0:	20000516 	blt	r4,zero,df8 <__modsi3+0x20>
     de4:	28000c16 	blt	r5,zero,e18 <__modsi3+0x40>
     de8:	01800044 	movi	r6,1
     dec:	dfc00017 	ldw	ra,0(sp)
     df0:	dec00104 	addi	sp,sp,4
     df4:	0000d141 	jmpi	d14 <udivmodsi4>
     df8:	0109c83a 	sub	r4,zero,r4
     dfc:	28000b16 	blt	r5,zero,e2c <__modsi3+0x54>
     e00:	01800044 	movi	r6,1
     e04:	0000d140 	call	d14 <udivmodsi4>
     e08:	0085c83a 	sub	r2,zero,r2
     e0c:	dfc00017 	ldw	ra,0(sp)
     e10:	dec00104 	addi	sp,sp,4
     e14:	f800283a 	ret
     e18:	014bc83a 	sub	r5,zero,r5
     e1c:	01800044 	movi	r6,1
     e20:	dfc00017 	ldw	ra,0(sp)
     e24:	dec00104 	addi	sp,sp,4
     e28:	0000d141 	jmpi	d14 <udivmodsi4>
     e2c:	014bc83a 	sub	r5,zero,r5
     e30:	003ff306 	br	e00 <__modsi3+0x28>

00000e34 <__udivsi3>:
     e34:	000d883a 	mov	r6,zero
     e38:	0000d141 	jmpi	d14 <udivmodsi4>

00000e3c <__umodsi3>:
     e3c:	01800044 	movi	r6,1
     e40:	0000d141 	jmpi	d14 <udivmodsi4>

00000e44 <__mulsi3>:
     e44:	0005883a 	mov	r2,zero
     e48:	20000726 	beq	r4,zero,e68 <__mulsi3+0x24>
     e4c:	20c0004c 	andi	r3,r4,1
     e50:	2008d07a 	srli	r4,r4,1
     e54:	18000126 	beq	r3,zero,e5c <__mulsi3+0x18>
     e58:	1145883a 	add	r2,r2,r5
     e5c:	294b883a 	add	r5,r5,r5
     e60:	203ffa1e 	bne	r4,zero,e4c <__mulsi3+0x8>
     e64:	f800283a 	ret
     e68:	f800283a 	ret

00000e6c <calloc>:
     e6c:	00c00074 	movhi	r3,1
     e70:	18fbd004 	addi	r3,r3,-4288
     e74:	2005883a 	mov	r2,r4
     e78:	19000017 	ldw	r4,0(r3)
     e7c:	280d883a 	mov	r6,r5
     e80:	100b883a 	mov	r5,r2
     e84:	0000e881 	jmpi	e88 <_calloc_r>

00000e88 <_calloc_r>:
     e88:	defffe04 	addi	sp,sp,-8
     e8c:	dc000015 	stw	r16,0(sp)
     e90:	2021883a 	mov	r16,r4
     e94:	3009883a 	mov	r4,r6
     e98:	dfc00115 	stw	ra,4(sp)
     e9c:	0000e440 	call	e44 <__mulsi3>
     ea0:	8009883a 	mov	r4,r16
     ea4:	100b883a 	mov	r5,r2
     ea8:	0000f7c0 	call	f7c <_malloc_r>
     eac:	1021883a 	mov	r16,r2
     eb0:	10000c26 	beq	r2,zero,ee4 <_calloc_r+0x5c>
     eb4:	11bfff17 	ldw	r6,-4(r2)
     eb8:	00ffff04 	movi	r3,-4
     ebc:	00800904 	movi	r2,36
     ec0:	30cc703a 	and	r6,r6,r3
     ec4:	30cd883a 	add	r6,r6,r3
     ec8:	11801436 	bltu	r2,r6,f1c <_calloc_r+0x94>
     ecc:	00c004c4 	movi	r3,19
     ed0:	19800936 	bltu	r3,r6,ef8 <_calloc_r+0x70>
     ed4:	8005883a 	mov	r2,r16
     ed8:	10000015 	stw	zero,0(r2)
     edc:	10000115 	stw	zero,4(r2)
     ee0:	10000215 	stw	zero,8(r2)
     ee4:	8005883a 	mov	r2,r16
     ee8:	dfc00117 	ldw	ra,4(sp)
     eec:	dc000017 	ldw	r16,0(sp)
     ef0:	dec00204 	addi	sp,sp,8
     ef4:	f800283a 	ret
     ef8:	80000015 	stw	zero,0(r16)
     efc:	80000115 	stw	zero,4(r16)
     f00:	00c006c4 	movi	r3,27
     f04:	19800d2e 	bgeu	r3,r6,f3c <_calloc_r+0xb4>
     f08:	80000215 	stw	zero,8(r16)
     f0c:	80000315 	stw	zero,12(r16)
     f10:	30800c26 	beq	r6,r2,f44 <_calloc_r+0xbc>
     f14:	80800404 	addi	r2,r16,16
     f18:	003fef06 	br	ed8 <_calloc_r+0x50>
     f1c:	8009883a 	mov	r4,r16
     f20:	000b883a 	mov	r5,zero
     f24:	00018400 	call	1840 <memset>
     f28:	8005883a 	mov	r2,r16
     f2c:	dfc00117 	ldw	ra,4(sp)
     f30:	dc000017 	ldw	r16,0(sp)
     f34:	dec00204 	addi	sp,sp,8
     f38:	f800283a 	ret
     f3c:	80800204 	addi	r2,r16,8
     f40:	003fe506 	br	ed8 <_calloc_r+0x50>
     f44:	80000415 	stw	zero,16(r16)
     f48:	80000515 	stw	zero,20(r16)
     f4c:	80800604 	addi	r2,r16,24
     f50:	003fe106 	br	ed8 <_calloc_r+0x50>

00000f54 <malloc>:
     f54:	00800074 	movhi	r2,1
     f58:	10bbd004 	addi	r2,r2,-4288
     f5c:	200b883a 	mov	r5,r4
     f60:	11000017 	ldw	r4,0(r2)
     f64:	0000f7c1 	jmpi	f7c <_malloc_r>

00000f68 <free>:
     f68:	00800074 	movhi	r2,1
     f6c:	10bbd004 	addi	r2,r2,-4288
     f70:	200b883a 	mov	r5,r4
     f74:	11000017 	ldw	r4,0(r2)
     f78:	00058c81 	jmpi	58c8 <_free_r>

00000f7c <_malloc_r>:
     f7c:	defff604 	addi	sp,sp,-40
     f80:	dc800215 	stw	r18,8(sp)
     f84:	dfc00915 	stw	ra,36(sp)
     f88:	df000815 	stw	fp,32(sp)
     f8c:	ddc00715 	stw	r23,28(sp)
     f90:	dd800615 	stw	r22,24(sp)
     f94:	dd400515 	stw	r21,20(sp)
     f98:	dd000415 	stw	r20,16(sp)
     f9c:	dcc00315 	stw	r19,12(sp)
     fa0:	dc400115 	stw	r17,4(sp)
     fa4:	dc000015 	stw	r16,0(sp)
     fa8:	288002c4 	addi	r2,r5,11
     fac:	00c00584 	movi	r3,22
     fb0:	2025883a 	mov	r18,r4
     fb4:	18802b2e 	bgeu	r3,r2,1064 <_malloc_r+0xe8>
     fb8:	047ffe04 	movi	r17,-8
     fbc:	1462703a 	and	r17,r2,r17
     fc0:	88002a16 	blt	r17,zero,106c <_malloc_r+0xf0>
     fc4:	89402936 	bltu	r17,r5,106c <_malloc_r+0xf0>
     fc8:	9009883a 	mov	r4,r18
     fcc:	000aac00 	call	aac0 <__malloc_lock>
     fd0:	00807dc4 	movi	r2,503
     fd4:	14402936 	bltu	r2,r17,107c <_malloc_r+0x100>
     fd8:	8808d0fa 	srli	r4,r17,3
     fdc:	04c00074 	movhi	r19,1
     fe0:	9cf64804 	addi	r19,r19,-9952
     fe4:	2105883a 	add	r2,r4,r4
     fe8:	1085883a 	add	r2,r2,r2
     fec:	1085883a 	add	r2,r2,r2
     ff0:	9885883a 	add	r2,r19,r2
     ff4:	14000317 	ldw	r16,12(r2)
     ff8:	80815526 	beq	r16,r2,1550 <_malloc_r+0x5d4>
     ffc:	81000117 	ldw	r4,4(r16)
    1000:	00bfff04 	movi	r2,-4
    1004:	80c00317 	ldw	r3,12(r16)
    1008:	2084703a 	and	r2,r4,r2
    100c:	8085883a 	add	r2,r16,r2
    1010:	11800117 	ldw	r6,4(r2)
    1014:	81400217 	ldw	r5,8(r16)
    1018:	9009883a 	mov	r4,r18
    101c:	31800054 	ori	r6,r6,1
    1020:	11800115 	stw	r6,4(r2)
    1024:	28c00315 	stw	r3,12(r5)
    1028:	19400215 	stw	r5,8(r3)
    102c:	000aae00 	call	aae0 <__malloc_unlock>
    1030:	80800204 	addi	r2,r16,8
    1034:	dfc00917 	ldw	ra,36(sp)
    1038:	df000817 	ldw	fp,32(sp)
    103c:	ddc00717 	ldw	r23,28(sp)
    1040:	dd800617 	ldw	r22,24(sp)
    1044:	dd400517 	ldw	r21,20(sp)
    1048:	dd000417 	ldw	r20,16(sp)
    104c:	dcc00317 	ldw	r19,12(sp)
    1050:	dc800217 	ldw	r18,8(sp)
    1054:	dc400117 	ldw	r17,4(sp)
    1058:	dc000017 	ldw	r16,0(sp)
    105c:	dec00a04 	addi	sp,sp,40
    1060:	f800283a 	ret
    1064:	04400404 	movi	r17,16
    1068:	897fd72e 	bgeu	r17,r5,fc8 <_malloc_r+0x4c>
    106c:	00800304 	movi	r2,12
    1070:	90800015 	stw	r2,0(r18)
    1074:	0005883a 	mov	r2,zero
    1078:	003fee06 	br	1034 <_malloc_r+0xb8>
    107c:	8808d27a 	srli	r4,r17,9
    1080:	20007126 	beq	r4,zero,1248 <_malloc_r+0x2cc>
    1084:	00800104 	movi	r2,4
    1088:	1100eb36 	bltu	r2,r4,1438 <_malloc_r+0x4bc>
    108c:	8808d1ba 	srli	r4,r17,6
    1090:	21000e04 	addi	r4,r4,56
    1094:	210b883a 	add	r5,r4,r4
    1098:	294b883a 	add	r5,r5,r5
    109c:	294b883a 	add	r5,r5,r5
    10a0:	04c00074 	movhi	r19,1
    10a4:	9cf64804 	addi	r19,r19,-9952
    10a8:	994b883a 	add	r5,r19,r5
    10ac:	2c000317 	ldw	r16,12(r5)
    10b0:	2c000e26 	beq	r5,r16,10ec <_malloc_r+0x170>
    10b4:	80c00117 	ldw	r3,4(r16)
    10b8:	01ffff04 	movi	r7,-4
    10bc:	018003c4 	movi	r6,15
    10c0:	19c6703a 	and	r3,r3,r7
    10c4:	1c45c83a 	sub	r2,r3,r17
    10c8:	30800716 	blt	r6,r2,10e8 <_malloc_r+0x16c>
    10cc:	1000610e 	bge	r2,zero,1254 <_malloc_r+0x2d8>
    10d0:	84000317 	ldw	r16,12(r16)
    10d4:	2c000526 	beq	r5,r16,10ec <_malloc_r+0x170>
    10d8:	80c00117 	ldw	r3,4(r16)
    10dc:	19c6703a 	and	r3,r3,r7
    10e0:	1c45c83a 	sub	r2,r3,r17
    10e4:	30bff90e 	bge	r6,r2,10cc <_malloc_r+0x150>
    10e8:	213fffc4 	addi	r4,r4,-1
    10ec:	21000044 	addi	r4,r4,1
    10f0:	9c000417 	ldw	r16,16(r19)
    10f4:	00c00074 	movhi	r3,1
    10f8:	18f64804 	addi	r3,r3,-9952
    10fc:	1a400204 	addi	r9,r3,8
    1100:	8240ff26 	beq	r16,r9,1500 <_malloc_r+0x584>
    1104:	81400117 	ldw	r5,4(r16)
    1108:	00bfff04 	movi	r2,-4
    110c:	018003c4 	movi	r6,15
    1110:	2884703a 	and	r2,r5,r2
    1114:	144bc83a 	sub	r5,r2,r17
    1118:	3140ea16 	blt	r6,r5,14c4 <_malloc_r+0x548>
    111c:	1a400515 	stw	r9,20(r3)
    1120:	1a400415 	stw	r9,16(r3)
    1124:	2800570e 	bge	r5,zero,1284 <_malloc_r+0x308>
    1128:	01407fc4 	movi	r5,511
    112c:	2880ca36 	bltu	r5,r2,1458 <_malloc_r+0x4dc>
    1130:	1004d0fa 	srli	r2,r2,3
    1134:	02000044 	movi	r8,1
    1138:	19c00117 	ldw	r7,4(r3)
    113c:	108b883a 	add	r5,r2,r2
    1140:	294b883a 	add	r5,r5,r5
    1144:	1005d0ba 	srai	r2,r2,2
    1148:	294b883a 	add	r5,r5,r5
    114c:	28cb883a 	add	r5,r5,r3
    1150:	29800217 	ldw	r6,8(r5)
    1154:	4084983a 	sll	r2,r8,r2
    1158:	81400315 	stw	r5,12(r16)
    115c:	81800215 	stw	r6,8(r16)
    1160:	11c4b03a 	or	r2,r2,r7
    1164:	18800115 	stw	r2,4(r3)
    1168:	2c000215 	stw	r16,8(r5)
    116c:	34000315 	stw	r16,12(r6)
    1170:	200bd0ba 	srai	r5,r4,2
    1174:	00c00044 	movi	r3,1
    1178:	194a983a 	sll	r5,r3,r5
    117c:	11404936 	bltu	r2,r5,12a4 <_malloc_r+0x328>
    1180:	1146703a 	and	r3,r2,r5
    1184:	18000a1e 	bne	r3,zero,11b0 <_malloc_r+0x234>
    1188:	00ffff04 	movi	r3,-4
    118c:	294b883a 	add	r5,r5,r5
    1190:	20c8703a 	and	r4,r4,r3
    1194:	1146703a 	and	r3,r2,r5
    1198:	21000104 	addi	r4,r4,4
    119c:	1800041e 	bne	r3,zero,11b0 <_malloc_r+0x234>
    11a0:	294b883a 	add	r5,r5,r5
    11a4:	1146703a 	and	r3,r2,r5
    11a8:	21000104 	addi	r4,r4,4
    11ac:	183ffc26 	beq	r3,zero,11a0 <_malloc_r+0x224>
    11b0:	023fff04 	movi	r8,-4
    11b4:	01c003c4 	movi	r7,15
    11b8:	2105883a 	add	r2,r4,r4
    11bc:	1085883a 	add	r2,r2,r2
    11c0:	1085883a 	add	r2,r2,r2
    11c4:	9899883a 	add	r12,r19,r2
    11c8:	62800304 	addi	r10,r12,12
    11cc:	2017883a 	mov	r11,r4
    11d0:	54000017 	ldw	r16,0(r10)
    11d4:	51bffd04 	addi	r6,r10,-12
    11d8:	8180041e 	bne	r16,r6,11ec <_malloc_r+0x270>
    11dc:	0000ca06 	br	1508 <_malloc_r+0x58c>
    11e0:	10001c0e 	bge	r2,zero,1254 <_malloc_r+0x2d8>
    11e4:	84000317 	ldw	r16,12(r16)
    11e8:	8180c726 	beq	r16,r6,1508 <_malloc_r+0x58c>
    11ec:	80c00117 	ldw	r3,4(r16)
    11f0:	1a06703a 	and	r3,r3,r8
    11f4:	1c45c83a 	sub	r2,r3,r17
    11f8:	38bff90e 	bge	r7,r2,11e0 <_malloc_r+0x264>
    11fc:	81000317 	ldw	r4,12(r16)
    1200:	81400217 	ldw	r5,8(r16)
    1204:	8447883a 	add	r3,r16,r17
    1208:	8c400054 	ori	r17,r17,1
    120c:	29000315 	stw	r4,12(r5)
    1210:	21400215 	stw	r5,8(r4)
    1214:	84400115 	stw	r17,4(r16)
    1218:	1889883a 	add	r4,r3,r2
    121c:	11400054 	ori	r5,r2,1
    1220:	98c00515 	stw	r3,20(r19)
    1224:	98c00415 	stw	r3,16(r19)
    1228:	20800015 	stw	r2,0(r4)
    122c:	1a400315 	stw	r9,12(r3)
    1230:	1a400215 	stw	r9,8(r3)
    1234:	19400115 	stw	r5,4(r3)
    1238:	9009883a 	mov	r4,r18
    123c:	000aae00 	call	aae0 <__malloc_unlock>
    1240:	80800204 	addi	r2,r16,8
    1244:	003f7b06 	br	1034 <_malloc_r+0xb8>
    1248:	8808d0fa 	srli	r4,r17,3
    124c:	210b883a 	add	r5,r4,r4
    1250:	003f9106 	br	1098 <_malloc_r+0x11c>
    1254:	80c7883a 	add	r3,r16,r3
    1258:	19400117 	ldw	r5,4(r3)
    125c:	80800317 	ldw	r2,12(r16)
    1260:	81000217 	ldw	r4,8(r16)
    1264:	29400054 	ori	r5,r5,1
    1268:	19400115 	stw	r5,4(r3)
    126c:	20800315 	stw	r2,12(r4)
    1270:	11000215 	stw	r4,8(r2)
    1274:	9009883a 	mov	r4,r18
    1278:	000aae00 	call	aae0 <__malloc_unlock>
    127c:	80800204 	addi	r2,r16,8
    1280:	003f6c06 	br	1034 <_malloc_r+0xb8>
    1284:	8085883a 	add	r2,r16,r2
    1288:	10c00117 	ldw	r3,4(r2)
    128c:	9009883a 	mov	r4,r18
    1290:	18c00054 	ori	r3,r3,1
    1294:	10c00115 	stw	r3,4(r2)
    1298:	000aae00 	call	aae0 <__malloc_unlock>
    129c:	80800204 	addi	r2,r16,8
    12a0:	003f6406 	br	1034 <_malloc_r+0xb8>
    12a4:	9c000217 	ldw	r16,8(r19)
    12a8:	00bfff04 	movi	r2,-4
    12ac:	85400117 	ldw	r21,4(r16)
    12b0:	a8aa703a 	and	r21,r21,r2
    12b4:	ac400336 	bltu	r21,r17,12c4 <_malloc_r+0x348>
    12b8:	ac45c83a 	sub	r2,r21,r17
    12bc:	00c003c4 	movi	r3,15
    12c0:	18805316 	blt	r3,r2,1410 <_malloc_r+0x494>
    12c4:	d5e6a917 	ldw	r23,-25948(gp)
    12c8:	d0e00217 	ldw	r3,-32760(gp)
    12cc:	00bfffc4 	movi	r2,-1
    12d0:	8579883a 	add	fp,r16,r21
    12d4:	8def883a 	add	r23,r17,r23
    12d8:	1880d226 	beq	r3,r2,1624 <_malloc_r+0x6a8>
    12dc:	bdc403c4 	addi	r23,r23,4111
    12e0:	00bc0004 	movi	r2,-4096
    12e4:	b8ae703a 	and	r23,r23,r2
    12e8:	9009883a 	mov	r4,r18
    12ec:	b80b883a 	mov	r5,r23
    12f0:	00019840 	call	1984 <_sbrk_r>
    12f4:	1029883a 	mov	r20,r2
    12f8:	00bfffc4 	movi	r2,-1
    12fc:	a080d126 	beq	r20,r2,1644 <_malloc_r+0x6c8>
    1300:	a7009f36 	bltu	r20,fp,1580 <_malloc_r+0x604>
    1304:	05800074 	movhi	r22,1
    1308:	b5828304 	addi	r22,r22,2572
    130c:	b0800017 	ldw	r2,0(r22)
    1310:	b885883a 	add	r2,r23,r2
    1314:	b0800015 	stw	r2,0(r22)
    1318:	e500cf26 	beq	fp,r20,1658 <_malloc_r+0x6dc>
    131c:	d1200217 	ldw	r4,-32760(gp)
    1320:	00ffffc4 	movi	r3,-1
    1324:	20c0e026 	beq	r4,r3,16a8 <_malloc_r+0x72c>
    1328:	a739c83a 	sub	fp,r20,fp
    132c:	1705883a 	add	r2,r2,fp
    1330:	b0800015 	stw	r2,0(r22)
    1334:	a08001cc 	andi	r2,r20,7
    1338:	1000a526 	beq	r2,zero,15d0 <_malloc_r+0x654>
    133c:	a0a9c83a 	sub	r20,r20,r2
    1340:	00c40204 	movi	r3,4104
    1344:	a5000204 	addi	r20,r20,8
    1348:	1885c83a 	sub	r2,r3,r2
    134c:	a5c7883a 	add	r3,r20,r23
    1350:	18c3ffcc 	andi	r3,r3,4095
    1354:	10efc83a 	sub	r23,r2,r3
    1358:	9009883a 	mov	r4,r18
    135c:	b80b883a 	mov	r5,r23
    1360:	00019840 	call	1984 <_sbrk_r>
    1364:	00ffffc4 	movi	r3,-1
    1368:	10c0cc26 	beq	r2,r3,169c <_malloc_r+0x720>
    136c:	1505c83a 	sub	r2,r2,r20
    1370:	b887883a 	add	r3,r23,r2
    1374:	18c00054 	ori	r3,r3,1
    1378:	b0800017 	ldw	r2,0(r22)
    137c:	9d000215 	stw	r20,8(r19)
    1380:	a0c00115 	stw	r3,4(r20)
    1384:	b885883a 	add	r2,r23,r2
    1388:	b0800015 	stw	r2,0(r22)
    138c:	84c00e26 	beq	r16,r19,13c8 <_malloc_r+0x44c>
    1390:	00c003c4 	movi	r3,15
    1394:	1d40902e 	bgeu	r3,r21,15d8 <_malloc_r+0x65c>
    1398:	ad7ffd04 	addi	r21,r21,-12
    139c:	013ffe04 	movi	r4,-8
    13a0:	a908703a 	and	r4,r21,r4
    13a4:	810b883a 	add	r5,r16,r4
    13a8:	01800144 	movi	r6,5
    13ac:	29800115 	stw	r6,4(r5)
    13b0:	29800215 	stw	r6,8(r5)
    13b4:	81400117 	ldw	r5,4(r16)
    13b8:	2940004c 	andi	r5,r5,1
    13bc:	214ab03a 	or	r5,r4,r5
    13c0:	81400115 	stw	r5,4(r16)
    13c4:	1900ae36 	bltu	r3,r4,1680 <_malloc_r+0x704>
    13c8:	d0e6a817 	ldw	r3,-25952(gp)
    13cc:	1880012e 	bgeu	r3,r2,13d4 <_malloc_r+0x458>
    13d0:	d0a6a815 	stw	r2,-25952(gp)
    13d4:	d0e6a717 	ldw	r3,-25956(gp)
    13d8:	9c000217 	ldw	r16,8(r19)
    13dc:	1880012e 	bgeu	r3,r2,13e4 <_malloc_r+0x468>
    13e0:	d0a6a715 	stw	r2,-25956(gp)
    13e4:	80c00117 	ldw	r3,4(r16)
    13e8:	00bfff04 	movi	r2,-4
    13ec:	1886703a 	and	r3,r3,r2
    13f0:	1c45c83a 	sub	r2,r3,r17
    13f4:	1c400236 	bltu	r3,r17,1400 <_malloc_r+0x484>
    13f8:	00c003c4 	movi	r3,15
    13fc:	18800416 	blt	r3,r2,1410 <_malloc_r+0x494>
    1400:	9009883a 	mov	r4,r18
    1404:	000aae00 	call	aae0 <__malloc_unlock>
    1408:	0005883a 	mov	r2,zero
    140c:	003f0906 	br	1034 <_malloc_r+0xb8>
    1410:	88c00054 	ori	r3,r17,1
    1414:	10800054 	ori	r2,r2,1
    1418:	80c00115 	stw	r3,4(r16)
    141c:	8463883a 	add	r17,r16,r17
    1420:	88800115 	stw	r2,4(r17)
    1424:	9009883a 	mov	r4,r18
    1428:	9c400215 	stw	r17,8(r19)
    142c:	000aae00 	call	aae0 <__malloc_unlock>
    1430:	80800204 	addi	r2,r16,8
    1434:	003eff06 	br	1034 <_malloc_r+0xb8>
    1438:	00800504 	movi	r2,20
    143c:	1100492e 	bgeu	r2,r4,1564 <_malloc_r+0x5e8>
    1440:	00801504 	movi	r2,84
    1444:	11005c36 	bltu	r2,r4,15b8 <_malloc_r+0x63c>
    1448:	8808d33a 	srli	r4,r17,12
    144c:	21001b84 	addi	r4,r4,110
    1450:	210b883a 	add	r5,r4,r4
    1454:	003f1006 	br	1098 <_malloc_r+0x11c>
    1458:	1006d27a 	srli	r3,r2,9
    145c:	01400104 	movi	r5,4
    1460:	28c0432e 	bgeu	r5,r3,1570 <_malloc_r+0x5f4>
    1464:	01400504 	movi	r5,20
    1468:	28c07036 	bltu	r5,r3,162c <_malloc_r+0x6b0>
    146c:	194016c4 	addi	r5,r3,91
    1470:	294d883a 	add	r6,r5,r5
    1474:	318d883a 	add	r6,r6,r6
    1478:	318d883a 	add	r6,r6,r6
    147c:	998d883a 	add	r6,r19,r6
    1480:	30c00217 	ldw	r3,8(r6)
    1484:	01c00074 	movhi	r7,1
    1488:	39f64804 	addi	r7,r7,-9952
    148c:	19805726 	beq	r3,r6,15ec <_malloc_r+0x670>
    1490:	01ffff04 	movi	r7,-4
    1494:	19400117 	ldw	r5,4(r3)
    1498:	29ca703a 	and	r5,r5,r7
    149c:	1140022e 	bgeu	r2,r5,14a8 <_malloc_r+0x52c>
    14a0:	18c00217 	ldw	r3,8(r3)
    14a4:	30fffb1e 	bne	r6,r3,1494 <_malloc_r+0x518>
    14a8:	19400317 	ldw	r5,12(r3)
    14ac:	98800117 	ldw	r2,4(r19)
    14b0:	81400315 	stw	r5,12(r16)
    14b4:	80c00215 	stw	r3,8(r16)
    14b8:	2c000215 	stw	r16,8(r5)
    14bc:	1c000315 	stw	r16,12(r3)
    14c0:	003f2b06 	br	1170 <_malloc_r+0x1f4>
    14c4:	8445883a 	add	r2,r16,r17
    14c8:	8c400054 	ori	r17,r17,1
    14cc:	18800515 	stw	r2,20(r3)
    14d0:	18800415 	stw	r2,16(r3)
    14d4:	29000054 	ori	r4,r5,1
    14d8:	1147883a 	add	r3,r2,r5
    14dc:	84400115 	stw	r17,4(r16)
    14e0:	11000115 	stw	r4,4(r2)
    14e4:	12400315 	stw	r9,12(r2)
    14e8:	12400215 	stw	r9,8(r2)
    14ec:	19400015 	stw	r5,0(r3)
    14f0:	9009883a 	mov	r4,r18
    14f4:	000aae00 	call	aae0 <__malloc_unlock>
    14f8:	80800204 	addi	r2,r16,8
    14fc:	003ecd06 	br	1034 <_malloc_r+0xb8>
    1500:	18800117 	ldw	r2,4(r3)
    1504:	003f1a06 	br	1170 <_malloc_r+0x1f4>
    1508:	5ac00044 	addi	r11,r11,1
    150c:	588000cc 	andi	r2,r11,3
    1510:	52800204 	addi	r10,r10,8
    1514:	103f2e1e 	bne	r2,zero,11d0 <_malloc_r+0x254>
    1518:	20c000cc 	andi	r3,r4,3
    151c:	60bffe04 	addi	r2,r12,-8
    1520:	18006f26 	beq	r3,zero,16e0 <_malloc_r+0x764>
    1524:	63000017 	ldw	r12,0(r12)
    1528:	213fffc4 	addi	r4,r4,-1
    152c:	60bffa26 	beq	r12,r2,1518 <_malloc_r+0x59c>
    1530:	98800117 	ldw	r2,4(r19)
    1534:	294b883a 	add	r5,r5,r5
    1538:	117f5a36 	bltu	r2,r5,12a4 <_malloc_r+0x328>
    153c:	283f5926 	beq	r5,zero,12a4 <_malloc_r+0x328>
    1540:	1146703a 	and	r3,r2,r5
    1544:	18001626 	beq	r3,zero,15a0 <_malloc_r+0x624>
    1548:	5809883a 	mov	r4,r11
    154c:	003f1a06 	br	11b8 <_malloc_r+0x23c>
    1550:	80800204 	addi	r2,r16,8
    1554:	84000517 	ldw	r16,20(r16)
    1558:	143ea81e 	bne	r2,r16,ffc <_malloc_r+0x80>
    155c:	21000084 	addi	r4,r4,2
    1560:	003ee306 	br	10f0 <_malloc_r+0x174>
    1564:	210016c4 	addi	r4,r4,91
    1568:	210b883a 	add	r5,r4,r4
    156c:	003eca06 	br	1098 <_malloc_r+0x11c>
    1570:	100ad1ba 	srli	r5,r2,6
    1574:	29400e04 	addi	r5,r5,56
    1578:	294d883a 	add	r6,r5,r5
    157c:	003fbd06 	br	1474 <_malloc_r+0x4f8>
    1580:	84ff6026 	beq	r16,r19,1304 <_malloc_r+0x388>
    1584:	00800074 	movhi	r2,1
    1588:	10b64804 	addi	r2,r2,-9952
    158c:	14000217 	ldw	r16,8(r2)
    1590:	00bfff04 	movi	r2,-4
    1594:	80c00117 	ldw	r3,4(r16)
    1598:	1886703a 	and	r3,r3,r2
    159c:	003f9406 	br	13f0 <_malloc_r+0x474>
    15a0:	294b883a 	add	r5,r5,r5
    15a4:	1146703a 	and	r3,r2,r5
    15a8:	5ac00104 	addi	r11,r11,4
    15ac:	183ffc26 	beq	r3,zero,15a0 <_malloc_r+0x624>
    15b0:	5809883a 	mov	r4,r11
    15b4:	003f0006 	br	11b8 <_malloc_r+0x23c>
    15b8:	00805504 	movi	r2,340
    15bc:	11001336 	bltu	r2,r4,160c <_malloc_r+0x690>
    15c0:	8808d3fa 	srli	r4,r17,15
    15c4:	21001dc4 	addi	r4,r4,119
    15c8:	210b883a 	add	r5,r4,r4
    15cc:	003eb206 	br	1098 <_malloc_r+0x11c>
    15d0:	00840004 	movi	r2,4096
    15d4:	003f5d06 	br	134c <_malloc_r+0x3d0>
    15d8:	00800044 	movi	r2,1
    15dc:	a0800115 	stw	r2,4(r20)
    15e0:	a021883a 	mov	r16,r20
    15e4:	0007883a 	mov	r3,zero
    15e8:	003f8106 	br	13f0 <_malloc_r+0x474>
    15ec:	280bd0ba 	srai	r5,r5,2
    15f0:	01800044 	movi	r6,1
    15f4:	38800117 	ldw	r2,4(r7)
    15f8:	314c983a 	sll	r6,r6,r5
    15fc:	180b883a 	mov	r5,r3
    1600:	3084b03a 	or	r2,r6,r2
    1604:	38800115 	stw	r2,4(r7)
    1608:	003fa906 	br	14b0 <_malloc_r+0x534>
    160c:	00815504 	movi	r2,1364
    1610:	11001836 	bltu	r2,r4,1674 <_malloc_r+0x6f8>
    1614:	8808d4ba 	srli	r4,r17,18
    1618:	21001f04 	addi	r4,r4,124
    161c:	210b883a 	add	r5,r4,r4
    1620:	003e9d06 	br	1098 <_malloc_r+0x11c>
    1624:	bdc00404 	addi	r23,r23,16
    1628:	003f2f06 	br	12e8 <_malloc_r+0x36c>
    162c:	01401504 	movi	r5,84
    1630:	28c01f36 	bltu	r5,r3,16b0 <_malloc_r+0x734>
    1634:	100ad33a 	srli	r5,r2,12
    1638:	29401b84 	addi	r5,r5,110
    163c:	294d883a 	add	r6,r5,r5
    1640:	003f8c06 	br	1474 <_malloc_r+0x4f8>
    1644:	9c000217 	ldw	r16,8(r19)
    1648:	00bfff04 	movi	r2,-4
    164c:	80c00117 	ldw	r3,4(r16)
    1650:	1886703a 	and	r3,r3,r2
    1654:	003f6606 	br	13f0 <_malloc_r+0x474>
    1658:	e0c3ffcc 	andi	r3,fp,4095
    165c:	183f2f1e 	bne	r3,zero,131c <_malloc_r+0x3a0>
    1660:	98c00217 	ldw	r3,8(r19)
    1664:	bd49883a 	add	r4,r23,r21
    1668:	21000054 	ori	r4,r4,1
    166c:	19000115 	stw	r4,4(r3)
    1670:	003f5506 	br	13c8 <_malloc_r+0x44c>
    1674:	01403f04 	movi	r5,252
    1678:	01001f84 	movi	r4,126
    167c:	003e8606 	br	1098 <_malloc_r+0x11c>
    1680:	9009883a 	mov	r4,r18
    1684:	81400204 	addi	r5,r16,8
    1688:	00058c80 	call	58c8 <_free_r>
    168c:	00800074 	movhi	r2,1
    1690:	10828304 	addi	r2,r2,2572
    1694:	10800017 	ldw	r2,0(r2)
    1698:	003f4b06 	br	13c8 <_malloc_r+0x44c>
    169c:	00c00044 	movi	r3,1
    16a0:	002f883a 	mov	r23,zero
    16a4:	003f3406 	br	1378 <_malloc_r+0x3fc>
    16a8:	d5200215 	stw	r20,-32760(gp)
    16ac:	003f2106 	br	1334 <_malloc_r+0x3b8>
    16b0:	01405504 	movi	r5,340
    16b4:	28c00436 	bltu	r5,r3,16c8 <_malloc_r+0x74c>
    16b8:	100ad3fa 	srli	r5,r2,15
    16bc:	29401dc4 	addi	r5,r5,119
    16c0:	294d883a 	add	r6,r5,r5
    16c4:	003f6b06 	br	1474 <_malloc_r+0x4f8>
    16c8:	01415504 	movi	r5,1364
    16cc:	28c00936 	bltu	r5,r3,16f4 <_malloc_r+0x778>
    16d0:	100ad4ba 	srli	r5,r2,18
    16d4:	29401f04 	addi	r5,r5,124
    16d8:	294d883a 	add	r6,r5,r5
    16dc:	003f6506 	br	1474 <_malloc_r+0x4f8>
    16e0:	98800117 	ldw	r2,4(r19)
    16e4:	0146303a 	nor	r3,zero,r5
    16e8:	1884703a 	and	r2,r3,r2
    16ec:	98800115 	stw	r2,4(r19)
    16f0:	003f9006 	br	1534 <_malloc_r+0x5b8>
    16f4:	01803f04 	movi	r6,252
    16f8:	01401f84 	movi	r5,126
    16fc:	003f5d06 	br	1474 <_malloc_r+0x4f8>

00001700 <memcpy>:
    1700:	defffb04 	addi	sp,sp,-20
    1704:	dc000015 	stw	r16,0(sp)
    1708:	dfc00415 	stw	ra,16(sp)
    170c:	dcc00315 	stw	r19,12(sp)
    1710:	dc800215 	stw	r18,8(sp)
    1714:	dc400115 	stw	r17,4(sp)
    1718:	00c003c4 	movi	r3,15
    171c:	2021883a 	mov	r16,r4
    1720:	3005883a 	mov	r2,r6
    1724:	1980032e 	bgeu	r3,r6,1734 <memcpy+0x34>
    1728:	2906b03a 	or	r3,r5,r4
    172c:	18c000cc 	andi	r3,r3,3
    1730:	18001026 	beq	r3,zero,1774 <memcpy+0x74>
    1734:	8007883a 	mov	r3,r16
    1738:	288f883a 	add	r7,r5,r2
    173c:	10000526 	beq	r2,zero,1754 <memcpy+0x54>
    1740:	29800003 	ldbu	r6,0(r5)
    1744:	18c00044 	addi	r3,r3,1
    1748:	29400044 	addi	r5,r5,1
    174c:	19bfffc5 	stb	r6,-1(r3)
    1750:	29fffb1e 	bne	r5,r7,1740 <memcpy+0x40>
    1754:	8005883a 	mov	r2,r16
    1758:	dfc00417 	ldw	ra,16(sp)
    175c:	dcc00317 	ldw	r19,12(sp)
    1760:	dc800217 	ldw	r18,8(sp)
    1764:	dc400117 	ldw	r17,4(sp)
    1768:	dc000017 	ldw	r16,0(sp)
    176c:	dec00504 	addi	sp,sp,20
    1770:	f800283a 	ret
    1774:	32bffc04 	addi	r10,r6,-16
    1778:	5014d13a 	srli	r10,r10,4
    177c:	20800404 	addi	r2,r4,16
    1780:	2007883a 	mov	r3,r4
    1784:	5008913a 	slli	r4,r10,4
    1788:	280f883a 	mov	r7,r5
    178c:	1105883a 	add	r2,r2,r4
    1790:	3a000017 	ldw	r8,0(r7)
    1794:	18c00404 	addi	r3,r3,16
    1798:	39c00404 	addi	r7,r7,16
    179c:	1a3ffc15 	stw	r8,-16(r3)
    17a0:	3a3ffd17 	ldw	r8,-12(r7)
    17a4:	1a3ffd15 	stw	r8,-12(r3)
    17a8:	3a3ffe17 	ldw	r8,-8(r7)
    17ac:	1a3ffe15 	stw	r8,-8(r3)
    17b0:	3a3fff17 	ldw	r8,-4(r7)
    17b4:	1a3fff15 	stw	r8,-4(r3)
    17b8:	18bff51e 	bne	r3,r2,1790 <memcpy+0x90>
    17bc:	52800044 	addi	r10,r10,1
    17c0:	5014913a 	slli	r10,r10,4
    17c4:	308003cc 	andi	r2,r6,15
    17c8:	010000c4 	movi	r4,3
    17cc:	8287883a 	add	r3,r16,r10
    17d0:	2a95883a 	add	r10,r5,r10
    17d4:	2080182e 	bgeu	r4,r2,1838 <memcpy+0x138>
    17d8:	147fff04 	addi	r17,r2,-4
    17dc:	8808d0ba 	srli	r4,r17,2
    17e0:	1a400104 	addi	r9,r3,4
    17e4:	180d883a 	mov	r6,r3
    17e8:	2105883a 	add	r2,r4,r4
    17ec:	1085883a 	add	r2,r2,r2
    17f0:	4893883a 	add	r9,r9,r2
    17f4:	500f883a 	mov	r7,r10
    17f8:	3a000017 	ldw	r8,0(r7)
    17fc:	31800104 	addi	r6,r6,4
    1800:	39c00104 	addi	r7,r7,4
    1804:	323fff15 	stw	r8,-4(r6)
    1808:	327ffb1e 	bne	r6,r9,17f8 <memcpy+0xf8>
    180c:	20800044 	addi	r2,r4,1
    1810:	1085883a 	add	r2,r2,r2
    1814:	1085883a 	add	r2,r2,r2
    1818:	017fff04 	movi	r5,-4
    181c:	18a5883a 	add	r18,r3,r2
    1820:	50a7883a 	add	r19,r10,r2
    1824:	0000e440 	call	e44 <__mulsi3>
    1828:	1445883a 	add	r2,r2,r17
    182c:	980b883a 	mov	r5,r19
    1830:	9007883a 	mov	r3,r18
    1834:	003fc006 	br	1738 <memcpy+0x38>
    1838:	500b883a 	mov	r5,r10
    183c:	003fbe06 	br	1738 <memcpy+0x38>

00001840 <memset>:
    1840:	00c000c4 	movi	r3,3
    1844:	2005883a 	mov	r2,r4
    1848:	29403fcc 	andi	r5,r5,255
    184c:	19802d2e 	bgeu	r3,r6,1904 <memset+0xc4>
    1850:	20c6703a 	and	r3,r4,r3
    1854:	18002e1e 	bne	r3,zero,1910 <memset+0xd0>
    1858:	2806923a 	slli	r3,r5,8
    185c:	010003c4 	movi	r4,15
    1860:	3011883a 	mov	r8,r6
    1864:	1946b03a 	or	r3,r3,r5
    1868:	180e943a 	slli	r7,r3,16
    186c:	38ceb03a 	or	r7,r7,r3
    1870:	1007883a 	mov	r3,r2
    1874:	21800f2e 	bgeu	r4,r6,18b4 <memset+0x74>
    1878:	19c00015 	stw	r7,0(r3)
    187c:	19c00115 	stw	r7,4(r3)
    1880:	19c00215 	stw	r7,8(r3)
    1884:	19c00315 	stw	r7,12(r3)
    1888:	423ffc04 	addi	r8,r8,-16
    188c:	18c00404 	addi	r3,r3,16
    1890:	223ff936 	bltu	r4,r8,1878 <memset+0x38>
    1894:	30fffc04 	addi	r3,r6,-16
    1898:	1806d13a 	srli	r3,r3,4
    189c:	318003cc 	andi	r6,r6,15
    18a0:	010000c4 	movi	r4,3
    18a4:	18c00044 	addi	r3,r3,1
    18a8:	1806913a 	slli	r3,r3,4
    18ac:	10c7883a 	add	r3,r2,r3
    18b0:	21800e2e 	bgeu	r4,r6,18ec <memset+0xac>
    18b4:	1813883a 	mov	r9,r3
    18b8:	3011883a 	mov	r8,r6
    18bc:	010000c4 	movi	r4,3
    18c0:	49c00015 	stw	r7,0(r9)
    18c4:	423fff04 	addi	r8,r8,-4
    18c8:	4a400104 	addi	r9,r9,4
    18cc:	223ffc36 	bltu	r4,r8,18c0 <memset+0x80>
    18d0:	313fff04 	addi	r4,r6,-4
    18d4:	2008d0ba 	srli	r4,r4,2
    18d8:	318000cc 	andi	r6,r6,3
    18dc:	21000044 	addi	r4,r4,1
    18e0:	2109883a 	add	r4,r4,r4
    18e4:	2109883a 	add	r4,r4,r4
    18e8:	1907883a 	add	r3,r3,r4
    18ec:	30000a26 	beq	r6,zero,1918 <memset+0xd8>
    18f0:	198d883a 	add	r6,r3,r6
    18f4:	19400005 	stb	r5,0(r3)
    18f8:	18c00044 	addi	r3,r3,1
    18fc:	19bffd1e 	bne	r3,r6,18f4 <memset+0xb4>
    1900:	f800283a 	ret
    1904:	2007883a 	mov	r3,r4
    1908:	303ff91e 	bne	r6,zero,18f0 <memset+0xb0>
    190c:	00000206 	br	1918 <memset+0xd8>
    1910:	2007883a 	mov	r3,r4
    1914:	003ff606 	br	18f0 <memset+0xb0>
    1918:	f800283a 	ret

0000191c <_printf_r>:
    191c:	defffd04 	addi	sp,sp,-12
    1920:	dfc00015 	stw	ra,0(sp)
    1924:	d9800115 	stw	r6,4(sp)
    1928:	d9c00215 	stw	r7,8(sp)
    192c:	280d883a 	mov	r6,r5
    1930:	21400217 	ldw	r5,8(r4)
    1934:	d9c00104 	addi	r7,sp,4
    1938:	0001a1c0 	call	1a1c <___vfprintf_internal_r>
    193c:	dfc00017 	ldw	ra,0(sp)
    1940:	dec00304 	addi	sp,sp,12
    1944:	f800283a 	ret

00001948 <printf>:
    1948:	defffc04 	addi	sp,sp,-16
    194c:	dfc00015 	stw	ra,0(sp)
    1950:	d9400115 	stw	r5,4(sp)
    1954:	d9800215 	stw	r6,8(sp)
    1958:	d9c00315 	stw	r7,12(sp)
    195c:	00800074 	movhi	r2,1
    1960:	10bbd004 	addi	r2,r2,-4288
    1964:	10800017 	ldw	r2,0(r2)
    1968:	200b883a 	mov	r5,r4
    196c:	d9800104 	addi	r6,sp,4
    1970:	11000217 	ldw	r4,8(r2)
    1974:	00038980 	call	3898 <__vfprintf_internal>
    1978:	dfc00017 	ldw	ra,0(sp)
    197c:	dec00404 	addi	sp,sp,16
    1980:	f800283a 	ret

00001984 <_sbrk_r>:
    1984:	defffd04 	addi	sp,sp,-12
    1988:	dc400115 	stw	r17,4(sp)
    198c:	dc000015 	stw	r16,0(sp)
    1990:	2023883a 	mov	r17,r4
    1994:	04000074 	movhi	r16,1
    1998:	84027904 	addi	r16,r16,2532
    199c:	2809883a 	mov	r4,r5
    19a0:	dfc00215 	stw	ra,8(sp)
    19a4:	80000015 	stw	zero,0(r16)
    19a8:	000af4c0 	call	af4c <sbrk>
    19ac:	00ffffc4 	movi	r3,-1
    19b0:	10c00526 	beq	r2,r3,19c8 <_sbrk_r+0x44>
    19b4:	dfc00217 	ldw	ra,8(sp)
    19b8:	dc400117 	ldw	r17,4(sp)
    19bc:	dc000017 	ldw	r16,0(sp)
    19c0:	dec00304 	addi	sp,sp,12
    19c4:	f800283a 	ret
    19c8:	80c00017 	ldw	r3,0(r16)
    19cc:	183ff926 	beq	r3,zero,19b4 <_sbrk_r+0x30>
    19d0:	88c00015 	stw	r3,0(r17)
    19d4:	dfc00217 	ldw	ra,8(sp)
    19d8:	dc400117 	ldw	r17,4(sp)
    19dc:	dc000017 	ldw	r16,0(sp)
    19e0:	dec00304 	addi	sp,sp,12
    19e4:	f800283a 	ret

000019e8 <__sprint_r>:
    19e8:	30800217 	ldw	r2,8(r6)
    19ec:	defffe04 	addi	sp,sp,-8
    19f0:	dc000015 	stw	r16,0(sp)
    19f4:	dfc00115 	stw	ra,4(sp)
    19f8:	3021883a 	mov	r16,r6
    19fc:	10000226 	beq	r2,zero,1a08 <__sprint_r+0x20>
    1a00:	0005b980 	call	5b98 <__sfvwrite_r>
    1a04:	80000215 	stw	zero,8(r16)
    1a08:	80000115 	stw	zero,4(r16)
    1a0c:	dfc00117 	ldw	ra,4(sp)
    1a10:	dc000017 	ldw	r16,0(sp)
    1a14:	dec00204 	addi	sp,sp,8
    1a18:	f800283a 	ret

00001a1c <___vfprintf_internal_r>:
    1a1c:	defeb904 	addi	sp,sp,-1308
    1a20:	dc013d15 	stw	r16,1268(sp)
    1a24:	d9013015 	stw	r4,1216(sp)
    1a28:	dfc14615 	stw	ra,1304(sp)
    1a2c:	df014515 	stw	fp,1300(sp)
    1a30:	ddc14415 	stw	r23,1296(sp)
    1a34:	dd814315 	stw	r22,1292(sp)
    1a38:	dd414215 	stw	r21,1288(sp)
    1a3c:	dd014115 	stw	r20,1284(sp)
    1a40:	dcc14015 	stw	r19,1280(sp)
    1a44:	dc813f15 	stw	r18,1276(sp)
    1a48:	dc413e15 	stw	r17,1272(sp)
    1a4c:	d9412915 	stw	r5,1188(sp)
    1a50:	3021883a 	mov	r16,r6
    1a54:	d9c12d15 	stw	r7,1204(sp)
    1a58:	00062840 	call	6284 <_localeconv_r>
    1a5c:	10800017 	ldw	r2,0(r2)
    1a60:	d9013017 	ldw	r4,1216(sp)
    1a64:	d8013315 	stw	zero,1228(sp)
    1a68:	d8813715 	stw	r2,1244(sp)
    1a6c:	d8013415 	stw	zero,1232(sp)
    1a70:	20000226 	beq	r4,zero,1a7c <___vfprintf_internal_r+0x60>
    1a74:	20800e17 	ldw	r2,56(r4)
    1a78:	10014b26 	beq	r2,zero,1fa8 <___vfprintf_internal_r+0x58c>
    1a7c:	d8c12917 	ldw	r3,1188(sp)
    1a80:	1880030b 	ldhu	r2,12(r3)
    1a84:	10c0020c 	andi	r3,r2,8
    1a88:	18ffffcc 	andi	r3,r3,65535
    1a8c:	18e0001c 	xori	r3,r3,32768
    1a90:	18e00004 	addi	r3,r3,-32768
    1a94:	1800ed26 	beq	r3,zero,1e4c <___vfprintf_internal_r+0x430>
    1a98:	d9012917 	ldw	r4,1188(sp)
    1a9c:	20c00417 	ldw	r3,16(r4)
    1aa0:	1800ea26 	beq	r3,zero,1e4c <___vfprintf_internal_r+0x430>
    1aa4:	1100068c 	andi	r4,r2,26
    1aa8:	00c00284 	movi	r3,10
    1aac:	20c0f026 	beq	r4,r3,1e70 <___vfprintf_internal_r+0x454>
    1ab0:	d9010dc4 	addi	r4,sp,1079
    1ab4:	d8810e04 	addi	r2,sp,1080
    1ab8:	dc413017 	ldw	r17,1216(sp)
    1abc:	d8c00404 	addi	r3,sp,16
    1ac0:	d9012615 	stw	r4,1176(sp)
    1ac4:	1109c83a 	sub	r4,r2,r4
    1ac8:	d8812715 	stw	r2,1180(sp)
    1acc:	d8c11b15 	stw	r3,1132(sp)
    1ad0:	d8011d15 	stw	zero,1140(sp)
    1ad4:	d8011c15 	stw	zero,1136(sp)
    1ad8:	802b883a 	mov	r21,r16
    1adc:	d8013215 	stw	zero,1224(sp)
    1ae0:	d8013615 	stw	zero,1240(sp)
    1ae4:	d8013515 	stw	zero,1236(sp)
    1ae8:	d8012c15 	stw	zero,1200(sp)
    1aec:	1813883a 	mov	r9,r3
    1af0:	d9013915 	stw	r4,1252(sp)
    1af4:	a8800007 	ldb	r2,0(r21)
    1af8:	1002f326 	beq	r2,zero,26c8 <___vfprintf_internal_r+0xcac>
    1afc:	00c00944 	movi	r3,37
    1b00:	a825883a 	mov	r18,r21
    1b04:	10c0021e 	bne	r2,r3,1b10 <___vfprintf_internal_r+0xf4>
    1b08:	00001406 	br	1b5c <___vfprintf_internal_r+0x140>
    1b0c:	10c00326 	beq	r2,r3,1b1c <___vfprintf_internal_r+0x100>
    1b10:	94800044 	addi	r18,r18,1
    1b14:	90800007 	ldb	r2,0(r18)
    1b18:	103ffc1e 	bne	r2,zero,1b0c <___vfprintf_internal_r+0xf0>
    1b1c:	9561c83a 	sub	r16,r18,r21
    1b20:	80000e26 	beq	r16,zero,1b5c <___vfprintf_internal_r+0x140>
    1b24:	da011d17 	ldw	r8,1140(sp)
    1b28:	d8c11c17 	ldw	r3,1136(sp)
    1b2c:	4d400015 	stw	r21,0(r9)
    1b30:	4c000115 	stw	r16,4(r9)
    1b34:	4411883a 	add	r8,r8,r16
    1b38:	18c00044 	addi	r3,r3,1
    1b3c:	da011d15 	stw	r8,1140(sp)
    1b40:	d8c11c15 	stw	r3,1136(sp)
    1b44:	008001c4 	movi	r2,7
    1b48:	10c11016 	blt	r2,r3,1f8c <___vfprintf_internal_r+0x570>
    1b4c:	4a400204 	addi	r9,r9,8
    1b50:	d8812c17 	ldw	r2,1200(sp)
    1b54:	1405883a 	add	r2,r2,r16
    1b58:	d8812c15 	stw	r2,1200(sp)
    1b5c:	90800007 	ldb	r2,0(r18)
    1b60:	1000ee26 	beq	r2,zero,1f1c <___vfprintf_internal_r+0x500>
    1b64:	95400044 	addi	r21,r18,1
    1b68:	94800047 	ldb	r18,1(r18)
    1b6c:	073fffc4 	movi	fp,-1
    1b70:	e007883a 	mov	r3,fp
    1b74:	d8012585 	stb	zero,1174(sp)
    1b78:	d8012e15 	stw	zero,1208(sp)
    1b7c:	0021883a 	mov	r16,zero
    1b80:	05001604 	movi	r20,88
    1b84:	04c00244 	movi	r19,9
    1b88:	4839883a 	mov	fp,r9
    1b8c:	ad400044 	addi	r21,r21,1
    1b90:	90bff804 	addi	r2,r18,-32
    1b94:	a080462e 	bgeu	r20,r2,1cb0 <___vfprintf_internal_r+0x294>
    1b98:	e013883a 	mov	r9,fp
    1b9c:	9000df26 	beq	r18,zero,1f1c <___vfprintf_internal_r+0x500>
    1ba0:	00c00044 	movi	r3,1
    1ba4:	d8c12815 	stw	r3,1184(sp)
    1ba8:	dc810405 	stb	r18,1040(sp)
    1bac:	d8012585 	stb	zero,1174(sp)
    1bb0:	d8c12b15 	stw	r3,1196(sp)
    1bb4:	dcc10404 	addi	r19,sp,1040
    1bb8:	d8013115 	stw	zero,1220(sp)
    1bbc:	80c0008c 	andi	r3,r16,2
    1bc0:	d8c12a15 	stw	r3,1192(sp)
    1bc4:	18000326 	beq	r3,zero,1bd4 <___vfprintf_internal_r+0x1b8>
    1bc8:	d8c12817 	ldw	r3,1184(sp)
    1bcc:	18c00084 	addi	r3,r3,2
    1bd0:	d8c12815 	stw	r3,1184(sp)
    1bd4:	80c0210c 	andi	r3,r16,132
    1bd8:	d8c12f15 	stw	r3,1212(sp)
    1bdc:	1802251e 	bne	r3,zero,2474 <___vfprintf_internal_r+0xa58>
    1be0:	d9012e17 	ldw	r4,1208(sp)
    1be4:	d8c12817 	ldw	r3,1184(sp)
    1be8:	20edc83a 	sub	r22,r4,r3
    1bec:	0582210e 	bge	zero,r22,2474 <___vfprintf_internal_r+0xa58>
    1bf0:	02800404 	movi	r10,16
    1bf4:	da011d17 	ldw	r8,1140(sp)
    1bf8:	d8c11c17 	ldw	r3,1136(sp)
    1bfc:	05c00074 	movhi	r23,1
    1c00:	bdf49284 	addi	r23,r23,-11702
    1c04:	5580200e 	bge	r10,r22,1c88 <___vfprintf_internal_r+0x26c>
    1c08:	dc813815 	stw	r18,1248(sp)
    1c0c:	5039883a 	mov	fp,r10
    1c10:	b825883a 	mov	r18,r23
    1c14:	050001c4 	movi	r20,7
    1c18:	b02f883a 	mov	r23,r22
    1c1c:	802d883a 	mov	r22,r16
    1c20:	dc012917 	ldw	r16,1188(sp)
    1c24:	00000306 	br	1c34 <___vfprintf_internal_r+0x218>
    1c28:	bdfffc04 	addi	r23,r23,-16
    1c2c:	4a400204 	addi	r9,r9,8
    1c30:	e5c0110e 	bge	fp,r23,1c78 <___vfprintf_internal_r+0x25c>
    1c34:	4c800015 	stw	r18,0(r9)
    1c38:	4f000115 	stw	fp,4(r9)
    1c3c:	42000404 	addi	r8,r8,16
    1c40:	18c00044 	addi	r3,r3,1
    1c44:	da011d15 	stw	r8,1140(sp)
    1c48:	d8c11c15 	stw	r3,1136(sp)
    1c4c:	a0fff60e 	bge	r20,r3,1c28 <___vfprintf_internal_r+0x20c>
    1c50:	8809883a 	mov	r4,r17
    1c54:	800b883a 	mov	r5,r16
    1c58:	d9811b04 	addi	r6,sp,1132
    1c5c:	00019e80 	call	19e8 <__sprint_r>
    1c60:	1000b41e 	bne	r2,zero,1f34 <___vfprintf_internal_r+0x518>
    1c64:	bdfffc04 	addi	r23,r23,-16
    1c68:	da011d17 	ldw	r8,1140(sp)
    1c6c:	d8c11c17 	ldw	r3,1136(sp)
    1c70:	da400404 	addi	r9,sp,16
    1c74:	e5ffef16 	blt	fp,r23,1c34 <___vfprintf_internal_r+0x218>
    1c78:	b021883a 	mov	r16,r22
    1c7c:	b82d883a 	mov	r22,r23
    1c80:	902f883a 	mov	r23,r18
    1c84:	dc813817 	ldw	r18,1248(sp)
    1c88:	4dc00015 	stw	r23,0(r9)
    1c8c:	4d800115 	stw	r22,4(r9)
    1c90:	4591883a 	add	r8,r8,r22
    1c94:	18c00044 	addi	r3,r3,1
    1c98:	da011d15 	stw	r8,1140(sp)
    1c9c:	d8c11c15 	stw	r3,1136(sp)
    1ca0:	008001c4 	movi	r2,7
    1ca4:	10c3fe16 	blt	r2,r3,2ca0 <___vfprintf_internal_r+0x1284>
    1ca8:	4a400204 	addi	r9,r9,8
    1cac:	0001f306 	br	247c <___vfprintf_internal_r+0xa60>
    1cb0:	1085883a 	add	r2,r2,r2
    1cb4:	1085883a 	add	r2,r2,r2
    1cb8:	01000034 	movhi	r4,0
    1cbc:	21073304 	addi	r4,r4,7372
    1cc0:	1105883a 	add	r2,r2,r4
    1cc4:	10800017 	ldw	r2,0(r2)
    1cc8:	1000683a 	jmp	r2
    1ccc:	000023a8 	cmpgeui	zero,zero,142
    1cd0:	00001b98 	cmpnei	zero,zero,110
    1cd4:	00001b98 	cmpnei	zero,zero,110
    1cd8:	000023c0 	call	23c <add_node+0x1c>
    1cdc:	00001b98 	cmpnei	zero,zero,110
    1ce0:	00001b98 	cmpnei	zero,zero,110
    1ce4:	00001b98 	cmpnei	zero,zero,110
    1ce8:	00001b98 	cmpnei	zero,zero,110
    1cec:	00001b98 	cmpnei	zero,zero,110
    1cf0:	00001b98 	cmpnei	zero,zero,110
    1cf4:	00002278 	rdprs	zero,zero,137
    1cf8:	0000240c 	andi	zero,zero,144
    1cfc:	00001b98 	cmpnei	zero,zero,110
    1d00:	00001e40 	call	1e4 <_start>
    1d04:	000021e0 	cmpeqi	zero,zero,135
    1d08:	00001b98 	cmpnei	zero,zero,110
    1d0c:	000023cc 	andi	zero,zero,143
    1d10:	000023d8 	cmpnei	zero,zero,143
    1d14:	000023d8 	cmpnei	zero,zero,143
    1d18:	000023d8 	cmpnei	zero,zero,143
    1d1c:	000023d8 	cmpnei	zero,zero,143
    1d20:	000023d8 	cmpnei	zero,zero,143
    1d24:	000023d8 	cmpnei	zero,zero,143
    1d28:	000023d8 	cmpnei	zero,zero,143
    1d2c:	000023d8 	cmpnei	zero,zero,143
    1d30:	000023d8 	cmpnei	zero,zero,143
    1d34:	00001b98 	cmpnei	zero,zero,110
    1d38:	00001b98 	cmpnei	zero,zero,110
    1d3c:	00001b98 	cmpnei	zero,zero,110
    1d40:	00001b98 	cmpnei	zero,zero,110
    1d44:	00001b98 	cmpnei	zero,zero,110
    1d48:	00001b98 	cmpnei	zero,zero,110
    1d4c:	00001b98 	cmpnei	zero,zero,110
    1d50:	00001b98 	cmpnei	zero,zero,110
    1d54:	00001b98 	cmpnei	zero,zero,110
    1d58:	00001b98 	cmpnei	zero,zero,110
    1d5c:	00001fb0 	cmpltui	zero,zero,126
    1d60:	00002070 	cmpltui	zero,zero,129
    1d64:	00001b98 	cmpnei	zero,zero,110
    1d68:	00002070 	cmpltui	zero,zero,129
    1d6c:	00001b98 	cmpnei	zero,zero,110
    1d70:	00001b98 	cmpnei	zero,zero,110
    1d74:	00001b98 	cmpnei	zero,zero,110
    1d78:	00001b98 	cmpnei	zero,zero,110
    1d7c:	00002104 	movi	zero,132
    1d80:	00001b98 	cmpnei	zero,zero,110
    1d84:	00001b98 	cmpnei	zero,zero,110
    1d88:	00002110 	cmplti	zero,zero,132
    1d8c:	00001b98 	cmpnei	zero,zero,110
    1d90:	00001b98 	cmpnei	zero,zero,110
    1d94:	00001b98 	cmpnei	zero,zero,110
    1d98:	00001b98 	cmpnei	zero,zero,110
    1d9c:	00001b98 	cmpnei	zero,zero,110
    1da0:	00002148 	cmpgei	zero,zero,133
    1da4:	00001b98 	cmpnei	zero,zero,110
    1da8:	00001b98 	cmpnei	zero,zero,110
    1dac:	00002184 	movi	zero,134
    1db0:	00001b98 	cmpnei	zero,zero,110
    1db4:	00001b98 	cmpnei	zero,zero,110
    1db8:	00001b98 	cmpnei	zero,zero,110
    1dbc:	00001b98 	cmpnei	zero,zero,110
    1dc0:	00001b98 	cmpnei	zero,zero,110
    1dc4:	00001b98 	cmpnei	zero,zero,110
    1dc8:	00001b98 	cmpnei	zero,zero,110
    1dcc:	00001b98 	cmpnei	zero,zero,110
    1dd0:	00001b98 	cmpnei	zero,zero,110
    1dd4:	00001b98 	cmpnei	zero,zero,110
    1dd8:	0000241c 	xori	zero,zero,144
    1ddc:	00002450 	cmplti	zero,zero,145
    1de0:	00002070 	cmpltui	zero,zero,129
    1de4:	00002070 	cmpltui	zero,zero,129
    1de8:	00002070 	cmpltui	zero,zero,129
    1dec:	0000239c 	xori	zero,zero,142
    1df0:	00002450 	cmplti	zero,zero,145
    1df4:	00001b98 	cmpnei	zero,zero,110
    1df8:	00001b98 	cmpnei	zero,zero,110
    1dfc:	00002228 	cmpgeui	zero,zero,136
    1e00:	00001b98 	cmpnei	zero,zero,110
    1e04:	00002240 	call	224 <add_node+0x4>
    1e08:	0000245c 	xori	zero,zero,145
    1e0c:	000022a0 	cmpeqi	zero,zero,138
    1e10:	000022f0 	cmpltui	zero,zero,139
    1e14:	00001b98 	cmpnei	zero,zero,110
    1e18:	000022fc 	xorhi	zero,zero,139
    1e1c:	00001b98 	cmpnei	zero,zero,110
    1e20:	00002468 	cmpgeui	zero,zero,145
    1e24:	00001b98 	cmpnei	zero,zero,110
    1e28:	00001b98 	cmpnei	zero,zero,110
    1e2c:	00002360 	cmpeqi	zero,zero,141
    1e30:	d9012e17 	ldw	r4,1208(sp)
    1e34:	d8812d15 	stw	r2,1204(sp)
    1e38:	0109c83a 	sub	r4,zero,r4
    1e3c:	d9012e15 	stw	r4,1208(sp)
    1e40:	84000114 	ori	r16,r16,4
    1e44:	ac800007 	ldb	r18,0(r21)
    1e48:	003f5006 	br	1b8c <___vfprintf_internal_r+0x170>
    1e4c:	d9013017 	ldw	r4,1216(sp)
    1e50:	d9412917 	ldw	r5,1188(sp)
    1e54:	00038bc0 	call	38bc <__swsetup_r>
    1e58:	10003d1e 	bne	r2,zero,1f50 <___vfprintf_internal_r+0x534>
    1e5c:	d8c12917 	ldw	r3,1188(sp)
    1e60:	1880030b 	ldhu	r2,12(r3)
    1e64:	00c00284 	movi	r3,10
    1e68:	1100068c 	andi	r4,r2,26
    1e6c:	20ff101e 	bne	r4,r3,1ab0 <___vfprintf_internal_r+0x94>
    1e70:	d9012917 	ldw	r4,1188(sp)
    1e74:	20c0038b 	ldhu	r3,14(r4)
    1e78:	193fffcc 	andi	r4,r3,65535
    1e7c:	2120001c 	xori	r4,r4,32768
    1e80:	21200004 	addi	r4,r4,-32768
    1e84:	203f0a16 	blt	r4,zero,1ab0 <___vfprintf_internal_r+0x94>
    1e88:	d9012917 	ldw	r4,1188(sp)
    1e8c:	d9c12d17 	ldw	r7,1204(sp)
    1e90:	10bfff4c 	andi	r2,r2,65533
    1e94:	22800717 	ldw	r10,28(r4)
    1e98:	22400917 	ldw	r9,36(r4)
    1e9c:	d9013017 	ldw	r4,1216(sp)
    1ea0:	02010004 	movi	r8,1024
    1ea4:	d881070d 	sth	r2,1052(sp)
    1ea8:	d9410404 	addi	r5,sp,1040
    1eac:	d8800404 	addi	r2,sp,16
    1eb0:	800d883a 	mov	r6,r16
    1eb4:	d8c1078d 	sth	r3,1054(sp)
    1eb8:	da810b15 	stw	r10,1068(sp)
    1ebc:	da410d15 	stw	r9,1076(sp)
    1ec0:	d8810415 	stw	r2,1040(sp)
    1ec4:	d8810815 	stw	r2,1056(sp)
    1ec8:	da010615 	stw	r8,1048(sp)
    1ecc:	da010915 	stw	r8,1060(sp)
    1ed0:	d8010a15 	stw	zero,1064(sp)
    1ed4:	0001a1c0 	call	1a1c <___vfprintf_internal_r>
    1ed8:	d8812c15 	stw	r2,1200(sp)
    1edc:	10000416 	blt	r2,zero,1ef0 <___vfprintf_internal_r+0x4d4>
    1ee0:	d9013017 	ldw	r4,1216(sp)
    1ee4:	d9410404 	addi	r5,sp,1040
    1ee8:	00052880 	call	5288 <_fflush_r>
    1eec:	1006501e 	bne	r2,zero,3830 <___vfprintf_internal_r+0x1e14>
    1ef0:	d881070b 	ldhu	r2,1052(sp)
    1ef4:	1080100c 	andi	r2,r2,64
    1ef8:	10bfffcc 	andi	r2,r2,65535
    1efc:	10a0001c 	xori	r2,r2,32768
    1f00:	10a00004 	addi	r2,r2,-32768
    1f04:	10001426 	beq	r2,zero,1f58 <___vfprintf_internal_r+0x53c>
    1f08:	d8c12917 	ldw	r3,1188(sp)
    1f0c:	1880030b 	ldhu	r2,12(r3)
    1f10:	10801014 	ori	r2,r2,64
    1f14:	1880030d 	sth	r2,12(r3)
    1f18:	00000f06 	br	1f58 <___vfprintf_internal_r+0x53c>
    1f1c:	d8811d17 	ldw	r2,1140(sp)
    1f20:	10000426 	beq	r2,zero,1f34 <___vfprintf_internal_r+0x518>
    1f24:	d9013017 	ldw	r4,1216(sp)
    1f28:	d9412917 	ldw	r5,1188(sp)
    1f2c:	d9811b04 	addi	r6,sp,1132
    1f30:	00019e80 	call	19e8 <__sprint_r>
    1f34:	d8c12917 	ldw	r3,1188(sp)
    1f38:	1880030b 	ldhu	r2,12(r3)
    1f3c:	1080100c 	andi	r2,r2,64
    1f40:	10bfffcc 	andi	r2,r2,65535
    1f44:	10a0001c 	xori	r2,r2,32768
    1f48:	10a00004 	addi	r2,r2,-32768
    1f4c:	10000226 	beq	r2,zero,1f58 <___vfprintf_internal_r+0x53c>
    1f50:	00bfffc4 	movi	r2,-1
    1f54:	d8812c15 	stw	r2,1200(sp)
    1f58:	d8812c17 	ldw	r2,1200(sp)
    1f5c:	dfc14617 	ldw	ra,1304(sp)
    1f60:	df014517 	ldw	fp,1300(sp)
    1f64:	ddc14417 	ldw	r23,1296(sp)
    1f68:	dd814317 	ldw	r22,1292(sp)
    1f6c:	dd414217 	ldw	r21,1288(sp)
    1f70:	dd014117 	ldw	r20,1284(sp)
    1f74:	dcc14017 	ldw	r19,1280(sp)
    1f78:	dc813f17 	ldw	r18,1276(sp)
    1f7c:	dc413e17 	ldw	r17,1272(sp)
    1f80:	dc013d17 	ldw	r16,1268(sp)
    1f84:	dec14704 	addi	sp,sp,1308
    1f88:	f800283a 	ret
    1f8c:	d9412917 	ldw	r5,1188(sp)
    1f90:	8809883a 	mov	r4,r17
    1f94:	d9811b04 	addi	r6,sp,1132
    1f98:	00019e80 	call	19e8 <__sprint_r>
    1f9c:	103fe51e 	bne	r2,zero,1f34 <___vfprintf_internal_r+0x518>
    1fa0:	da400404 	addi	r9,sp,16
    1fa4:	003eea06 	br	1b50 <___vfprintf_internal_r+0x134>
    1fa8:	00055440 	call	5544 <__sinit>
    1fac:	003eb306 	br	1a7c <___vfprintf_internal_r+0x60>
    1fb0:	e013883a 	mov	r9,fp
    1fb4:	84000414 	ori	r16,r16,16
    1fb8:	1839883a 	mov	fp,r3
    1fbc:	8080080c 	andi	r2,r16,32
    1fc0:	10034426 	beq	r2,zero,2cd4 <___vfprintf_internal_r+0x12b8>
    1fc4:	d8c12d17 	ldw	r3,1204(sp)
    1fc8:	18800117 	ldw	r2,4(r3)
    1fcc:	1dc00017 	ldw	r23,0(r3)
    1fd0:	18c00204 	addi	r3,r3,8
    1fd4:	d8c12d15 	stw	r3,1204(sp)
    1fd8:	102d883a 	mov	r22,r2
    1fdc:	1003020e 	bge	r2,zero,2be8 <___vfprintf_internal_r+0x11cc>
    1fe0:	05efc83a 	sub	r23,zero,r23
    1fe4:	b804c03a 	cmpne	r2,r23,zero
    1fe8:	05adc83a 	sub	r22,zero,r22
    1fec:	b0adc83a 	sub	r22,r22,r2
    1ff0:	00800b44 	movi	r2,45
    1ff4:	d8812585 	stb	r2,1174(sp)
    1ff8:	00c00044 	movi	r3,1
    1ffc:	bd84b03a 	or	r2,r23,r22
    2000:	e0000216 	blt	fp,zero,200c <___vfprintf_internal_r+0x5f0>
    2004:	013fdfc4 	movi	r4,-129
    2008:	8120703a 	and	r16,r16,r4
    200c:	1001cc1e 	bne	r2,zero,2740 <___vfprintf_internal_r+0xd24>
    2010:	e001cb1e 	bne	fp,zero,2740 <___vfprintf_internal_r+0xd24>
    2014:	18c03fcc 	andi	r3,r3,255
    2018:	1802ca1e 	bne	r3,zero,2b44 <___vfprintf_internal_r+0x1128>
    201c:	8080004c 	andi	r2,r16,1
    2020:	1002c826 	beq	r2,zero,2b44 <___vfprintf_internal_r+0x1128>
    2024:	d8c13917 	ldw	r3,1252(sp)
    2028:	00800c04 	movi	r2,48
    202c:	d8810dc5 	stb	r2,1079(sp)
    2030:	d8c12b15 	stw	r3,1196(sp)
    2034:	dcc10dc4 	addi	r19,sp,1079
    2038:	d8812b17 	ldw	r2,1196(sp)
    203c:	d8812815 	stw	r2,1184(sp)
    2040:	1700010e 	bge	r2,fp,2048 <___vfprintf_internal_r+0x62c>
    2044:	df012815 	stw	fp,1184(sp)
    2048:	d8812583 	ldbu	r2,1174(sp)
    204c:	df013115 	stw	fp,1220(sp)
    2050:	10803fcc 	andi	r2,r2,255
    2054:	1080201c 	xori	r2,r2,128
    2058:	10bfe004 	addi	r2,r2,-128
    205c:	103ed726 	beq	r2,zero,1bbc <___vfprintf_internal_r+0x1a0>
    2060:	d8c12817 	ldw	r3,1184(sp)
    2064:	18c00044 	addi	r3,r3,1
    2068:	d8c12815 	stw	r3,1184(sp)
    206c:	003ed306 	br	1bbc <___vfprintf_internal_r+0x1a0>
    2070:	8080020c 	andi	r2,r16,8
    2074:	e013883a 	mov	r9,fp
    2078:	1839883a 	mov	fp,r3
    207c:	1003a626 	beq	r2,zero,2f18 <___vfprintf_internal_r+0x14fc>
    2080:	d9012d17 	ldw	r4,1204(sp)
    2084:	25800017 	ldw	r22,0(r4)
    2088:	25000117 	ldw	r20,4(r4)
    208c:	21000204 	addi	r4,r4,8
    2090:	d9012d15 	stw	r4,1204(sp)
    2094:	dd813315 	stw	r22,1228(sp)
    2098:	dd013415 	stw	r20,1232(sp)
    209c:	b009883a 	mov	r4,r22
    20a0:	a00b883a 	mov	r5,r20
    20a4:	da413c15 	stw	r9,1264(sp)
    20a8:	0007d300 	call	7d30 <__isinfd>
    20ac:	da413c17 	ldw	r9,1264(sp)
    20b0:	b009883a 	mov	r4,r22
    20b4:	a00b883a 	mov	r5,r20
    20b8:	10041d26 	beq	r2,zero,3130 <___vfprintf_internal_r+0x1714>
    20bc:	000d883a 	mov	r6,zero
    20c0:	000f883a 	mov	r7,zero
    20c4:	0009a600 	call	9a60 <__ltdf2>
    20c8:	da413c17 	ldw	r9,1264(sp)
    20cc:	1004da16 	blt	r2,zero,3438 <___vfprintf_internal_r+0x1a1c>
    20d0:	d8812583 	ldbu	r2,1174(sp)
    20d4:	00c011c4 	movi	r3,71
    20d8:	1c83d116 	blt	r3,r18,3020 <___vfprintf_internal_r+0x1604>
    20dc:	04c00074 	movhi	r19,1
    20e0:	9cf48204 	addi	r19,r19,-11768
    20e4:	00c000c4 	movi	r3,3
    20e8:	d8c12815 	stw	r3,1184(sp)
    20ec:	00ffdfc4 	movi	r3,-129
    20f0:	80e0703a 	and	r16,r16,r3
    20f4:	d8c12817 	ldw	r3,1184(sp)
    20f8:	d8013115 	stw	zero,1220(sp)
    20fc:	d8c12b15 	stw	r3,1196(sp)
    2100:	003fd306 	br	2050 <___vfprintf_internal_r+0x634>
    2104:	84000214 	ori	r16,r16,8
    2108:	ac800007 	ldb	r18,0(r21)
    210c:	003e9f06 	br	1b8c <___vfprintf_internal_r+0x170>
    2110:	e013883a 	mov	r9,fp
    2114:	84000414 	ori	r16,r16,16
    2118:	1839883a 	mov	fp,r3
    211c:	8080080c 	andi	r2,r16,32
    2120:	10031d26 	beq	r2,zero,2d98 <___vfprintf_internal_r+0x137c>
    2124:	d8812d17 	ldw	r2,1204(sp)
    2128:	0007883a 	mov	r3,zero
    212c:	15c00017 	ldw	r23,0(r2)
    2130:	15800117 	ldw	r22,4(r2)
    2134:	10800204 	addi	r2,r2,8
    2138:	d8812d15 	stw	r2,1204(sp)
    213c:	d8012585 	stb	zero,1174(sp)
    2140:	bd84b03a 	or	r2,r23,r22
    2144:	003fae06 	br	2000 <___vfprintf_internal_r+0x5e4>
    2148:	e013883a 	mov	r9,fp
    214c:	84000414 	ori	r16,r16,16
    2150:	1839883a 	mov	fp,r3
    2154:	8080080c 	andi	r2,r16,32
    2158:	1002e726 	beq	r2,zero,2cf8 <___vfprintf_internal_r+0x12dc>
    215c:	d8c12d17 	ldw	r3,1204(sp)
    2160:	d9012d17 	ldw	r4,1204(sp)
    2164:	1dc00017 	ldw	r23,0(r3)
    2168:	1d800117 	ldw	r22,4(r3)
    216c:	21000204 	addi	r4,r4,8
    2170:	00c00044 	movi	r3,1
    2174:	d9012d15 	stw	r4,1204(sp)
    2178:	bd84b03a 	or	r2,r23,r22
    217c:	d8012585 	stb	zero,1174(sp)
    2180:	003f9f06 	br	2000 <___vfprintf_internal_r+0x5e4>
    2184:	e013883a 	mov	r9,fp
    2188:	1839883a 	mov	fp,r3
    218c:	00c00074 	movhi	r3,1
    2190:	18f48604 	addi	r3,r3,-11752
    2194:	d8c13615 	stw	r3,1240(sp)
    2198:	8080080c 	andi	r2,r16,32
    219c:	10007726 	beq	r2,zero,237c <___vfprintf_internal_r+0x960>
    21a0:	d9012d17 	ldw	r4,1204(sp)
    21a4:	25c00017 	ldw	r23,0(r4)
    21a8:	25800117 	ldw	r22,4(r4)
    21ac:	21000204 	addi	r4,r4,8
    21b0:	d9012d15 	stw	r4,1204(sp)
    21b4:	8080004c 	andi	r2,r16,1
    21b8:	1002c226 	beq	r2,zero,2cc4 <___vfprintf_internal_r+0x12a8>
    21bc:	bd84b03a 	or	r2,r23,r22
    21c0:	10035d26 	beq	r2,zero,2f38 <___vfprintf_internal_r+0x151c>
    21c4:	00c00c04 	movi	r3,48
    21c8:	d8c12505 	stb	r3,1172(sp)
    21cc:	dc812545 	stb	r18,1173(sp)
    21d0:	84000094 	ori	r16,r16,2
    21d4:	00c00084 	movi	r3,2
    21d8:	d8012585 	stb	zero,1174(sp)
    21dc:	003f8806 	br	2000 <___vfprintf_internal_r+0x5e4>
    21e0:	ac800007 	ldb	r18,0(r21)
    21e4:	00c00a84 	movi	r3,42
    21e8:	adc00044 	addi	r23,r21,1
    21ec:	90c57526 	beq	r18,r3,37c4 <___vfprintf_internal_r+0x1da8>
    21f0:	95bff404 	addi	r22,r18,-48
    21f4:	0009883a 	mov	r4,zero
    21f8:	9d84ff36 	bltu	r19,r22,35f8 <___vfprintf_internal_r+0x1bdc>
    21fc:	01400284 	movi	r5,10
    2200:	0000e440 	call	e44 <__mulsi3>
    2204:	bc800007 	ldb	r18,0(r23)
    2208:	b089883a 	add	r4,r22,r2
    220c:	bdc00044 	addi	r23,r23,1
    2210:	95bff404 	addi	r22,r18,-48
    2214:	9dbff92e 	bgeu	r19,r22,21fc <___vfprintf_internal_r+0x7e0>
    2218:	2007883a 	mov	r3,r4
    221c:	20044316 	blt	r4,zero,332c <___vfprintf_internal_r+0x1910>
    2220:	b82b883a 	mov	r21,r23
    2224:	003e5a06 	br	1b90 <___vfprintf_internal_r+0x174>
    2228:	ac800007 	ldb	r18,0(r21)
    222c:	01001b04 	movi	r4,108
    2230:	a805883a 	mov	r2,r21
    2234:	91045526 	beq	r18,r4,338c <___vfprintf_internal_r+0x1970>
    2238:	84000414 	ori	r16,r16,16
    223c:	003e5306 	br	1b8c <___vfprintf_internal_r+0x170>
    2240:	8080080c 	andi	r2,r16,32
    2244:	e013883a 	mov	r9,fp
    2248:	10034026 	beq	r2,zero,2f4c <___vfprintf_internal_r+0x1530>
    224c:	d9012d17 	ldw	r4,1204(sp)
    2250:	20800017 	ldw	r2,0(r4)
    2254:	d9012c17 	ldw	r4,1200(sp)
    2258:	2007d7fa 	srai	r3,r4,31
    225c:	d9012d17 	ldw	r4,1204(sp)
    2260:	10c00115 	stw	r3,4(r2)
    2264:	21000104 	addi	r4,r4,4
    2268:	d9012d15 	stw	r4,1204(sp)
    226c:	d9012c17 	ldw	r4,1200(sp)
    2270:	11000015 	stw	r4,0(r2)
    2274:	003e1f06 	br	1af4 <___vfprintf_internal_r+0xd8>
    2278:	d9012d17 	ldw	r4,1204(sp)
    227c:	21000017 	ldw	r4,0(r4)
    2280:	d9012e15 	stw	r4,1208(sp)
    2284:	d9012d17 	ldw	r4,1204(sp)
    2288:	20800104 	addi	r2,r4,4
    228c:	d9012e17 	ldw	r4,1208(sp)
    2290:	203ee716 	blt	r4,zero,1e30 <___vfprintf_internal_r+0x414>
    2294:	d8812d15 	stw	r2,1204(sp)
    2298:	ac800007 	ldb	r18,0(r21)
    229c:	003e3b06 	br	1b8c <___vfprintf_internal_r+0x170>
    22a0:	e013883a 	mov	r9,fp
    22a4:	1839883a 	mov	fp,r3
    22a8:	d8c12d17 	ldw	r3,1204(sp)
    22ac:	00800c04 	movi	r2,48
    22b0:	01000074 	movhi	r4,1
    22b4:	21348b04 	addi	r4,r4,-11732
    22b8:	1dc00017 	ldw	r23,0(r3)
    22bc:	18c00104 	addi	r3,r3,4
    22c0:	d8812505 	stb	r2,1172(sp)
    22c4:	00801e04 	movi	r2,120
    22c8:	d8812545 	stb	r2,1173(sp)
    22cc:	d8c12d15 	stw	r3,1204(sp)
    22d0:	002d883a 	mov	r22,zero
    22d4:	84000094 	ori	r16,r16,2
    22d8:	d9013615 	stw	r4,1240(sp)
    22dc:	00c00084 	movi	r3,2
    22e0:	04801e04 	movi	r18,120
    22e4:	b805883a 	mov	r2,r23
    22e8:	d8012585 	stb	zero,1174(sp)
    22ec:	003f4406 	br	2000 <___vfprintf_internal_r+0x5e4>
    22f0:	84000814 	ori	r16,r16,32
    22f4:	ac800007 	ldb	r18,0(r21)
    22f8:	003e2406 	br	1b8c <___vfprintf_internal_r+0x170>
    22fc:	d8812d17 	ldw	r2,1204(sp)
    2300:	d8012585 	stb	zero,1174(sp)
    2304:	e013883a 	mov	r9,fp
    2308:	14c00017 	ldw	r19,0(r2)
    230c:	1839883a 	mov	fp,r3
    2310:	15c00104 	addi	r23,r2,4
    2314:	98045526 	beq	r19,zero,346c <___vfprintf_internal_r+0x1a50>
    2318:	9809883a 	mov	r4,r19
    231c:	18043116 	blt	r3,zero,33e4 <___vfprintf_internal_r+0x19c8>
    2320:	000b883a 	mov	r5,zero
    2324:	180d883a 	mov	r6,r3
    2328:	da413c15 	stw	r9,1264(sp)
    232c:	00064600 	call	6460 <memchr>
    2330:	da413c17 	ldw	r9,1264(sp)
    2334:	10047a26 	beq	r2,zero,3520 <___vfprintf_internal_r+0x1b04>
    2338:	14c5c83a 	sub	r2,r2,r19
    233c:	d8812b15 	stw	r2,1196(sp)
    2340:	e083d40e 	bge	fp,r2,3294 <___vfprintf_internal_r+0x1878>
    2344:	df012815 	stw	fp,1184(sp)
    2348:	e004e416 	blt	fp,zero,36dc <___vfprintf_internal_r+0x1cc0>
    234c:	d8812583 	ldbu	r2,1174(sp)
    2350:	df012b15 	stw	fp,1196(sp)
    2354:	ddc12d15 	stw	r23,1204(sp)
    2358:	d8013115 	stw	zero,1220(sp)
    235c:	003f3c06 	br	2050 <___vfprintf_internal_r+0x634>
    2360:	00800074 	movhi	r2,1
    2364:	10b48b04 	addi	r2,r2,-11732
    2368:	d8813615 	stw	r2,1240(sp)
    236c:	8080080c 	andi	r2,r16,32
    2370:	e013883a 	mov	r9,fp
    2374:	1839883a 	mov	fp,r3
    2378:	103f891e 	bne	r2,zero,21a0 <___vfprintf_internal_r+0x784>
    237c:	8080040c 	andi	r2,r16,16
    2380:	1002c326 	beq	r2,zero,2e90 <___vfprintf_internal_r+0x1474>
    2384:	d8812d17 	ldw	r2,1204(sp)
    2388:	002d883a 	mov	r22,zero
    238c:	15c00017 	ldw	r23,0(r2)
    2390:	10800104 	addi	r2,r2,4
    2394:	d8812d15 	stw	r2,1204(sp)
    2398:	003f8606 	br	21b4 <___vfprintf_internal_r+0x798>
    239c:	84001014 	ori	r16,r16,64
    23a0:	ac800007 	ldb	r18,0(r21)
    23a4:	003df906 	br	1b8c <___vfprintf_internal_r+0x170>
    23a8:	d8812587 	ldb	r2,1174(sp)
    23ac:	1002e51e 	bne	r2,zero,2f44 <___vfprintf_internal_r+0x1528>
    23b0:	00800804 	movi	r2,32
    23b4:	d8812585 	stb	r2,1174(sp)
    23b8:	ac800007 	ldb	r18,0(r21)
    23bc:	003df306 	br	1b8c <___vfprintf_internal_r+0x170>
    23c0:	84000054 	ori	r16,r16,1
    23c4:	ac800007 	ldb	r18,0(r21)
    23c8:	003df006 	br	1b8c <___vfprintf_internal_r+0x170>
    23cc:	84002014 	ori	r16,r16,128
    23d0:	ac800007 	ldb	r18,0(r21)
    23d4:	003ded06 	br	1b8c <___vfprintf_internal_r+0x170>
    23d8:	0009883a 	mov	r4,zero
    23dc:	95bff404 	addi	r22,r18,-48
    23e0:	182f883a 	mov	r23,r3
    23e4:	01400284 	movi	r5,10
    23e8:	0000e440 	call	e44 <__mulsi3>
    23ec:	ac800007 	ldb	r18,0(r21)
    23f0:	1589883a 	add	r4,r2,r22
    23f4:	ad400044 	addi	r21,r21,1
    23f8:	95bff404 	addi	r22,r18,-48
    23fc:	9dbff92e 	bgeu	r19,r22,23e4 <___vfprintf_internal_r+0x9c8>
    2400:	b807883a 	mov	r3,r23
    2404:	d9012e15 	stw	r4,1208(sp)
    2408:	003de106 	br	1b90 <___vfprintf_internal_r+0x174>
    240c:	00800ac4 	movi	r2,43
    2410:	d8812585 	stb	r2,1174(sp)
    2414:	ac800007 	ldb	r18,0(r21)
    2418:	003ddc06 	br	1b8c <___vfprintf_internal_r+0x170>
    241c:	d8c12d17 	ldw	r3,1204(sp)
    2420:	d9012d17 	ldw	r4,1204(sp)
    2424:	e013883a 	mov	r9,fp
    2428:	18800017 	ldw	r2,0(r3)
    242c:	21000104 	addi	r4,r4,4
    2430:	00c00044 	movi	r3,1
    2434:	d8c12815 	stw	r3,1184(sp)
    2438:	d8012585 	stb	zero,1174(sp)
    243c:	d8810405 	stb	r2,1040(sp)
    2440:	d9012d15 	stw	r4,1204(sp)
    2444:	d8c12b15 	stw	r3,1196(sp)
    2448:	dcc10404 	addi	r19,sp,1040
    244c:	003dda06 	br	1bb8 <___vfprintf_internal_r+0x19c>
    2450:	e013883a 	mov	r9,fp
    2454:	1839883a 	mov	fp,r3
    2458:	003ed806 	br	1fbc <___vfprintf_internal_r+0x5a0>
    245c:	e013883a 	mov	r9,fp
    2460:	1839883a 	mov	fp,r3
    2464:	003f2d06 	br	211c <___vfprintf_internal_r+0x700>
    2468:	e013883a 	mov	r9,fp
    246c:	1839883a 	mov	fp,r3
    2470:	003f3806 	br	2154 <___vfprintf_internal_r+0x738>
    2474:	da011d17 	ldw	r8,1140(sp)
    2478:	d8c11c17 	ldw	r3,1136(sp)
    247c:	d8812587 	ldb	r2,1174(sp)
    2480:	10000b26 	beq	r2,zero,24b0 <___vfprintf_internal_r+0xa94>
    2484:	d8812584 	addi	r2,sp,1174
    2488:	48800015 	stw	r2,0(r9)
    248c:	00800044 	movi	r2,1
    2490:	48800115 	stw	r2,4(r9)
    2494:	4091883a 	add	r8,r8,r2
    2498:	1887883a 	add	r3,r3,r2
    249c:	da011d15 	stw	r8,1140(sp)
    24a0:	d8c11c15 	stw	r3,1136(sp)
    24a4:	008001c4 	movi	r2,7
    24a8:	10c18e16 	blt	r2,r3,2ae4 <___vfprintf_internal_r+0x10c8>
    24ac:	4a400204 	addi	r9,r9,8
    24b0:	d9012a17 	ldw	r4,1192(sp)
    24b4:	20000b26 	beq	r4,zero,24e4 <___vfprintf_internal_r+0xac8>
    24b8:	d8812504 	addi	r2,sp,1172
    24bc:	48800015 	stw	r2,0(r9)
    24c0:	00800084 	movi	r2,2
    24c4:	48800115 	stw	r2,4(r9)
    24c8:	4091883a 	add	r8,r8,r2
    24cc:	18c00044 	addi	r3,r3,1
    24d0:	da011d15 	stw	r8,1140(sp)
    24d4:	d8c11c15 	stw	r3,1136(sp)
    24d8:	008001c4 	movi	r2,7
    24dc:	10c17816 	blt	r2,r3,2ac0 <___vfprintf_internal_r+0x10a4>
    24e0:	4a400204 	addi	r9,r9,8
    24e4:	d9012f17 	ldw	r4,1212(sp)
    24e8:	00802004 	movi	r2,128
    24ec:	2080fc26 	beq	r4,r2,28e0 <___vfprintf_internal_r+0xec4>
    24f0:	d8813117 	ldw	r2,1220(sp)
    24f4:	d9012b17 	ldw	r4,1196(sp)
    24f8:	112fc83a 	sub	r23,r2,r4
    24fc:	05c02a0e 	bge	zero,r23,25a8 <___vfprintf_internal_r+0xb8c>
    2500:	07000404 	movi	fp,16
    2504:	05000074 	movhi	r20,1
    2508:	a5349684 	addi	r20,r20,-11686
    250c:	e5c01d0e 	bge	fp,r23,2584 <___vfprintf_internal_r+0xb68>
    2510:	dc812a15 	stw	r18,1192(sp)
    2514:	058001c4 	movi	r22,7
    2518:	a025883a 	mov	r18,r20
    251c:	8029883a 	mov	r20,r16
    2520:	dc012917 	ldw	r16,1188(sp)
    2524:	00000306 	br	2534 <___vfprintf_internal_r+0xb18>
    2528:	bdfffc04 	addi	r23,r23,-16
    252c:	4a400204 	addi	r9,r9,8
    2530:	e5c0110e 	bge	fp,r23,2578 <___vfprintf_internal_r+0xb5c>
    2534:	4c800015 	stw	r18,0(r9)
    2538:	4f000115 	stw	fp,4(r9)
    253c:	42000404 	addi	r8,r8,16
    2540:	18c00044 	addi	r3,r3,1
    2544:	da011d15 	stw	r8,1140(sp)
    2548:	d8c11c15 	stw	r3,1136(sp)
    254c:	b0fff60e 	bge	r22,r3,2528 <___vfprintf_internal_r+0xb0c>
    2550:	8809883a 	mov	r4,r17
    2554:	800b883a 	mov	r5,r16
    2558:	d9811b04 	addi	r6,sp,1132
    255c:	00019e80 	call	19e8 <__sprint_r>
    2560:	103e741e 	bne	r2,zero,1f34 <___vfprintf_internal_r+0x518>
    2564:	bdfffc04 	addi	r23,r23,-16
    2568:	da011d17 	ldw	r8,1140(sp)
    256c:	d8c11c17 	ldw	r3,1136(sp)
    2570:	da400404 	addi	r9,sp,16
    2574:	e5ffef16 	blt	fp,r23,2534 <___vfprintf_internal_r+0xb18>
    2578:	a021883a 	mov	r16,r20
    257c:	9029883a 	mov	r20,r18
    2580:	dc812a17 	ldw	r18,1192(sp)
    2584:	4d000015 	stw	r20,0(r9)
    2588:	4dc00115 	stw	r23,4(r9)
    258c:	45d1883a 	add	r8,r8,r23
    2590:	18c00044 	addi	r3,r3,1
    2594:	da011d15 	stw	r8,1140(sp)
    2598:	d8c11c15 	stw	r3,1136(sp)
    259c:	008001c4 	movi	r2,7
    25a0:	10c13e16 	blt	r2,r3,2a9c <___vfprintf_internal_r+0x1080>
    25a4:	4a400204 	addi	r9,r9,8
    25a8:	8080400c 	andi	r2,r16,256
    25ac:	1000831e 	bne	r2,zero,27bc <___vfprintf_internal_r+0xda0>
    25b0:	d8812b17 	ldw	r2,1196(sp)
    25b4:	4cc00015 	stw	r19,0(r9)
    25b8:	48800115 	stw	r2,4(r9)
    25bc:	4091883a 	add	r8,r8,r2
    25c0:	18c00044 	addi	r3,r3,1
    25c4:	da011d15 	stw	r8,1140(sp)
    25c8:	d8c11c15 	stw	r3,1136(sp)
    25cc:	008001c4 	movi	r2,7
    25d0:	10c05316 	blt	r2,r3,2720 <___vfprintf_internal_r+0xd04>
    25d4:	4a400204 	addi	r9,r9,8
    25d8:	8400010c 	andi	r16,r16,4
    25dc:	80002e26 	beq	r16,zero,2698 <___vfprintf_internal_r+0xc7c>
    25e0:	d8812e17 	ldw	r2,1208(sp)
    25e4:	d8c12817 	ldw	r3,1184(sp)
    25e8:	10e1c83a 	sub	r16,r2,r3
    25ec:	04002a0e 	bge	zero,r16,2698 <___vfprintf_internal_r+0xc7c>
    25f0:	04800404 	movi	r18,16
    25f4:	d8c11c17 	ldw	r3,1136(sp)
    25f8:	05c00074 	movhi	r23,1
    25fc:	bdf49284 	addi	r23,r23,-11702
    2600:	9400170e 	bge	r18,r16,2660 <___vfprintf_internal_r+0xc44>
    2604:	04c001c4 	movi	r19,7
    2608:	dd012917 	ldw	r20,1188(sp)
    260c:	00000306 	br	261c <___vfprintf_internal_r+0xc00>
    2610:	843ffc04 	addi	r16,r16,-16
    2614:	4a400204 	addi	r9,r9,8
    2618:	9400110e 	bge	r18,r16,2660 <___vfprintf_internal_r+0xc44>
    261c:	4dc00015 	stw	r23,0(r9)
    2620:	4c800115 	stw	r18,4(r9)
    2624:	42000404 	addi	r8,r8,16
    2628:	18c00044 	addi	r3,r3,1
    262c:	da011d15 	stw	r8,1140(sp)
    2630:	d8c11c15 	stw	r3,1136(sp)
    2634:	98fff60e 	bge	r19,r3,2610 <___vfprintf_internal_r+0xbf4>
    2638:	8809883a 	mov	r4,r17
    263c:	a00b883a 	mov	r5,r20
    2640:	d9811b04 	addi	r6,sp,1132
    2644:	00019e80 	call	19e8 <__sprint_r>
    2648:	103e3a1e 	bne	r2,zero,1f34 <___vfprintf_internal_r+0x518>
    264c:	843ffc04 	addi	r16,r16,-16
    2650:	da011d17 	ldw	r8,1140(sp)
    2654:	d8c11c17 	ldw	r3,1136(sp)
    2658:	da400404 	addi	r9,sp,16
    265c:	943fef16 	blt	r18,r16,261c <___vfprintf_internal_r+0xc00>
    2660:	4dc00015 	stw	r23,0(r9)
    2664:	4c000115 	stw	r16,4(r9)
    2668:	8211883a 	add	r8,r16,r8
    266c:	18c00044 	addi	r3,r3,1
    2670:	da011d15 	stw	r8,1140(sp)
    2674:	d8c11c15 	stw	r3,1136(sp)
    2678:	008001c4 	movi	r2,7
    267c:	10c0060e 	bge	r2,r3,2698 <___vfprintf_internal_r+0xc7c>
    2680:	d9412917 	ldw	r5,1188(sp)
    2684:	8809883a 	mov	r4,r17
    2688:	d9811b04 	addi	r6,sp,1132
    268c:	00019e80 	call	19e8 <__sprint_r>
    2690:	103e281e 	bne	r2,zero,1f34 <___vfprintf_internal_r+0x518>
    2694:	da011d17 	ldw	r8,1140(sp)
    2698:	dd012817 	ldw	r20,1184(sp)
    269c:	d9012e17 	ldw	r4,1208(sp)
    26a0:	a100010e 	bge	r20,r4,26a8 <___vfprintf_internal_r+0xc8c>
    26a4:	2029883a 	mov	r20,r4
    26a8:	d8812c17 	ldw	r2,1200(sp)
    26ac:	1505883a 	add	r2,r2,r20
    26b0:	d8812c15 	stw	r2,1200(sp)
    26b4:	4000b91e 	bne	r8,zero,299c <___vfprintf_internal_r+0xf80>
    26b8:	d8011c15 	stw	zero,1136(sp)
    26bc:	a8800007 	ldb	r2,0(r21)
    26c0:	da400404 	addi	r9,sp,16
    26c4:	103d0d1e 	bne	r2,zero,1afc <___vfprintf_internal_r+0xe0>
    26c8:	a825883a 	mov	r18,r21
    26cc:	003d2306 	br	1b5c <___vfprintf_internal_r+0x140>
    26d0:	d9412917 	ldw	r5,1188(sp)
    26d4:	8809883a 	mov	r4,r17
    26d8:	d9811b04 	addi	r6,sp,1132
    26dc:	00019e80 	call	19e8 <__sprint_r>
    26e0:	103e141e 	bne	r2,zero,1f34 <___vfprintf_internal_r+0x518>
    26e4:	da011d17 	ldw	r8,1140(sp)
    26e8:	da400404 	addi	r9,sp,16
    26ec:	8080004c 	andi	r2,r16,1
    26f0:	103fb926 	beq	r2,zero,25d8 <___vfprintf_internal_r+0xbbc>
    26f4:	d8c11c17 	ldw	r3,1136(sp)
    26f8:	d9013717 	ldw	r4,1244(sp)
    26fc:	00800044 	movi	r2,1
    2700:	48800115 	stw	r2,4(r9)
    2704:	49000015 	stw	r4,0(r9)
    2708:	4091883a 	add	r8,r8,r2
    270c:	1887883a 	add	r3,r3,r2
    2710:	da011d15 	stw	r8,1140(sp)
    2714:	d8c11c15 	stw	r3,1136(sp)
    2718:	008001c4 	movi	r2,7
    271c:	10ffad0e 	bge	r2,r3,25d4 <___vfprintf_internal_r+0xbb8>
    2720:	d9412917 	ldw	r5,1188(sp)
    2724:	8809883a 	mov	r4,r17
    2728:	d9811b04 	addi	r6,sp,1132
    272c:	00019e80 	call	19e8 <__sprint_r>
    2730:	103e001e 	bne	r2,zero,1f34 <___vfprintf_internal_r+0x518>
    2734:	da400404 	addi	r9,sp,16
    2738:	da011d17 	ldw	r8,1140(sp)
    273c:	003fa606 	br	25d8 <___vfprintf_internal_r+0xbbc>
    2740:	18803fcc 	andi	r2,r3,255
    2744:	00c00044 	movi	r3,1
    2748:	10c10126 	beq	r2,r3,2b50 <___vfprintf_internal_r+0x1134>
    274c:	00c00084 	movi	r3,2
    2750:	10c0ed26 	beq	r2,r3,2b08 <___vfprintf_internal_r+0x10ec>
    2754:	d8c10dc4 	addi	r3,sp,1079
    2758:	b808d0fa 	srli	r4,r23,3
    275c:	b00a977a 	slli	r5,r22,29
    2760:	b02cd0fa 	srli	r22,r22,3
    2764:	bdc001cc 	andi	r23,r23,7
    2768:	b8800c04 	addi	r2,r23,48
    276c:	292eb03a 	or	r23,r5,r4
    2770:	18800005 	stb	r2,0(r3)
    2774:	bd88b03a 	or	r4,r23,r22
    2778:	1827883a 	mov	r19,r3
    277c:	18ffffc4 	addi	r3,r3,-1
    2780:	203ff51e 	bne	r4,zero,2758 <___vfprintf_internal_r+0xd3c>
    2784:	8100004c 	andi	r4,r16,1
    2788:	980b883a 	mov	r5,r19
    278c:	20000726 	beq	r4,zero,27ac <___vfprintf_internal_r+0xd90>
    2790:	10803fcc 	andi	r2,r2,255
    2794:	1080201c 	xori	r2,r2,128
    2798:	10bfe004 	addi	r2,r2,-128
    279c:	01000c04 	movi	r4,48
    27a0:	11000226 	beq	r2,r4,27ac <___vfprintf_internal_r+0xd90>
    27a4:	1827883a 	mov	r19,r3
    27a8:	293fffc5 	stb	r4,-1(r5)
    27ac:	d8812717 	ldw	r2,1180(sp)
    27b0:	14c5c83a 	sub	r2,r2,r19
    27b4:	d8812b15 	stw	r2,1196(sp)
    27b8:	003e1f06 	br	2038 <___vfprintf_internal_r+0x61c>
    27bc:	00801944 	movi	r2,101
    27c0:	14807c0e 	bge	r2,r18,29b4 <___vfprintf_internal_r+0xf98>
    27c4:	d9013317 	ldw	r4,1228(sp)
    27c8:	d9413417 	ldw	r5,1232(sp)
    27cc:	000d883a 	mov	r6,zero
    27d0:	000f883a 	mov	r7,zero
    27d4:	d8c13b15 	stw	r3,1260(sp)
    27d8:	da013a15 	stw	r8,1256(sp)
    27dc:	da413c15 	stw	r9,1264(sp)
    27e0:	00098e00 	call	98e0 <__eqdf2>
    27e4:	d8c13b17 	ldw	r3,1260(sp)
    27e8:	da013a17 	ldw	r8,1256(sp)
    27ec:	da413c17 	ldw	r9,1264(sp)
    27f0:	1001001e 	bne	r2,zero,2bf4 <___vfprintf_internal_r+0x11d8>
    27f4:	00800074 	movhi	r2,1
    27f8:	10b49204 	addi	r2,r2,-11704
    27fc:	48800015 	stw	r2,0(r9)
    2800:	00800044 	movi	r2,1
    2804:	48800115 	stw	r2,4(r9)
    2808:	4091883a 	add	r8,r8,r2
    280c:	1887883a 	add	r3,r3,r2
    2810:	da011d15 	stw	r8,1140(sp)
    2814:	d8c11c15 	stw	r3,1136(sp)
    2818:	008001c4 	movi	r2,7
    281c:	10c20316 	blt	r2,r3,302c <___vfprintf_internal_r+0x1610>
    2820:	4a400204 	addi	r9,r9,8
    2824:	d8812417 	ldw	r2,1168(sp)
    2828:	d8c13217 	ldw	r3,1224(sp)
    282c:	10c00216 	blt	r2,r3,2838 <___vfprintf_internal_r+0xe1c>
    2830:	8080004c 	andi	r2,r16,1
    2834:	103f6826 	beq	r2,zero,25d8 <___vfprintf_internal_r+0xbbc>
    2838:	d8c11c17 	ldw	r3,1136(sp)
    283c:	d9013717 	ldw	r4,1244(sp)
    2840:	00800044 	movi	r2,1
    2844:	48800115 	stw	r2,4(r9)
    2848:	49000015 	stw	r4,0(r9)
    284c:	4091883a 	add	r8,r8,r2
    2850:	1887883a 	add	r3,r3,r2
    2854:	da011d15 	stw	r8,1140(sp)
    2858:	d8c11c15 	stw	r3,1136(sp)
    285c:	008001c4 	movi	r2,7
    2860:	10c2ce16 	blt	r2,r3,339c <___vfprintf_internal_r+0x1980>
    2864:	4a400204 	addi	r9,r9,8
    2868:	d8813217 	ldw	r2,1224(sp)
    286c:	14bfffc4 	addi	r18,r2,-1
    2870:	04bf590e 	bge	zero,r18,25d8 <___vfprintf_internal_r+0xbbc>
    2874:	04c00404 	movi	r19,16
    2878:	d8c11c17 	ldw	r3,1136(sp)
    287c:	05000074 	movhi	r20,1
    2880:	a5349684 	addi	r20,r20,-11686
    2884:	9c818a0e 	bge	r19,r18,2eb0 <___vfprintf_internal_r+0x1494>
    2888:	058001c4 	movi	r22,7
    288c:	ddc12917 	ldw	r23,1188(sp)
    2890:	00000306 	br	28a0 <___vfprintf_internal_r+0xe84>
    2894:	4a400204 	addi	r9,r9,8
    2898:	94bffc04 	addi	r18,r18,-16
    289c:	9c81840e 	bge	r19,r18,2eb0 <___vfprintf_internal_r+0x1494>
    28a0:	4d000015 	stw	r20,0(r9)
    28a4:	4cc00115 	stw	r19,4(r9)
    28a8:	42000404 	addi	r8,r8,16
    28ac:	18c00044 	addi	r3,r3,1
    28b0:	da011d15 	stw	r8,1140(sp)
    28b4:	d8c11c15 	stw	r3,1136(sp)
    28b8:	b0fff60e 	bge	r22,r3,2894 <___vfprintf_internal_r+0xe78>
    28bc:	8809883a 	mov	r4,r17
    28c0:	b80b883a 	mov	r5,r23
    28c4:	d9811b04 	addi	r6,sp,1132
    28c8:	00019e80 	call	19e8 <__sprint_r>
    28cc:	103d991e 	bne	r2,zero,1f34 <___vfprintf_internal_r+0x518>
    28d0:	da011d17 	ldw	r8,1140(sp)
    28d4:	d8c11c17 	ldw	r3,1136(sp)
    28d8:	da400404 	addi	r9,sp,16
    28dc:	003fee06 	br	2898 <___vfprintf_internal_r+0xe7c>
    28e0:	d8812e17 	ldw	r2,1208(sp)
    28e4:	d9012817 	ldw	r4,1184(sp)
    28e8:	112fc83a 	sub	r23,r2,r4
    28ec:	05ff000e 	bge	zero,r23,24f0 <___vfprintf_internal_r+0xad4>
    28f0:	07000404 	movi	fp,16
    28f4:	05000074 	movhi	r20,1
    28f8:	a5349684 	addi	r20,r20,-11686
    28fc:	e5c01d0e 	bge	fp,r23,2974 <___vfprintf_internal_r+0xf58>
    2900:	dc812a15 	stw	r18,1192(sp)
    2904:	058001c4 	movi	r22,7
    2908:	a025883a 	mov	r18,r20
    290c:	8029883a 	mov	r20,r16
    2910:	dc012917 	ldw	r16,1188(sp)
    2914:	00000306 	br	2924 <___vfprintf_internal_r+0xf08>
    2918:	bdfffc04 	addi	r23,r23,-16
    291c:	4a400204 	addi	r9,r9,8
    2920:	e5c0110e 	bge	fp,r23,2968 <___vfprintf_internal_r+0xf4c>
    2924:	4c800015 	stw	r18,0(r9)
    2928:	4f000115 	stw	fp,4(r9)
    292c:	42000404 	addi	r8,r8,16
    2930:	18c00044 	addi	r3,r3,1
    2934:	da011d15 	stw	r8,1140(sp)
    2938:	d8c11c15 	stw	r3,1136(sp)
    293c:	b0fff60e 	bge	r22,r3,2918 <___vfprintf_internal_r+0xefc>
    2940:	8809883a 	mov	r4,r17
    2944:	800b883a 	mov	r5,r16
    2948:	d9811b04 	addi	r6,sp,1132
    294c:	00019e80 	call	19e8 <__sprint_r>
    2950:	103d781e 	bne	r2,zero,1f34 <___vfprintf_internal_r+0x518>
    2954:	bdfffc04 	addi	r23,r23,-16
    2958:	da011d17 	ldw	r8,1140(sp)
    295c:	d8c11c17 	ldw	r3,1136(sp)
    2960:	da400404 	addi	r9,sp,16
    2964:	e5ffef16 	blt	fp,r23,2924 <___vfprintf_internal_r+0xf08>
    2968:	a021883a 	mov	r16,r20
    296c:	9029883a 	mov	r20,r18
    2970:	dc812a17 	ldw	r18,1192(sp)
    2974:	4d000015 	stw	r20,0(r9)
    2978:	4dc00115 	stw	r23,4(r9)
    297c:	45d1883a 	add	r8,r8,r23
    2980:	18c00044 	addi	r3,r3,1
    2984:	da011d15 	stw	r8,1140(sp)
    2988:	d8c11c15 	stw	r3,1136(sp)
    298c:	008001c4 	movi	r2,7
    2990:	10c13616 	blt	r2,r3,2e6c <___vfprintf_internal_r+0x1450>
    2994:	4a400204 	addi	r9,r9,8
    2998:	003ed506 	br	24f0 <___vfprintf_internal_r+0xad4>
    299c:	d9412917 	ldw	r5,1188(sp)
    29a0:	8809883a 	mov	r4,r17
    29a4:	d9811b04 	addi	r6,sp,1132
    29a8:	00019e80 	call	19e8 <__sprint_r>
    29ac:	103f4226 	beq	r2,zero,26b8 <___vfprintf_internal_r+0xc9c>
    29b0:	003d6006 	br	1f34 <___vfprintf_internal_r+0x518>
    29b4:	d9013217 	ldw	r4,1224(sp)
    29b8:	00800044 	movi	r2,1
    29bc:	4cc00015 	stw	r19,0(r9)
    29c0:	1101000e 	bge	r2,r4,2dc4 <___vfprintf_internal_r+0x13a8>
    29c4:	00800044 	movi	r2,1
    29c8:	48800115 	stw	r2,4(r9)
    29cc:	4091883a 	add	r8,r8,r2
    29d0:	1887883a 	add	r3,r3,r2
    29d4:	da011d15 	stw	r8,1140(sp)
    29d8:	d8c11c15 	stw	r3,1136(sp)
    29dc:	008001c4 	movi	r2,7
    29e0:	10c10c16 	blt	r2,r3,2e14 <___vfprintf_internal_r+0x13f8>
    29e4:	4a400204 	addi	r9,r9,8
    29e8:	d8813717 	ldw	r2,1244(sp)
    29ec:	48800015 	stw	r2,0(r9)
    29f0:	00800044 	movi	r2,1
    29f4:	48800115 	stw	r2,4(r9)
    29f8:	4091883a 	add	r8,r8,r2
    29fc:	1887883a 	add	r3,r3,r2
    2a00:	da011d15 	stw	r8,1140(sp)
    2a04:	d8c11c15 	stw	r3,1136(sp)
    2a08:	008001c4 	movi	r2,7
    2a0c:	10c10a16 	blt	r2,r3,2e38 <___vfprintf_internal_r+0x141c>
    2a10:	4c800204 	addi	r18,r9,8
    2a14:	d9013317 	ldw	r4,1228(sp)
    2a18:	d9413417 	ldw	r5,1232(sp)
    2a1c:	000d883a 	mov	r6,zero
    2a20:	000f883a 	mov	r7,zero
    2a24:	d8c13b15 	stw	r3,1260(sp)
    2a28:	da013a15 	stw	r8,1256(sp)
    2a2c:	000993c0 	call	993c <__nedf2>
    2a30:	d8c13b17 	ldw	r3,1260(sp)
    2a34:	da013a17 	ldw	r8,1256(sp)
    2a38:	1000ba26 	beq	r2,zero,2d24 <___vfprintf_internal_r+0x1308>
    2a3c:	d9013217 	ldw	r4,1224(sp)
    2a40:	9cc00044 	addi	r19,r19,1
    2a44:	94c00015 	stw	r19,0(r18)
    2a48:	20bfffc4 	addi	r2,r4,-1
    2a4c:	90800115 	stw	r2,4(r18)
    2a50:	4091883a 	add	r8,r8,r2
    2a54:	18c00044 	addi	r3,r3,1
    2a58:	da011d15 	stw	r8,1140(sp)
    2a5c:	d8c11c15 	stw	r3,1136(sp)
    2a60:	008001c4 	movi	r2,7
    2a64:	10c0e216 	blt	r2,r3,2df0 <___vfprintf_internal_r+0x13d4>
    2a68:	94800204 	addi	r18,r18,8
    2a6c:	d9013517 	ldw	r4,1236(sp)
    2a70:	d8811fc4 	addi	r2,sp,1151
    2a74:	90800015 	stw	r2,0(r18)
    2a78:	91000115 	stw	r4,4(r18)
    2a7c:	4111883a 	add	r8,r8,r4
    2a80:	18c00044 	addi	r3,r3,1
    2a84:	da011d15 	stw	r8,1140(sp)
    2a88:	d8c11c15 	stw	r3,1136(sp)
    2a8c:	008001c4 	movi	r2,7
    2a90:	10ff2316 	blt	r2,r3,2720 <___vfprintf_internal_r+0xd04>
    2a94:	92400204 	addi	r9,r18,8
    2a98:	003ecf06 	br	25d8 <___vfprintf_internal_r+0xbbc>
    2a9c:	d9412917 	ldw	r5,1188(sp)
    2aa0:	8809883a 	mov	r4,r17
    2aa4:	d9811b04 	addi	r6,sp,1132
    2aa8:	00019e80 	call	19e8 <__sprint_r>
    2aac:	103d211e 	bne	r2,zero,1f34 <___vfprintf_internal_r+0x518>
    2ab0:	da011d17 	ldw	r8,1140(sp)
    2ab4:	d8c11c17 	ldw	r3,1136(sp)
    2ab8:	da400404 	addi	r9,sp,16
    2abc:	003eba06 	br	25a8 <___vfprintf_internal_r+0xb8c>
    2ac0:	d9412917 	ldw	r5,1188(sp)
    2ac4:	8809883a 	mov	r4,r17
    2ac8:	d9811b04 	addi	r6,sp,1132
    2acc:	00019e80 	call	19e8 <__sprint_r>
    2ad0:	103d181e 	bne	r2,zero,1f34 <___vfprintf_internal_r+0x518>
    2ad4:	da011d17 	ldw	r8,1140(sp)
    2ad8:	d8c11c17 	ldw	r3,1136(sp)
    2adc:	da400404 	addi	r9,sp,16
    2ae0:	003e8006 	br	24e4 <___vfprintf_internal_r+0xac8>
    2ae4:	d9412917 	ldw	r5,1188(sp)
    2ae8:	8809883a 	mov	r4,r17
    2aec:	d9811b04 	addi	r6,sp,1132
    2af0:	00019e80 	call	19e8 <__sprint_r>
    2af4:	103d0f1e 	bne	r2,zero,1f34 <___vfprintf_internal_r+0x518>
    2af8:	da011d17 	ldw	r8,1140(sp)
    2afc:	d8c11c17 	ldw	r3,1136(sp)
    2b00:	da400404 	addi	r9,sp,16
    2b04:	003e6a06 	br	24b0 <___vfprintf_internal_r+0xa94>
    2b08:	d9413617 	ldw	r5,1240(sp)
    2b0c:	d8810dc4 	addi	r2,sp,1079
    2b10:	b8c003cc 	andi	r3,r23,15
    2b14:	b008973a 	slli	r4,r22,28
    2b18:	28c7883a 	add	r3,r5,r3
    2b1c:	b82ed13a 	srli	r23,r23,4
    2b20:	18c00003 	ldbu	r3,0(r3)
    2b24:	b02cd13a 	srli	r22,r22,4
    2b28:	25eeb03a 	or	r23,r4,r23
    2b2c:	10c00005 	stb	r3,0(r2)
    2b30:	bd86b03a 	or	r3,r23,r22
    2b34:	1027883a 	mov	r19,r2
    2b38:	10bfffc4 	addi	r2,r2,-1
    2b3c:	183ff41e 	bne	r3,zero,2b10 <___vfprintf_internal_r+0x10f4>
    2b40:	003f1a06 	br	27ac <___vfprintf_internal_r+0xd90>
    2b44:	d8012b15 	stw	zero,1196(sp)
    2b48:	dcc10e04 	addi	r19,sp,1080
    2b4c:	003d3a06 	br	2038 <___vfprintf_internal_r+0x61c>
    2b50:	b0025426 	beq	r22,zero,34a4 <___vfprintf_internal_r+0x1a88>
    2b54:	b807883a 	mov	r3,r23
    2b58:	d8810dc4 	addi	r2,sp,1079
    2b5c:	882f883a 	mov	r23,r17
    2b60:	04c00244 	movi	r19,9
    2b64:	8023883a 	mov	r17,r16
    2b68:	da412815 	stw	r9,1184(sp)
    2b6c:	1821883a 	mov	r16,r3
    2b70:	8009883a 	mov	r4,r16
    2b74:	b00b883a 	mov	r5,r22
    2b78:	01800284 	movi	r6,10
    2b7c:	000f883a 	mov	r7,zero
    2b80:	1029883a 	mov	r20,r2
    2b84:	0008a180 	call	8a18 <__umoddi3>
    2b88:	10800c04 	addi	r2,r2,48
    2b8c:	8009883a 	mov	r4,r16
    2b90:	b00b883a 	mov	r5,r22
    2b94:	a0800005 	stb	r2,0(r20)
    2b98:	01800284 	movi	r6,10
    2b9c:	000f883a 	mov	r7,zero
    2ba0:	00083c80 	call	83c8 <__udivdi3>
    2ba4:	1021883a 	mov	r16,r2
    2ba8:	182d883a 	mov	r22,r3
    2bac:	a0bfffc4 	addi	r2,r20,-1
    2bb0:	183fef1e 	bne	r3,zero,2b70 <___vfprintf_internal_r+0x1154>
    2bb4:	9c3fee36 	bltu	r19,r16,2b70 <___vfprintf_internal_r+0x1154>
    2bb8:	da412817 	ldw	r9,1184(sp)
    2bbc:	8005883a 	mov	r2,r16
    2bc0:	8821883a 	mov	r16,r17
    2bc4:	b823883a 	mov	r17,r23
    2bc8:	102f883a 	mov	r23,r2
    2bcc:	d8812717 	ldw	r2,1180(sp)
    2bd0:	a4ffffc4 	addi	r19,r20,-1
    2bd4:	bdc00c04 	addi	r23,r23,48
    2bd8:	14c5c83a 	sub	r2,r2,r19
    2bdc:	a5ffffc5 	stb	r23,-1(r20)
    2be0:	d8812b15 	stw	r2,1196(sp)
    2be4:	003d1406 	br	2038 <___vfprintf_internal_r+0x61c>
    2be8:	00c00044 	movi	r3,1
    2bec:	bd84b03a 	or	r2,r23,r22
    2bf0:	003d0306 	br	2000 <___vfprintf_internal_r+0x5e4>
    2bf4:	dc812417 	ldw	r18,1168(sp)
    2bf8:	0481140e 	bge	zero,r18,304c <___vfprintf_internal_r+0x1630>
    2bfc:	d9013217 	ldw	r4,1224(sp)
    2c00:	4cc00015 	stw	r19,0(r9)
    2c04:	9100ec16 	blt	r18,r4,2fb8 <___vfprintf_internal_r+0x159c>
    2c08:	49000115 	stw	r4,4(r9)
    2c0c:	4111883a 	add	r8,r8,r4
    2c10:	18c00044 	addi	r3,r3,1
    2c14:	da011d15 	stw	r8,1140(sp)
    2c18:	d8c11c15 	stw	r3,1136(sp)
    2c1c:	008001c4 	movi	r2,7
    2c20:	10c23616 	blt	r2,r3,34fc <___vfprintf_internal_r+0x1ae0>
    2c24:	4a400204 	addi	r9,r9,8
    2c28:	d8813217 	ldw	r2,1224(sp)
    2c2c:	90a5c83a 	sub	r18,r18,r2
    2c30:	04beae0e 	bge	zero,r18,26ec <___vfprintf_internal_r+0xcd0>
    2c34:	04c00404 	movi	r19,16
    2c38:	d8c11c17 	ldw	r3,1136(sp)
    2c3c:	05000074 	movhi	r20,1
    2c40:	a5349684 	addi	r20,r20,-11686
    2c44:	9c81dd0e 	bge	r19,r18,33bc <___vfprintf_internal_r+0x19a0>
    2c48:	058001c4 	movi	r22,7
    2c4c:	ddc12917 	ldw	r23,1188(sp)
    2c50:	00000306 	br	2c60 <___vfprintf_internal_r+0x1244>
    2c54:	4a400204 	addi	r9,r9,8
    2c58:	94bffc04 	addi	r18,r18,-16
    2c5c:	9c81d70e 	bge	r19,r18,33bc <___vfprintf_internal_r+0x19a0>
    2c60:	4d000015 	stw	r20,0(r9)
    2c64:	4cc00115 	stw	r19,4(r9)
    2c68:	42000404 	addi	r8,r8,16
    2c6c:	18c00044 	addi	r3,r3,1
    2c70:	da011d15 	stw	r8,1140(sp)
    2c74:	d8c11c15 	stw	r3,1136(sp)
    2c78:	b0fff60e 	bge	r22,r3,2c54 <___vfprintf_internal_r+0x1238>
    2c7c:	8809883a 	mov	r4,r17
    2c80:	b80b883a 	mov	r5,r23
    2c84:	d9811b04 	addi	r6,sp,1132
    2c88:	00019e80 	call	19e8 <__sprint_r>
    2c8c:	103ca91e 	bne	r2,zero,1f34 <___vfprintf_internal_r+0x518>
    2c90:	da011d17 	ldw	r8,1140(sp)
    2c94:	d8c11c17 	ldw	r3,1136(sp)
    2c98:	da400404 	addi	r9,sp,16
    2c9c:	003fee06 	br	2c58 <___vfprintf_internal_r+0x123c>
    2ca0:	d9412917 	ldw	r5,1188(sp)
    2ca4:	8809883a 	mov	r4,r17
    2ca8:	d9811b04 	addi	r6,sp,1132
    2cac:	00019e80 	call	19e8 <__sprint_r>
    2cb0:	103ca01e 	bne	r2,zero,1f34 <___vfprintf_internal_r+0x518>
    2cb4:	da011d17 	ldw	r8,1140(sp)
    2cb8:	d8c11c17 	ldw	r3,1136(sp)
    2cbc:	da400404 	addi	r9,sp,16
    2cc0:	003dee06 	br	247c <___vfprintf_internal_r+0xa60>
    2cc4:	00c00084 	movi	r3,2
    2cc8:	bd84b03a 	or	r2,r23,r22
    2ccc:	d8012585 	stb	zero,1174(sp)
    2cd0:	003ccb06 	br	2000 <___vfprintf_internal_r+0x5e4>
    2cd4:	8080040c 	andi	r2,r16,16
    2cd8:	1000ae26 	beq	r2,zero,2f94 <___vfprintf_internal_r+0x1578>
    2cdc:	d9012d17 	ldw	r4,1204(sp)
    2ce0:	25c00017 	ldw	r23,0(r4)
    2ce4:	21000104 	addi	r4,r4,4
    2ce8:	d9012d15 	stw	r4,1204(sp)
    2cec:	b82dd7fa 	srai	r22,r23,31
    2cf0:	b005883a 	mov	r2,r22
    2cf4:	003cb906 	br	1fdc <___vfprintf_internal_r+0x5c0>
    2cf8:	8080040c 	andi	r2,r16,16
    2cfc:	10007026 	beq	r2,zero,2ec0 <___vfprintf_internal_r+0x14a4>
    2d00:	d8812d17 	ldw	r2,1204(sp)
    2d04:	002d883a 	mov	r22,zero
    2d08:	00c00044 	movi	r3,1
    2d0c:	15c00017 	ldw	r23,0(r2)
    2d10:	10800104 	addi	r2,r2,4
    2d14:	d8812d15 	stw	r2,1204(sp)
    2d18:	d8012585 	stb	zero,1174(sp)
    2d1c:	b805883a 	mov	r2,r23
    2d20:	003cb706 	br	2000 <___vfprintf_internal_r+0x5e4>
    2d24:	d8813217 	ldw	r2,1224(sp)
    2d28:	14ffffc4 	addi	r19,r2,-1
    2d2c:	04ff4f0e 	bge	zero,r19,2a6c <___vfprintf_internal_r+0x1050>
    2d30:	05800404 	movi	r22,16
    2d34:	05000074 	movhi	r20,1
    2d38:	a5349684 	addi	r20,r20,-11686
    2d3c:	b4c0470e 	bge	r22,r19,2e5c <___vfprintf_internal_r+0x1440>
    2d40:	05c001c4 	movi	r23,7
    2d44:	df012917 	ldw	fp,1188(sp)
    2d48:	00000306 	br	2d58 <___vfprintf_internal_r+0x133c>
    2d4c:	94800204 	addi	r18,r18,8
    2d50:	9cfffc04 	addi	r19,r19,-16
    2d54:	b4c0410e 	bge	r22,r19,2e5c <___vfprintf_internal_r+0x1440>
    2d58:	95000015 	stw	r20,0(r18)
    2d5c:	95800115 	stw	r22,4(r18)
    2d60:	42000404 	addi	r8,r8,16
    2d64:	18c00044 	addi	r3,r3,1
    2d68:	da011d15 	stw	r8,1140(sp)
    2d6c:	d8c11c15 	stw	r3,1136(sp)
    2d70:	b8fff60e 	bge	r23,r3,2d4c <___vfprintf_internal_r+0x1330>
    2d74:	8809883a 	mov	r4,r17
    2d78:	e00b883a 	mov	r5,fp
    2d7c:	d9811b04 	addi	r6,sp,1132
    2d80:	00019e80 	call	19e8 <__sprint_r>
    2d84:	103c6b1e 	bne	r2,zero,1f34 <___vfprintf_internal_r+0x518>
    2d88:	da011d17 	ldw	r8,1140(sp)
    2d8c:	d8c11c17 	ldw	r3,1136(sp)
    2d90:	dc800404 	addi	r18,sp,16
    2d94:	003fee06 	br	2d50 <___vfprintf_internal_r+0x1334>
    2d98:	8080040c 	andi	r2,r16,16
    2d9c:	10005326 	beq	r2,zero,2eec <___vfprintf_internal_r+0x14d0>
    2da0:	d8c12d17 	ldw	r3,1204(sp)
    2da4:	002d883a 	mov	r22,zero
    2da8:	1dc00017 	ldw	r23,0(r3)
    2dac:	18c00104 	addi	r3,r3,4
    2db0:	d8c12d15 	stw	r3,1204(sp)
    2db4:	b805883a 	mov	r2,r23
    2db8:	0007883a 	mov	r3,zero
    2dbc:	d8012585 	stb	zero,1174(sp)
    2dc0:	003c8f06 	br	2000 <___vfprintf_internal_r+0x5e4>
    2dc4:	8088703a 	and	r4,r16,r2
    2dc8:	203efe1e 	bne	r4,zero,29c4 <___vfprintf_internal_r+0xfa8>
    2dcc:	48800115 	stw	r2,4(r9)
    2dd0:	42000044 	addi	r8,r8,1
    2dd4:	18c00044 	addi	r3,r3,1
    2dd8:	da011d15 	stw	r8,1140(sp)
    2ddc:	d8c11c15 	stw	r3,1136(sp)
    2de0:	008001c4 	movi	r2,7
    2de4:	10c00216 	blt	r2,r3,2df0 <___vfprintf_internal_r+0x13d4>
    2de8:	4c800204 	addi	r18,r9,8
    2dec:	003f1f06 	br	2a6c <___vfprintf_internal_r+0x1050>
    2df0:	d9412917 	ldw	r5,1188(sp)
    2df4:	8809883a 	mov	r4,r17
    2df8:	d9811b04 	addi	r6,sp,1132
    2dfc:	00019e80 	call	19e8 <__sprint_r>
    2e00:	103c4c1e 	bne	r2,zero,1f34 <___vfprintf_internal_r+0x518>
    2e04:	dc800404 	addi	r18,sp,16
    2e08:	da011d17 	ldw	r8,1140(sp)
    2e0c:	d8c11c17 	ldw	r3,1136(sp)
    2e10:	003f1606 	br	2a6c <___vfprintf_internal_r+0x1050>
    2e14:	d9412917 	ldw	r5,1188(sp)
    2e18:	8809883a 	mov	r4,r17
    2e1c:	d9811b04 	addi	r6,sp,1132
    2e20:	00019e80 	call	19e8 <__sprint_r>
    2e24:	103c431e 	bne	r2,zero,1f34 <___vfprintf_internal_r+0x518>
    2e28:	da011d17 	ldw	r8,1140(sp)
    2e2c:	d8c11c17 	ldw	r3,1136(sp)
    2e30:	da400404 	addi	r9,sp,16
    2e34:	003eec06 	br	29e8 <___vfprintf_internal_r+0xfcc>
    2e38:	d9412917 	ldw	r5,1188(sp)
    2e3c:	8809883a 	mov	r4,r17
    2e40:	d9811b04 	addi	r6,sp,1132
    2e44:	00019e80 	call	19e8 <__sprint_r>
    2e48:	103c3a1e 	bne	r2,zero,1f34 <___vfprintf_internal_r+0x518>
    2e4c:	da011d17 	ldw	r8,1140(sp)
    2e50:	d8c11c17 	ldw	r3,1136(sp)
    2e54:	dc800404 	addi	r18,sp,16
    2e58:	003eee06 	br	2a14 <___vfprintf_internal_r+0xff8>
    2e5c:	95000015 	stw	r20,0(r18)
    2e60:	94c00115 	stw	r19,4(r18)
    2e64:	44d1883a 	add	r8,r8,r19
    2e68:	003efa06 	br	2a54 <___vfprintf_internal_r+0x1038>
    2e6c:	d9412917 	ldw	r5,1188(sp)
    2e70:	8809883a 	mov	r4,r17
    2e74:	d9811b04 	addi	r6,sp,1132
    2e78:	00019e80 	call	19e8 <__sprint_r>
    2e7c:	103c2d1e 	bne	r2,zero,1f34 <___vfprintf_internal_r+0x518>
    2e80:	da011d17 	ldw	r8,1140(sp)
    2e84:	d8c11c17 	ldw	r3,1136(sp)
    2e88:	da400404 	addi	r9,sp,16
    2e8c:	003d9806 	br	24f0 <___vfprintf_internal_r+0xad4>
    2e90:	8080100c 	andi	r2,r16,64
    2e94:	10011626 	beq	r2,zero,32f0 <___vfprintf_internal_r+0x18d4>
    2e98:	d8c12d17 	ldw	r3,1204(sp)
    2e9c:	002d883a 	mov	r22,zero
    2ea0:	1dc0000b 	ldhu	r23,0(r3)
    2ea4:	18c00104 	addi	r3,r3,4
    2ea8:	d8c12d15 	stw	r3,1204(sp)
    2eac:	003cc106 	br	21b4 <___vfprintf_internal_r+0x798>
    2eb0:	4d000015 	stw	r20,0(r9)
    2eb4:	4c800115 	stw	r18,4(r9)
    2eb8:	4491883a 	add	r8,r8,r18
    2ebc:	003dc006 	br	25c0 <___vfprintf_internal_r+0xba4>
    2ec0:	8080100c 	andi	r2,r16,64
    2ec4:	10010126 	beq	r2,zero,32cc <___vfprintf_internal_r+0x18b0>
    2ec8:	d8c12d17 	ldw	r3,1204(sp)
    2ecc:	002d883a 	mov	r22,zero
    2ed0:	1dc0000b 	ldhu	r23,0(r3)
    2ed4:	18c00104 	addi	r3,r3,4
    2ed8:	d8c12d15 	stw	r3,1204(sp)
    2edc:	b805883a 	mov	r2,r23
    2ee0:	00c00044 	movi	r3,1
    2ee4:	d8012585 	stb	zero,1174(sp)
    2ee8:	003c4506 	br	2000 <___vfprintf_internal_r+0x5e4>
    2eec:	8080100c 	andi	r2,r16,64
    2ef0:	10010526 	beq	r2,zero,3308 <___vfprintf_internal_r+0x18ec>
    2ef4:	d9012d17 	ldw	r4,1204(sp)
    2ef8:	002d883a 	mov	r22,zero
    2efc:	0007883a 	mov	r3,zero
    2f00:	25c0000b 	ldhu	r23,0(r4)
    2f04:	21000104 	addi	r4,r4,4
    2f08:	d9012d15 	stw	r4,1204(sp)
    2f0c:	b805883a 	mov	r2,r23
    2f10:	d8012585 	stb	zero,1174(sp)
    2f14:	003c3a06 	br	2000 <___vfprintf_internal_r+0x5e4>
    2f18:	d8812d17 	ldw	r2,1204(sp)
    2f1c:	15800017 	ldw	r22,0(r2)
    2f20:	15000117 	ldw	r20,4(r2)
    2f24:	10800204 	addi	r2,r2,8
    2f28:	d8812d15 	stw	r2,1204(sp)
    2f2c:	dd813315 	stw	r22,1228(sp)
    2f30:	dd013415 	stw	r20,1232(sp)
    2f34:	003c5906 	br	209c <___vfprintf_internal_r+0x680>
    2f38:	00c00084 	movi	r3,2
    2f3c:	d8012585 	stb	zero,1174(sp)
    2f40:	003c2f06 	br	2000 <___vfprintf_internal_r+0x5e4>
    2f44:	ac800007 	ldb	r18,0(r21)
    2f48:	003b1006 	br	1b8c <___vfprintf_internal_r+0x170>
    2f4c:	8080040c 	andi	r2,r16,16
    2f50:	1000091e 	bne	r2,zero,2f78 <___vfprintf_internal_r+0x155c>
    2f54:	8400100c 	andi	r16,r16,64
    2f58:	80000726 	beq	r16,zero,2f78 <___vfprintf_internal_r+0x155c>
    2f5c:	d8c12d17 	ldw	r3,1204(sp)
    2f60:	d9012c17 	ldw	r4,1200(sp)
    2f64:	18800017 	ldw	r2,0(r3)
    2f68:	18c00104 	addi	r3,r3,4
    2f6c:	d8c12d15 	stw	r3,1204(sp)
    2f70:	1100000d 	sth	r4,0(r2)
    2f74:	003adf06 	br	1af4 <___vfprintf_internal_r+0xd8>
    2f78:	d8c12d17 	ldw	r3,1204(sp)
    2f7c:	d9012c17 	ldw	r4,1200(sp)
    2f80:	18800017 	ldw	r2,0(r3)
    2f84:	18c00104 	addi	r3,r3,4
    2f88:	d8c12d15 	stw	r3,1204(sp)
    2f8c:	11000015 	stw	r4,0(r2)
    2f90:	003ad806 	br	1af4 <___vfprintf_internal_r+0xd8>
    2f94:	8080100c 	andi	r2,r16,64
    2f98:	1000c526 	beq	r2,zero,32b0 <___vfprintf_internal_r+0x1894>
    2f9c:	d8812d17 	ldw	r2,1204(sp)
    2fa0:	15c0000f 	ldh	r23,0(r2)
    2fa4:	10800104 	addi	r2,r2,4
    2fa8:	d8812d15 	stw	r2,1204(sp)
    2fac:	b82dd7fa 	srai	r22,r23,31
    2fb0:	b005883a 	mov	r2,r22
    2fb4:	003c0906 	br	1fdc <___vfprintf_internal_r+0x5c0>
    2fb8:	4c800115 	stw	r18,4(r9)
    2fbc:	9211883a 	add	r8,r18,r8
    2fc0:	18c00044 	addi	r3,r3,1
    2fc4:	da011d15 	stw	r8,1140(sp)
    2fc8:	d8c11c15 	stw	r3,1136(sp)
    2fcc:	008001c4 	movi	r2,7
    2fd0:	10c14016 	blt	r2,r3,34d4 <___vfprintf_internal_r+0x1ab8>
    2fd4:	4a400204 	addi	r9,r9,8
    2fd8:	d8813717 	ldw	r2,1244(sp)
    2fdc:	9ca7883a 	add	r19,r19,r18
    2fe0:	48800015 	stw	r2,0(r9)
    2fe4:	00800044 	movi	r2,1
    2fe8:	48800115 	stw	r2,4(r9)
    2fec:	4091883a 	add	r8,r8,r2
    2ff0:	1887883a 	add	r3,r3,r2
    2ff4:	da011d15 	stw	r8,1140(sp)
    2ff8:	d8c11c15 	stw	r3,1136(sp)
    2ffc:	008001c4 	movi	r2,7
    3000:	10c12c16 	blt	r2,r3,34b4 <___vfprintf_internal_r+0x1a98>
    3004:	4a400204 	addi	r9,r9,8
    3008:	d9013217 	ldw	r4,1224(sp)
    300c:	da011d17 	ldw	r8,1140(sp)
    3010:	d8c11c17 	ldw	r3,1136(sp)
    3014:	24a5c83a 	sub	r18,r4,r18
    3018:	4cc00015 	stw	r19,0(r9)
    301c:	003fa506 	br	2eb4 <___vfprintf_internal_r+0x1498>
    3020:	04c00074 	movhi	r19,1
    3024:	9cf48304 	addi	r19,r19,-11764
    3028:	003c2e06 	br	20e4 <___vfprintf_internal_r+0x6c8>
    302c:	d9412917 	ldw	r5,1188(sp)
    3030:	8809883a 	mov	r4,r17
    3034:	d9811b04 	addi	r6,sp,1132
    3038:	00019e80 	call	19e8 <__sprint_r>
    303c:	103bbd1e 	bne	r2,zero,1f34 <___vfprintf_internal_r+0x518>
    3040:	da011d17 	ldw	r8,1140(sp)
    3044:	da400404 	addi	r9,sp,16
    3048:	003df606 	br	2824 <___vfprintf_internal_r+0xe08>
    304c:	00800074 	movhi	r2,1
    3050:	10b49204 	addi	r2,r2,-11704
    3054:	48800015 	stw	r2,0(r9)
    3058:	00800044 	movi	r2,1
    305c:	48800115 	stw	r2,4(r9)
    3060:	4091883a 	add	r8,r8,r2
    3064:	1887883a 	add	r3,r3,r2
    3068:	da011d15 	stw	r8,1140(sp)
    306c:	d8c11c15 	stw	r3,1136(sp)
    3070:	008001c4 	movi	r2,7
    3074:	10c0bc16 	blt	r2,r3,3368 <___vfprintf_internal_r+0x194c>
    3078:	4a400204 	addi	r9,r9,8
    307c:	9000041e 	bne	r18,zero,3090 <___vfprintf_internal_r+0x1674>
    3080:	d8c13217 	ldw	r3,1224(sp)
    3084:	1800021e 	bne	r3,zero,3090 <___vfprintf_internal_r+0x1674>
    3088:	8080004c 	andi	r2,r16,1
    308c:	103d5226 	beq	r2,zero,25d8 <___vfprintf_internal_r+0xbbc>
    3090:	d8c11c17 	ldw	r3,1136(sp)
    3094:	d9013717 	ldw	r4,1244(sp)
    3098:	00800044 	movi	r2,1
    309c:	48800115 	stw	r2,4(r9)
    30a0:	49000015 	stw	r4,0(r9)
    30a4:	4091883a 	add	r8,r8,r2
    30a8:	1887883a 	add	r3,r3,r2
    30ac:	da011d15 	stw	r8,1140(sp)
    30b0:	d8c11c15 	stw	r3,1136(sp)
    30b4:	008001c4 	movi	r2,7
    30b8:	10c14516 	blt	r2,r3,35d0 <___vfprintf_internal_r+0x1bb4>
    30bc:	4a400204 	addi	r9,r9,8
    30c0:	04a5c83a 	sub	r18,zero,r18
    30c4:	0480d70e 	bge	zero,r18,3424 <___vfprintf_internal_r+0x1a08>
    30c8:	05800404 	movi	r22,16
    30cc:	05000074 	movhi	r20,1
    30d0:	a5349684 	addi	r20,r20,-11686
    30d4:	b480db0e 	bge	r22,r18,3444 <___vfprintf_internal_r+0x1a28>
    30d8:	05c001c4 	movi	r23,7
    30dc:	df012917 	ldw	fp,1188(sp)
    30e0:	00000306 	br	30f0 <___vfprintf_internal_r+0x16d4>
    30e4:	4a400204 	addi	r9,r9,8
    30e8:	94bffc04 	addi	r18,r18,-16
    30ec:	b480d50e 	bge	r22,r18,3444 <___vfprintf_internal_r+0x1a28>
    30f0:	4d000015 	stw	r20,0(r9)
    30f4:	4d800115 	stw	r22,4(r9)
    30f8:	42000404 	addi	r8,r8,16
    30fc:	18c00044 	addi	r3,r3,1
    3100:	da011d15 	stw	r8,1140(sp)
    3104:	d8c11c15 	stw	r3,1136(sp)
    3108:	b8fff60e 	bge	r23,r3,30e4 <___vfprintf_internal_r+0x16c8>
    310c:	8809883a 	mov	r4,r17
    3110:	e00b883a 	mov	r5,fp
    3114:	d9811b04 	addi	r6,sp,1132
    3118:	00019e80 	call	19e8 <__sprint_r>
    311c:	103b851e 	bne	r2,zero,1f34 <___vfprintf_internal_r+0x518>
    3120:	da011d17 	ldw	r8,1140(sp)
    3124:	d8c11c17 	ldw	r3,1136(sp)
    3128:	da400404 	addi	r9,sp,16
    312c:	003fee06 	br	30e8 <___vfprintf_internal_r+0x16cc>
    3130:	da413c15 	stw	r9,1264(sp)
    3134:	0007d680 	call	7d68 <__isnand>
    3138:	da413c17 	ldw	r9,1264(sp)
    313c:	10007e1e 	bne	r2,zero,3338 <___vfprintf_internal_r+0x191c>
    3140:	00bfffc4 	movi	r2,-1
    3144:	e0816a26 	beq	fp,r2,36f0 <___vfprintf_internal_r+0x1cd4>
    3148:	008019c4 	movi	r2,103
    314c:	90816526 	beq	r18,r2,36e4 <___vfprintf_internal_r+0x1cc8>
    3150:	008011c4 	movi	r2,71
    3154:	90816326 	beq	r18,r2,36e4 <___vfprintf_internal_r+0x1cc8>
    3158:	80c04014 	ori	r3,r16,256
    315c:	d8c12a15 	stw	r3,1192(sp)
    3160:	a0016516 	blt	r20,zero,36f8 <___vfprintf_internal_r+0x1cdc>
    3164:	d8012f05 	stb	zero,1212(sp)
    3168:	00801984 	movi	r2,102
    316c:	9080f226 	beq	r18,r2,3538 <___vfprintf_internal_r+0x1b1c>
    3170:	00801184 	movi	r2,70
    3174:	9080f026 	beq	r18,r2,3538 <___vfprintf_internal_r+0x1b1c>
    3178:	00801944 	movi	r2,101
    317c:	90818d26 	beq	r18,r2,37b4 <___vfprintf_internal_r+0x1d98>
    3180:	00801144 	movi	r2,69
    3184:	90818b26 	beq	r18,r2,37b4 <___vfprintf_internal_r+0x1d98>
    3188:	e02f883a 	mov	r23,fp
    318c:	d8812404 	addi	r2,sp,1168
    3190:	d8800115 	stw	r2,4(sp)
    3194:	d8812304 	addi	r2,sp,1164
    3198:	d8800215 	stw	r2,8(sp)
    319c:	d8812204 	addi	r2,sp,1160
    31a0:	ddc00015 	stw	r23,0(sp)
    31a4:	d8800315 	stw	r2,12(sp)
    31a8:	8809883a 	mov	r4,r17
    31ac:	b00b883a 	mov	r5,r22
    31b0:	a00d883a 	mov	r6,r20
    31b4:	01c00084 	movi	r7,2
    31b8:	da413c15 	stw	r9,1264(sp)
    31bc:	0003c6c0 	call	3c6c <_dtoa_r>
    31c0:	1027883a 	mov	r19,r2
    31c4:	008019c4 	movi	r2,103
    31c8:	da413c17 	ldw	r9,1264(sp)
    31cc:	9081951e 	bne	r18,r2,3824 <___vfprintf_internal_r+0x1e08>
    31d0:	8080004c 	andi	r2,r16,1
    31d4:	10017926 	beq	r2,zero,37bc <___vfprintf_internal_r+0x1da0>
    31d8:	00801184 	movi	r2,70
    31dc:	9dc7883a 	add	r3,r19,r23
    31e0:	9080e626 	beq	r18,r2,357c <___vfprintf_internal_r+0x1b60>
    31e4:	b009883a 	mov	r4,r22
    31e8:	a00b883a 	mov	r5,r20
    31ec:	000d883a 	mov	r6,zero
    31f0:	000f883a 	mov	r7,zero
    31f4:	d8c13b15 	stw	r3,1260(sp)
    31f8:	da413c15 	stw	r9,1264(sp)
    31fc:	00098e00 	call	98e0 <__eqdf2>
    3200:	d8c13b17 	ldw	r3,1260(sp)
    3204:	da413c17 	ldw	r9,1264(sp)
    3208:	10000726 	beq	r2,zero,3228 <___vfprintf_internal_r+0x180c>
    320c:	d8812217 	ldw	r2,1160(sp)
    3210:	10c18a2e 	bgeu	r2,r3,383c <___vfprintf_internal_r+0x1e20>
    3214:	01000c04 	movi	r4,48
    3218:	11000005 	stb	r4,0(r2)
    321c:	10800044 	addi	r2,r2,1
    3220:	d8812215 	stw	r2,1160(sp)
    3224:	10fffc1e 	bne	r2,r3,3218 <___vfprintf_internal_r+0x17fc>
    3228:	1cc7c83a 	sub	r3,r3,r19
    322c:	d8c13215 	stw	r3,1224(sp)
    3230:	008019c4 	movi	r2,103
    3234:	9080fa26 	beq	r18,r2,3620 <___vfprintf_internal_r+0x1c04>
    3238:	008011c4 	movi	r2,71
    323c:	9080f826 	beq	r18,r2,3620 <___vfprintf_internal_r+0x1c04>
    3240:	00801984 	movi	r2,102
    3244:	90818e1e 	bne	r18,r2,3880 <___vfprintf_internal_r+0x1e64>
    3248:	d8812417 	ldw	r2,1168(sp)
    324c:	d8812b15 	stw	r2,1196(sp)
    3250:	00817c0e 	bge	zero,r2,3844 <___vfprintf_internal_r+0x1e28>
    3254:	e000021e 	bne	fp,zero,3260 <___vfprintf_internal_r+0x1844>
    3258:	8400004c 	andi	r16,r16,1
    325c:	80000426 	beq	r16,zero,3270 <___vfprintf_internal_r+0x1854>
    3260:	d8812b17 	ldw	r2,1196(sp)
    3264:	e2000044 	addi	r8,fp,1
    3268:	1205883a 	add	r2,r2,r8
    326c:	d8812b15 	stw	r2,1196(sp)
    3270:	d8812815 	stw	r2,1184(sp)
    3274:	10010b16 	blt	r2,zero,36a4 <___vfprintf_internal_r+0x1c88>
    3278:	ddc12f07 	ldb	r23,1212(sp)
    327c:	b800e426 	beq	r23,zero,3610 <___vfprintf_internal_r+0x1bf4>
    3280:	00800b44 	movi	r2,45
    3284:	d8812585 	stb	r2,1174(sp)
    3288:	dc012a17 	ldw	r16,1192(sp)
    328c:	d8013115 	stw	zero,1220(sp)
    3290:	003b7306 	br	2060 <___vfprintf_internal_r+0x644>
    3294:	d8812b17 	ldw	r2,1196(sp)
    3298:	d8812815 	stw	r2,1184(sp)
    329c:	10005716 	blt	r2,zero,33fc <___vfprintf_internal_r+0x19e0>
    32a0:	d8812583 	ldbu	r2,1174(sp)
    32a4:	ddc12d15 	stw	r23,1204(sp)
    32a8:	d8013115 	stw	zero,1220(sp)
    32ac:	003b6806 	br	2050 <___vfprintf_internal_r+0x634>
    32b0:	d8c12d17 	ldw	r3,1204(sp)
    32b4:	1dc00017 	ldw	r23,0(r3)
    32b8:	18c00104 	addi	r3,r3,4
    32bc:	d8c12d15 	stw	r3,1204(sp)
    32c0:	b82dd7fa 	srai	r22,r23,31
    32c4:	b005883a 	mov	r2,r22
    32c8:	003b4406 	br	1fdc <___vfprintf_internal_r+0x5c0>
    32cc:	d9012d17 	ldw	r4,1204(sp)
    32d0:	002d883a 	mov	r22,zero
    32d4:	00c00044 	movi	r3,1
    32d8:	25c00017 	ldw	r23,0(r4)
    32dc:	21000104 	addi	r4,r4,4
    32e0:	d9012d15 	stw	r4,1204(sp)
    32e4:	b805883a 	mov	r2,r23
    32e8:	d8012585 	stb	zero,1174(sp)
    32ec:	003b4406 	br	2000 <___vfprintf_internal_r+0x5e4>
    32f0:	d9012d17 	ldw	r4,1204(sp)
    32f4:	002d883a 	mov	r22,zero
    32f8:	25c00017 	ldw	r23,0(r4)
    32fc:	21000104 	addi	r4,r4,4
    3300:	d9012d15 	stw	r4,1204(sp)
    3304:	003bab06 	br	21b4 <___vfprintf_internal_r+0x798>
    3308:	d8812d17 	ldw	r2,1204(sp)
    330c:	002d883a 	mov	r22,zero
    3310:	0007883a 	mov	r3,zero
    3314:	15c00017 	ldw	r23,0(r2)
    3318:	10800104 	addi	r2,r2,4
    331c:	d8812d15 	stw	r2,1204(sp)
    3320:	d8012585 	stb	zero,1174(sp)
    3324:	b805883a 	mov	r2,r23
    3328:	003b3506 	br	2000 <___vfprintf_internal_r+0x5e4>
    332c:	00ffffc4 	movi	r3,-1
    3330:	b82b883a 	mov	r21,r23
    3334:	003a1606 	br	1b90 <___vfprintf_internal_r+0x174>
    3338:	008011c4 	movi	r2,71
    333c:	1480b116 	blt	r2,r18,3604 <___vfprintf_internal_r+0x1be8>
    3340:	04c00074 	movhi	r19,1
    3344:	9cf48404 	addi	r19,r19,-11760
    3348:	00c000c4 	movi	r3,3
    334c:	00bfdfc4 	movi	r2,-129
    3350:	80a0703a 	and	r16,r16,r2
    3354:	d8c12815 	stw	r3,1184(sp)
    3358:	d8812583 	ldbu	r2,1174(sp)
    335c:	d8c12b15 	stw	r3,1196(sp)
    3360:	d8013115 	stw	zero,1220(sp)
    3364:	003b3a06 	br	2050 <___vfprintf_internal_r+0x634>
    3368:	d9412917 	ldw	r5,1188(sp)
    336c:	8809883a 	mov	r4,r17
    3370:	d9811b04 	addi	r6,sp,1132
    3374:	00019e80 	call	19e8 <__sprint_r>
    3378:	103aee1e 	bne	r2,zero,1f34 <___vfprintf_internal_r+0x518>
    337c:	dc812417 	ldw	r18,1168(sp)
    3380:	da011d17 	ldw	r8,1140(sp)
    3384:	da400404 	addi	r9,sp,16
    3388:	003f3c06 	br	307c <___vfprintf_internal_r+0x1660>
    338c:	ad400044 	addi	r21,r21,1
    3390:	84000814 	ori	r16,r16,32
    3394:	14800047 	ldb	r18,1(r2)
    3398:	0039fc06 	br	1b8c <___vfprintf_internal_r+0x170>
    339c:	d9412917 	ldw	r5,1188(sp)
    33a0:	8809883a 	mov	r4,r17
    33a4:	d9811b04 	addi	r6,sp,1132
    33a8:	00019e80 	call	19e8 <__sprint_r>
    33ac:	103ae11e 	bne	r2,zero,1f34 <___vfprintf_internal_r+0x518>
    33b0:	da011d17 	ldw	r8,1140(sp)
    33b4:	da400404 	addi	r9,sp,16
    33b8:	003d2b06 	br	2868 <___vfprintf_internal_r+0xe4c>
    33bc:	4d000015 	stw	r20,0(r9)
    33c0:	4c800115 	stw	r18,4(r9)
    33c4:	4491883a 	add	r8,r8,r18
    33c8:	18c00044 	addi	r3,r3,1
    33cc:	da011d15 	stw	r8,1140(sp)
    33d0:	d8c11c15 	stw	r3,1136(sp)
    33d4:	008001c4 	movi	r2,7
    33d8:	10fcbd16 	blt	r2,r3,26d0 <___vfprintf_internal_r+0xcb4>
    33dc:	4a400204 	addi	r9,r9,8
    33e0:	003cc206 	br	26ec <___vfprintf_internal_r+0xcd0>
    33e4:	da413c15 	stw	r9,1264(sp)
    33e8:	0007f780 	call	7f78 <strlen>
    33ec:	d8812b15 	stw	r2,1196(sp)
    33f0:	d8812815 	stw	r2,1184(sp)
    33f4:	da413c17 	ldw	r9,1264(sp)
    33f8:	103fa90e 	bge	r2,zero,32a0 <___vfprintf_internal_r+0x1884>
    33fc:	d8012815 	stw	zero,1184(sp)
    3400:	003fa706 	br	32a0 <___vfprintf_internal_r+0x1884>
    3404:	d9412917 	ldw	r5,1188(sp)
    3408:	8809883a 	mov	r4,r17
    340c:	d9811b04 	addi	r6,sp,1132
    3410:	00019e80 	call	19e8 <__sprint_r>
    3414:	103ac71e 	bne	r2,zero,1f34 <___vfprintf_internal_r+0x518>
    3418:	da011d17 	ldw	r8,1140(sp)
    341c:	d8c11c17 	ldw	r3,1136(sp)
    3420:	da400404 	addi	r9,sp,16
    3424:	d8813217 	ldw	r2,1224(sp)
    3428:	4cc00015 	stw	r19,0(r9)
    342c:	48800115 	stw	r2,4(r9)
    3430:	4091883a 	add	r8,r8,r2
    3434:	003c6206 	br	25c0 <___vfprintf_internal_r+0xba4>
    3438:	00800b44 	movi	r2,45
    343c:	d8812585 	stb	r2,1174(sp)
    3440:	003b2406 	br	20d4 <___vfprintf_internal_r+0x6b8>
    3444:	4d000015 	stw	r20,0(r9)
    3448:	4c800115 	stw	r18,4(r9)
    344c:	4491883a 	add	r8,r8,r18
    3450:	18c00044 	addi	r3,r3,1
    3454:	da011d15 	stw	r8,1140(sp)
    3458:	d8c11c15 	stw	r3,1136(sp)
    345c:	008001c4 	movi	r2,7
    3460:	10ffe816 	blt	r2,r3,3404 <___vfprintf_internal_r+0x19e8>
    3464:	4a400204 	addi	r9,r9,8
    3468:	003fee06 	br	3424 <___vfprintf_internal_r+0x1a08>
    346c:	d8c12b15 	stw	r3,1196(sp)
    3470:	00800184 	movi	r2,6
    3474:	10c0062e 	bgeu	r2,r3,3490 <___vfprintf_internal_r+0x1a74>
    3478:	d8812b15 	stw	r2,1196(sp)
    347c:	d8812815 	stw	r2,1184(sp)
    3480:	ddc12d15 	stw	r23,1204(sp)
    3484:	04c00074 	movhi	r19,1
    3488:	9cf49004 	addi	r19,r19,-11712
    348c:	0039ca06 	br	1bb8 <___vfprintf_internal_r+0x19c>
    3490:	d8812b17 	ldw	r2,1196(sp)
    3494:	d8812815 	stw	r2,1184(sp)
    3498:	103ff90e 	bge	r2,zero,3480 <___vfprintf_internal_r+0x1a64>
    349c:	d8012815 	stw	zero,1184(sp)
    34a0:	003ff706 	br	3480 <___vfprintf_internal_r+0x1a64>
    34a4:	00800244 	movi	r2,9
    34a8:	15fdaa36 	bltu	r2,r23,2b54 <___vfprintf_internal_r+0x1138>
    34ac:	dd010e04 	addi	r20,sp,1080
    34b0:	003dc606 	br	2bcc <___vfprintf_internal_r+0x11b0>
    34b4:	d9412917 	ldw	r5,1188(sp)
    34b8:	8809883a 	mov	r4,r17
    34bc:	d9811b04 	addi	r6,sp,1132
    34c0:	00019e80 	call	19e8 <__sprint_r>
    34c4:	103a9b1e 	bne	r2,zero,1f34 <___vfprintf_internal_r+0x518>
    34c8:	dc812417 	ldw	r18,1168(sp)
    34cc:	da400404 	addi	r9,sp,16
    34d0:	003ecd06 	br	3008 <___vfprintf_internal_r+0x15ec>
    34d4:	d9412917 	ldw	r5,1188(sp)
    34d8:	8809883a 	mov	r4,r17
    34dc:	d9811b04 	addi	r6,sp,1132
    34e0:	00019e80 	call	19e8 <__sprint_r>
    34e4:	103a931e 	bne	r2,zero,1f34 <___vfprintf_internal_r+0x518>
    34e8:	dc812417 	ldw	r18,1168(sp)
    34ec:	da011d17 	ldw	r8,1140(sp)
    34f0:	d8c11c17 	ldw	r3,1136(sp)
    34f4:	da400404 	addi	r9,sp,16
    34f8:	003eb706 	br	2fd8 <___vfprintf_internal_r+0x15bc>
    34fc:	d9412917 	ldw	r5,1188(sp)
    3500:	8809883a 	mov	r4,r17
    3504:	d9811b04 	addi	r6,sp,1132
    3508:	00019e80 	call	19e8 <__sprint_r>
    350c:	103a891e 	bne	r2,zero,1f34 <___vfprintf_internal_r+0x518>
    3510:	dc812417 	ldw	r18,1168(sp)
    3514:	da011d17 	ldw	r8,1140(sp)
    3518:	da400404 	addi	r9,sp,16
    351c:	003dc206 	br	2c28 <___vfprintf_internal_r+0x120c>
    3520:	df012815 	stw	fp,1184(sp)
    3524:	d8812583 	ldbu	r2,1174(sp)
    3528:	df012b15 	stw	fp,1196(sp)
    352c:	ddc12d15 	stw	r23,1204(sp)
    3530:	d8013115 	stw	zero,1220(sp)
    3534:	003ac606 	br	2050 <___vfprintf_internal_r+0x634>
    3538:	d8812404 	addi	r2,sp,1168
    353c:	d8800115 	stw	r2,4(sp)
    3540:	d8812304 	addi	r2,sp,1164
    3544:	d8800215 	stw	r2,8(sp)
    3548:	d8812204 	addi	r2,sp,1160
    354c:	df000015 	stw	fp,0(sp)
    3550:	d8800315 	stw	r2,12(sp)
    3554:	8809883a 	mov	r4,r17
    3558:	b00b883a 	mov	r5,r22
    355c:	a00d883a 	mov	r6,r20
    3560:	01c000c4 	movi	r7,3
    3564:	da413c15 	stw	r9,1264(sp)
    3568:	0003c6c0 	call	3c6c <_dtoa_r>
    356c:	da413c17 	ldw	r9,1264(sp)
    3570:	1027883a 	mov	r19,r2
    3574:	1707883a 	add	r3,r2,fp
    3578:	e02f883a 	mov	r23,fp
    357c:	99000007 	ldb	r4,0(r19)
    3580:	00800c04 	movi	r2,48
    3584:	20800326 	beq	r4,r2,3594 <___vfprintf_internal_r+0x1b78>
    3588:	da812417 	ldw	r10,1168(sp)
    358c:	1a87883a 	add	r3,r3,r10
    3590:	003f1406 	br	31e4 <___vfprintf_internal_r+0x17c8>
    3594:	b009883a 	mov	r4,r22
    3598:	a00b883a 	mov	r5,r20
    359c:	000d883a 	mov	r6,zero
    35a0:	000f883a 	mov	r7,zero
    35a4:	d8c13b15 	stw	r3,1260(sp)
    35a8:	da413c15 	stw	r9,1264(sp)
    35ac:	000993c0 	call	993c <__nedf2>
    35b0:	d8c13b17 	ldw	r3,1260(sp)
    35b4:	da413c17 	ldw	r9,1264(sp)
    35b8:	103ff326 	beq	r2,zero,3588 <___vfprintf_internal_r+0x1b6c>
    35bc:	00800044 	movi	r2,1
    35c0:	15d5c83a 	sub	r10,r2,r23
    35c4:	da812415 	stw	r10,1168(sp)
    35c8:	1a87883a 	add	r3,r3,r10
    35cc:	003f0506 	br	31e4 <___vfprintf_internal_r+0x17c8>
    35d0:	d9412917 	ldw	r5,1188(sp)
    35d4:	8809883a 	mov	r4,r17
    35d8:	d9811b04 	addi	r6,sp,1132
    35dc:	00019e80 	call	19e8 <__sprint_r>
    35e0:	103a541e 	bne	r2,zero,1f34 <___vfprintf_internal_r+0x518>
    35e4:	dc812417 	ldw	r18,1168(sp)
    35e8:	da011d17 	ldw	r8,1140(sp)
    35ec:	d8c11c17 	ldw	r3,1136(sp)
    35f0:	da400404 	addi	r9,sp,16
    35f4:	003eb206 	br	30c0 <___vfprintf_internal_r+0x16a4>
    35f8:	b82b883a 	mov	r21,r23
    35fc:	0007883a 	mov	r3,zero
    3600:	00396306 	br	1b90 <___vfprintf_internal_r+0x174>
    3604:	04c00074 	movhi	r19,1
    3608:	9cf48504 	addi	r19,r19,-11756
    360c:	003f4e06 	br	3348 <___vfprintf_internal_r+0x192c>
    3610:	d8812583 	ldbu	r2,1174(sp)
    3614:	dc012a17 	ldw	r16,1192(sp)
    3618:	d8013115 	stw	zero,1220(sp)
    361c:	003a8c06 	br	2050 <___vfprintf_internal_r+0x634>
    3620:	d8812417 	ldw	r2,1168(sp)
    3624:	d8812b15 	stw	r2,1196(sp)
    3628:	1029883a 	mov	r20,r2
    362c:	00bfff44 	movi	r2,-3
    3630:	a0800116 	blt	r20,r2,3638 <___vfprintf_internal_r+0x1c1c>
    3634:	e5001d0e 	bge	fp,r20,36ac <___vfprintf_internal_r+0x1c90>
    3638:	94bfff84 	addi	r18,r18,-2
    363c:	a53fffc4 	addi	r20,r20,-1
    3640:	dd012415 	stw	r20,1168(sp)
    3644:	dc811fc5 	stb	r18,1151(sp)
    3648:	a0007216 	blt	r20,zero,3814 <___vfprintf_internal_r+0x1df8>
    364c:	00800ac4 	movi	r2,43
    3650:	d8812005 	stb	r2,1152(sp)
    3654:	00800244 	movi	r2,9
    3658:	15003516 	blt	r2,r20,3730 <___vfprintf_internal_r+0x1d14>
    365c:	00800c04 	movi	r2,48
    3660:	a5000c04 	addi	r20,r20,48
    3664:	d8812045 	stb	r2,1153(sp)
    3668:	dd012085 	stb	r20,1154(sp)
    366c:	d8c120c4 	addi	r3,sp,1155
    3670:	d8811fc4 	addi	r2,sp,1151
    3674:	1885c83a 	sub	r2,r3,r2
    3678:	d8c13217 	ldw	r3,1224(sp)
    367c:	d8813515 	stw	r2,1236(sp)
    3680:	1885883a 	add	r2,r3,r2
    3684:	d8812b15 	stw	r2,1196(sp)
    3688:	00800044 	movi	r2,1
    368c:	10c0580e 	bge	r2,r3,37f0 <___vfprintf_internal_r+0x1dd4>
    3690:	d8812b17 	ldw	r2,1196(sp)
    3694:	10800044 	addi	r2,r2,1
    3698:	d8812b15 	stw	r2,1196(sp)
    369c:	d8812815 	stw	r2,1184(sp)
    36a0:	103ef50e 	bge	r2,zero,3278 <___vfprintf_internal_r+0x185c>
    36a4:	d8012815 	stw	zero,1184(sp)
    36a8:	003ef306 	br	3278 <___vfprintf_internal_r+0x185c>
    36ac:	d8812b17 	ldw	r2,1196(sp)
    36b0:	d8c13217 	ldw	r3,1224(sp)
    36b4:	10c01416 	blt	r2,r3,3708 <___vfprintf_internal_r+0x1cec>
    36b8:	8400004c 	andi	r16,r16,1
    36bc:	80000326 	beq	r16,zero,36cc <___vfprintf_internal_r+0x1cb0>
    36c0:	d8812b17 	ldw	r2,1196(sp)
    36c4:	10800044 	addi	r2,r2,1
    36c8:	d8812b15 	stw	r2,1196(sp)
    36cc:	d8812815 	stw	r2,1184(sp)
    36d0:	10001416 	blt	r2,zero,3724 <___vfprintf_internal_r+0x1d08>
    36d4:	048019c4 	movi	r18,103
    36d8:	003ee706 	br	3278 <___vfprintf_internal_r+0x185c>
    36dc:	d8012815 	stw	zero,1184(sp)
    36e0:	003b1a06 	br	234c <___vfprintf_internal_r+0x930>
    36e4:	e03e9c1e 	bne	fp,zero,3158 <___vfprintf_internal_r+0x173c>
    36e8:	07000044 	movi	fp,1
    36ec:	003e9a06 	br	3158 <___vfprintf_internal_r+0x173c>
    36f0:	07000184 	movi	fp,6
    36f4:	003e9806 	br	3158 <___vfprintf_internal_r+0x173c>
    36f8:	00c00b44 	movi	r3,45
    36fc:	a520003c 	xorhi	r20,r20,32768
    3700:	d8c12f05 	stb	r3,1212(sp)
    3704:	003e9806 	br	3168 <___vfprintf_internal_r+0x174c>
    3708:	05003f0e 	bge	zero,r20,3808 <___vfprintf_internal_r+0x1dec>
    370c:	05000044 	movi	r20,1
    3710:	d8c13217 	ldw	r3,1224(sp)
    3714:	a0e9883a 	add	r20,r20,r3
    3718:	dd012b15 	stw	r20,1196(sp)
    371c:	dd012815 	stw	r20,1184(sp)
    3720:	a03fec0e 	bge	r20,zero,36d4 <___vfprintf_internal_r+0x1cb8>
    3724:	d8012815 	stw	zero,1184(sp)
    3728:	048019c4 	movi	r18,103
    372c:	003ed206 	br	3278 <___vfprintf_internal_r+0x185c>
    3730:	d8c11f84 	addi	r3,sp,1150
    3734:	102f883a 	mov	r23,r2
    3738:	4839883a 	mov	fp,r9
    373c:	a009883a 	mov	r4,r20
    3740:	01400284 	movi	r5,10
    3744:	182d883a 	mov	r22,r3
    3748:	0000dd80 	call	dd8 <__modsi3>
    374c:	10800c04 	addi	r2,r2,48
    3750:	a009883a 	mov	r4,r20
    3754:	b0800005 	stb	r2,0(r22)
    3758:	01400284 	movi	r5,10
    375c:	0000d880 	call	d88 <__divsi3>
    3760:	1029883a 	mov	r20,r2
    3764:	b0ffffc4 	addi	r3,r22,-1
    3768:	b8bff416 	blt	r23,r2,373c <___vfprintf_internal_r+0x1d20>
    376c:	11400c04 	addi	r5,r2,48
    3770:	b17fffc5 	stb	r5,-1(r22)
    3774:	d8811fc4 	addi	r2,sp,1151
    3778:	e013883a 	mov	r9,fp
    377c:	18803e2e 	bgeu	r3,r2,3878 <___vfprintf_internal_r+0x1e5c>
    3780:	b007883a 	mov	r3,r22
    3784:	d9012044 	addi	r4,sp,1153
    3788:	00000206 	br	3794 <___vfprintf_internal_r+0x1d78>
    378c:	19400003 	ldbu	r5,0(r3)
    3790:	18c00044 	addi	r3,r3,1
    3794:	21400005 	stb	r5,0(r4)
    3798:	21000044 	addi	r4,r4,1
    379c:	10fffb1e 	bne	r2,r3,378c <___vfprintf_internal_r+0x1d70>
    37a0:	d8c12004 	addi	r3,sp,1152
    37a4:	1d87c83a 	sub	r3,r3,r22
    37a8:	d9012044 	addi	r4,sp,1153
    37ac:	20c7883a 	add	r3,r4,r3
    37b0:	003fb006 	br	3674 <___vfprintf_internal_r+0x1c58>
    37b4:	e5c00044 	addi	r23,fp,1
    37b8:	003e7406 	br	318c <___vfprintf_internal_r+0x1770>
    37bc:	d8c12217 	ldw	r3,1160(sp)
    37c0:	003e9906 	br	3228 <___vfprintf_internal_r+0x180c>
    37c4:	d9012d17 	ldw	r4,1204(sp)
    37c8:	ac800043 	ldbu	r18,1(r21)
    37cc:	b82b883a 	mov	r21,r23
    37d0:	20c00017 	ldw	r3,0(r4)
    37d4:	20800104 	addi	r2,r4,4
    37d8:	d8812d15 	stw	r2,1204(sp)
    37dc:	18002116 	blt	r3,zero,3864 <___vfprintf_internal_r+0x1e48>
    37e0:	94803fcc 	andi	r18,r18,255
    37e4:	9480201c 	xori	r18,r18,128
    37e8:	94bfe004 	addi	r18,r18,-128
    37ec:	0038e706 	br	1b8c <___vfprintf_internal_r+0x170>
    37f0:	80a0703a 	and	r16,r16,r2
    37f4:	803fa61e 	bne	r16,zero,3690 <___vfprintf_internal_r+0x1c74>
    37f8:	d8812b17 	ldw	r2,1196(sp)
    37fc:	d8812815 	stw	r2,1184(sp)
    3800:	103e9d0e 	bge	r2,zero,3278 <___vfprintf_internal_r+0x185c>
    3804:	003fa706 	br	36a4 <___vfprintf_internal_r+0x1c88>
    3808:	00800084 	movi	r2,2
    380c:	1529c83a 	sub	r20,r2,r20
    3810:	003fbf06 	br	3710 <___vfprintf_internal_r+0x1cf4>
    3814:	00800b44 	movi	r2,45
    3818:	0529c83a 	sub	r20,zero,r20
    381c:	d8812005 	stb	r2,1152(sp)
    3820:	003f8c06 	br	3654 <___vfprintf_internal_r+0x1c38>
    3824:	008011c4 	movi	r2,71
    3828:	90be6926 	beq	r18,r2,31d0 <___vfprintf_internal_r+0x17b4>
    382c:	003e6a06 	br	31d8 <___vfprintf_internal_r+0x17bc>
    3830:	00bfffc4 	movi	r2,-1
    3834:	d8812c15 	stw	r2,1200(sp)
    3838:	0039ad06 	br	1ef0 <___vfprintf_internal_r+0x4d4>
    383c:	1007883a 	mov	r3,r2
    3840:	003e7906 	br	3228 <___vfprintf_internal_r+0x180c>
    3844:	e000021e 	bne	fp,zero,3850 <___vfprintf_internal_r+0x1e34>
    3848:	8400004c 	andi	r16,r16,1
    384c:	80000e26 	beq	r16,zero,3888 <___vfprintf_internal_r+0x1e6c>
    3850:	e7000084 	addi	fp,fp,2
    3854:	df012b15 	stw	fp,1196(sp)
    3858:	df012815 	stw	fp,1184(sp)
    385c:	e03e860e 	bge	fp,zero,3278 <___vfprintf_internal_r+0x185c>
    3860:	003f9006 	br	36a4 <___vfprintf_internal_r+0x1c88>
    3864:	94803fcc 	andi	r18,r18,255
    3868:	9480201c 	xori	r18,r18,128
    386c:	00ffffc4 	movi	r3,-1
    3870:	94bfe004 	addi	r18,r18,-128
    3874:	0038c506 	br	1b8c <___vfprintf_internal_r+0x170>
    3878:	d8c12044 	addi	r3,sp,1153
    387c:	003f7d06 	br	3674 <___vfprintf_internal_r+0x1c58>
    3880:	dd012417 	ldw	r20,1168(sp)
    3884:	003f6d06 	br	363c <___vfprintf_internal_r+0x1c20>
    3888:	00c00044 	movi	r3,1
    388c:	d8c12815 	stw	r3,1184(sp)
    3890:	d8c12b15 	stw	r3,1196(sp)
    3894:	003e7806 	br	3278 <___vfprintf_internal_r+0x185c>

00003898 <__vfprintf_internal>:
    3898:	00800074 	movhi	r2,1
    389c:	10bbd004 	addi	r2,r2,-4288
    38a0:	2007883a 	mov	r3,r4
    38a4:	11000017 	ldw	r4,0(r2)
    38a8:	2805883a 	mov	r2,r5
    38ac:	300f883a 	mov	r7,r6
    38b0:	180b883a 	mov	r5,r3
    38b4:	100d883a 	mov	r6,r2
    38b8:	0001a1c1 	jmpi	1a1c <___vfprintf_internal_r>

000038bc <__swsetup_r>:
    38bc:	00800074 	movhi	r2,1
    38c0:	10bbd004 	addi	r2,r2,-4288
    38c4:	10800017 	ldw	r2,0(r2)
    38c8:	defffd04 	addi	sp,sp,-12
    38cc:	dc400115 	stw	r17,4(sp)
    38d0:	dc000015 	stw	r16,0(sp)
    38d4:	dfc00215 	stw	ra,8(sp)
    38d8:	2023883a 	mov	r17,r4
    38dc:	2821883a 	mov	r16,r5
    38e0:	10000226 	beq	r2,zero,38ec <__swsetup_r+0x30>
    38e4:	10c00e17 	ldw	r3,56(r2)
    38e8:	18003d26 	beq	r3,zero,39e0 <__swsetup_r+0x124>
    38ec:	8080030b 	ldhu	r2,12(r16)
    38f0:	10c0020c 	andi	r3,r2,8
    38f4:	18ffffcc 	andi	r3,r3,65535
    38f8:	18e0001c 	xori	r3,r3,32768
    38fc:	18e00004 	addi	r3,r3,-32768
    3900:	18001226 	beq	r3,zero,394c <__swsetup_r+0x90>
    3904:	80c00417 	ldw	r3,16(r16)
    3908:	18001f26 	beq	r3,zero,3988 <__swsetup_r+0xcc>
    390c:	1100004c 	andi	r4,r2,1
    3910:	2000261e 	bne	r4,zero,39ac <__swsetup_r+0xf0>
    3914:	1080008c 	andi	r2,r2,2
    3918:	10bfffcc 	andi	r2,r2,65535
    391c:	10a0001c 	xori	r2,r2,32768
    3920:	10a00004 	addi	r2,r2,-32768
    3924:	1000311e 	bne	r2,zero,39ec <__swsetup_r+0x130>
    3928:	80800517 	ldw	r2,20(r16)
    392c:	80800215 	stw	r2,8(r16)
    3930:	18002326 	beq	r3,zero,39c0 <__swsetup_r+0x104>
    3934:	0005883a 	mov	r2,zero
    3938:	dfc00217 	ldw	ra,8(sp)
    393c:	dc400117 	ldw	r17,4(sp)
    3940:	dc000017 	ldw	r16,0(sp)
    3944:	dec00304 	addi	sp,sp,12
    3948:	f800283a 	ret
    394c:	10c0040c 	andi	r3,r2,16
    3950:	18ffffcc 	andi	r3,r3,65535
    3954:	18e0001c 	xori	r3,r3,32768
    3958:	18e00004 	addi	r3,r3,-32768
    395c:	18001e26 	beq	r3,zero,39d8 <__swsetup_r+0x11c>
    3960:	10c0010c 	andi	r3,r2,4
    3964:	18ffffcc 	andi	r3,r3,65535
    3968:	18e0001c 	xori	r3,r3,32768
    396c:	18e00004 	addi	r3,r3,-32768
    3970:	1800211e 	bne	r3,zero,39f8 <__swsetup_r+0x13c>
    3974:	80c00417 	ldw	r3,16(r16)
    3978:	11400214 	ori	r5,r2,8
    397c:	8140030d 	sth	r5,12(r16)
    3980:	2805883a 	mov	r2,r5
    3984:	183fe11e 	bne	r3,zero,390c <__swsetup_r+0x50>
    3988:	1140a00c 	andi	r5,r2,640
    398c:	01008004 	movi	r4,512
    3990:	293fde26 	beq	r5,r4,390c <__swsetup_r+0x50>
    3994:	8809883a 	mov	r4,r17
    3998:	800b883a 	mov	r5,r16
    399c:	00062b80 	call	62b8 <__smakebuf_r>
    39a0:	8080030b 	ldhu	r2,12(r16)
    39a4:	80c00417 	ldw	r3,16(r16)
    39a8:	003fd806 	br	390c <__swsetup_r+0x50>
    39ac:	80800517 	ldw	r2,20(r16)
    39b0:	80000215 	stw	zero,8(r16)
    39b4:	0085c83a 	sub	r2,zero,r2
    39b8:	80800615 	stw	r2,24(r16)
    39bc:	183fdd1e 	bne	r3,zero,3934 <__swsetup_r+0x78>
    39c0:	8080030b 	ldhu	r2,12(r16)
    39c4:	1080200c 	andi	r2,r2,128
    39c8:	10bfffcc 	andi	r2,r2,65535
    39cc:	10a0001c 	xori	r2,r2,32768
    39d0:	10a00004 	addi	r2,r2,-32768
    39d4:	103fd826 	beq	r2,zero,3938 <__swsetup_r+0x7c>
    39d8:	00bfffc4 	movi	r2,-1
    39dc:	003fd606 	br	3938 <__swsetup_r+0x7c>
    39e0:	1009883a 	mov	r4,r2
    39e4:	00055440 	call	5544 <__sinit>
    39e8:	003fc006 	br	38ec <__swsetup_r+0x30>
    39ec:	0005883a 	mov	r2,zero
    39f0:	80800215 	stw	r2,8(r16)
    39f4:	003fce06 	br	3930 <__swsetup_r+0x74>
    39f8:	81400c17 	ldw	r5,48(r16)
    39fc:	28000626 	beq	r5,zero,3a18 <__swsetup_r+0x15c>
    3a00:	80c01004 	addi	r3,r16,64
    3a04:	28c00326 	beq	r5,r3,3a14 <__swsetup_r+0x158>
    3a08:	8809883a 	mov	r4,r17
    3a0c:	00058c80 	call	58c8 <_free_r>
    3a10:	8080030b 	ldhu	r2,12(r16)
    3a14:	80000c15 	stw	zero,48(r16)
    3a18:	80c00417 	ldw	r3,16(r16)
    3a1c:	013ff6c4 	movi	r4,-37
    3a20:	2084703a 	and	r2,r4,r2
    3a24:	80000115 	stw	zero,4(r16)
    3a28:	80c00015 	stw	r3,0(r16)
    3a2c:	003fd206 	br	3978 <__swsetup_r+0xbc>

00003a30 <quorem>:
    3a30:	defff204 	addi	sp,sp,-56
    3a34:	dd000815 	stw	r20,32(sp)
    3a38:	20800417 	ldw	r2,16(r4)
    3a3c:	2d000417 	ldw	r20,16(r5)
    3a40:	dcc00715 	stw	r19,28(sp)
    3a44:	dfc00d15 	stw	ra,52(sp)
    3a48:	df000c15 	stw	fp,48(sp)
    3a4c:	ddc00b15 	stw	r23,44(sp)
    3a50:	dd800a15 	stw	r22,40(sp)
    3a54:	dd400915 	stw	r21,36(sp)
    3a58:	dc800615 	stw	r18,24(sp)
    3a5c:	dc400515 	stw	r17,20(sp)
    3a60:	dc000415 	stw	r16,16(sp)
    3a64:	d9400015 	stw	r5,0(sp)
    3a68:	2027883a 	mov	r19,r4
    3a6c:	15007d16 	blt	r2,r20,3c64 <quorem+0x234>
    3a70:	a0800104 	addi	r2,r20,4
    3a74:	1085883a 	add	r2,r2,r2
    3a78:	1085883a 	add	r2,r2,r2
    3a7c:	28ad883a 	add	r22,r5,r2
    3a80:	2085883a 	add	r2,r4,r2
    3a84:	10800017 	ldw	r2,0(r2)
    3a88:	b1400017 	ldw	r5,0(r22)
    3a8c:	a53fffc4 	addi	r20,r20,-1
    3a90:	1009883a 	mov	r4,r2
    3a94:	29400044 	addi	r5,r5,1
    3a98:	d8800115 	stw	r2,4(sp)
    3a9c:	0000e340 	call	e34 <__udivsi3>
    3aa0:	1025883a 	mov	r18,r2
    3aa4:	d8800017 	ldw	r2,0(sp)
    3aa8:	9f000504 	addi	fp,r19,20
    3aac:	14000504 	addi	r16,r2,20
    3ab0:	90003626 	beq	r18,zero,3b8c <quorem+0x15c>
    3ab4:	802b883a 	mov	r21,r16
    3ab8:	e023883a 	mov	r17,fp
    3abc:	0007883a 	mov	r3,zero
    3ac0:	002f883a 	mov	r23,zero
    3ac4:	a9800017 	ldw	r6,0(r21)
    3ac8:	900b883a 	mov	r5,r18
    3acc:	d8c00315 	stw	r3,12(sp)
    3ad0:	313fffcc 	andi	r4,r6,65535
    3ad4:	d9800215 	stw	r6,8(sp)
    3ad8:	0000e440 	call	e44 <__mulsi3>
    3adc:	d9800217 	ldw	r6,8(sp)
    3ae0:	d8c00317 	ldw	r3,12(sp)
    3ae4:	900b883a 	mov	r5,r18
    3ae8:	3008d43a 	srli	r4,r6,16
    3aec:	1887883a 	add	r3,r3,r2
    3af0:	d8c00315 	stw	r3,12(sp)
    3af4:	0000e440 	call	e44 <__mulsi3>
    3af8:	89400017 	ldw	r5,0(r17)
    3afc:	d8c00317 	ldw	r3,12(sp)
    3b00:	ad400104 	addi	r21,r21,4
    3b04:	293fffcc 	andi	r4,r5,65535
    3b08:	1810d43a 	srli	r8,r3,16
    3b0c:	25c9883a 	add	r4,r4,r23
    3b10:	18ffffcc 	andi	r3,r3,65535
    3b14:	20c9c83a 	sub	r4,r4,r3
    3b18:	280cd43a 	srli	r6,r5,16
    3b1c:	4085883a 	add	r2,r8,r2
    3b20:	2007d43a 	srai	r3,r4,16
    3b24:	117fffcc 	andi	r5,r2,65535
    3b28:	314bc83a 	sub	r5,r6,r5
    3b2c:	28cb883a 	add	r5,r5,r3
    3b30:	8940008d 	sth	r5,2(r17)
    3b34:	8900000d 	sth	r4,0(r17)
    3b38:	1006d43a 	srli	r3,r2,16
    3b3c:	282fd43a 	srai	r23,r5,16
    3b40:	8c400104 	addi	r17,r17,4
    3b44:	b57fdf2e 	bgeu	r22,r21,3ac4 <quorem+0x94>
    3b48:	d8c00117 	ldw	r3,4(sp)
    3b4c:	18000f1e 	bne	r3,zero,3b8c <quorem+0x15c>
    3b50:	a0800144 	addi	r2,r20,5
    3b54:	1085883a 	add	r2,r2,r2
    3b58:	1085883a 	add	r2,r2,r2
    3b5c:	9887883a 	add	r3,r19,r2
    3b60:	18bfff04 	addi	r2,r3,-4
    3b64:	e080082e 	bgeu	fp,r2,3b88 <quorem+0x158>
    3b68:	18ffff17 	ldw	r3,-4(r3)
    3b6c:	18000326 	beq	r3,zero,3b7c <quorem+0x14c>
    3b70:	00000506 	br	3b88 <quorem+0x158>
    3b74:	10c00017 	ldw	r3,0(r2)
    3b78:	1800031e 	bne	r3,zero,3b88 <quorem+0x158>
    3b7c:	10bfff04 	addi	r2,r2,-4
    3b80:	a53fffc4 	addi	r20,r20,-1
    3b84:	e0bffb36 	bltu	fp,r2,3b74 <quorem+0x144>
    3b88:	9d000415 	stw	r20,16(r19)
    3b8c:	d9400017 	ldw	r5,0(sp)
    3b90:	9809883a 	mov	r4,r19
    3b94:	00070300 	call	7030 <__mcmp>
    3b98:	10002516 	blt	r2,zero,3c30 <quorem+0x200>
    3b9c:	94800044 	addi	r18,r18,1
    3ba0:	e007883a 	mov	r3,fp
    3ba4:	000d883a 	mov	r6,zero
    3ba8:	18800017 	ldw	r2,0(r3)
    3bac:	82000017 	ldw	r8,0(r16)
    3bb0:	84000104 	addi	r16,r16,4
    3bb4:	11ffffcc 	andi	r7,r2,65535
    3bb8:	413fffcc 	andi	r4,r8,65535
    3bbc:	398d883a 	add	r6,r7,r6
    3bc0:	310fc83a 	sub	r7,r6,r4
    3bc4:	4010d43a 	srli	r8,r8,16
    3bc8:	100cd43a 	srli	r6,r2,16
    3bcc:	3809d43a 	srai	r4,r7,16
    3bd0:	19c0000d 	sth	r7,0(r3)
    3bd4:	320dc83a 	sub	r6,r6,r8
    3bd8:	310d883a 	add	r6,r6,r4
    3bdc:	1980008d 	sth	r6,2(r3)
    3be0:	300dd43a 	srai	r6,r6,16
    3be4:	18c00104 	addi	r3,r3,4
    3be8:	b43fef2e 	bgeu	r22,r16,3ba8 <quorem+0x178>
    3bec:	a0800144 	addi	r2,r20,5
    3bf0:	1085883a 	add	r2,r2,r2
    3bf4:	1085883a 	add	r2,r2,r2
    3bf8:	9885883a 	add	r2,r19,r2
    3bfc:	10c00017 	ldw	r3,0(r2)
    3c00:	18000b1e 	bne	r3,zero,3c30 <quorem+0x200>
    3c04:	10ffff04 	addi	r3,r2,-4
    3c08:	e0c0082e 	bgeu	fp,r3,3c2c <quorem+0x1fc>
    3c0c:	10bfff17 	ldw	r2,-4(r2)
    3c10:	10000326 	beq	r2,zero,3c20 <quorem+0x1f0>
    3c14:	00000506 	br	3c2c <quorem+0x1fc>
    3c18:	18800017 	ldw	r2,0(r3)
    3c1c:	1000031e 	bne	r2,zero,3c2c <quorem+0x1fc>
    3c20:	18ffff04 	addi	r3,r3,-4
    3c24:	a53fffc4 	addi	r20,r20,-1
    3c28:	e0fffb36 	bltu	fp,r3,3c18 <quorem+0x1e8>
    3c2c:	9d000415 	stw	r20,16(r19)
    3c30:	9005883a 	mov	r2,r18
    3c34:	dfc00d17 	ldw	ra,52(sp)
    3c38:	df000c17 	ldw	fp,48(sp)
    3c3c:	ddc00b17 	ldw	r23,44(sp)
    3c40:	dd800a17 	ldw	r22,40(sp)
    3c44:	dd400917 	ldw	r21,36(sp)
    3c48:	dd000817 	ldw	r20,32(sp)
    3c4c:	dcc00717 	ldw	r19,28(sp)
    3c50:	dc800617 	ldw	r18,24(sp)
    3c54:	dc400517 	ldw	r17,20(sp)
    3c58:	dc000417 	ldw	r16,16(sp)
    3c5c:	dec00e04 	addi	sp,sp,56
    3c60:	f800283a 	ret
    3c64:	0005883a 	mov	r2,zero
    3c68:	003ff206 	br	3c34 <quorem+0x204>

00003c6c <_dtoa_r>:
    3c6c:	20801017 	ldw	r2,64(r4)
    3c70:	deffdf04 	addi	sp,sp,-132
    3c74:	dcc01a15 	stw	r19,104(sp)
    3c78:	dc801915 	stw	r18,100(sp)
    3c7c:	dc401815 	stw	r17,96(sp)
    3c80:	dc001715 	stw	r16,92(sp)
    3c84:	dfc02015 	stw	ra,128(sp)
    3c88:	df001f15 	stw	fp,124(sp)
    3c8c:	ddc01e15 	stw	r23,120(sp)
    3c90:	dd801d15 	stw	r22,116(sp)
    3c94:	dd401c15 	stw	r21,112(sp)
    3c98:	dd001b15 	stw	r20,108(sp)
    3c9c:	d9400315 	stw	r5,12(sp)
    3ca0:	d9c00415 	stw	r7,16(sp)
    3ca4:	2021883a 	mov	r16,r4
    3ca8:	3025883a 	mov	r18,r6
    3cac:	dcc02317 	ldw	r19,140(sp)
    3cb0:	3023883a 	mov	r17,r6
    3cb4:	10000826 	beq	r2,zero,3cd8 <_dtoa_r+0x6c>
    3cb8:	20c01117 	ldw	r3,68(r4)
    3cbc:	01800044 	movi	r6,1
    3cc0:	100b883a 	mov	r5,r2
    3cc4:	30cc983a 	sll	r6,r6,r3
    3cc8:	10c00115 	stw	r3,4(r2)
    3ccc:	11800215 	stw	r6,8(r2)
    3cd0:	000678c0 	call	678c <_Bfree>
    3cd4:	80001015 	stw	zero,64(r16)
    3cd8:	90002f16 	blt	r18,zero,3d98 <_dtoa_r+0x12c>
    3cdc:	98000015 	stw	zero,0(r19)
    3ce0:	90dffc2c 	andhi	r3,r18,32752
    3ce4:	009ffc34 	movhi	r2,32752
    3ce8:	18801c26 	beq	r3,r2,3d5c <_dtoa_r+0xf0>
    3cec:	d9000317 	ldw	r4,12(sp)
    3cf0:	880b883a 	mov	r5,r17
    3cf4:	000d883a 	mov	r6,zero
    3cf8:	000f883a 	mov	r7,zero
    3cfc:	00098e00 	call	98e0 <__eqdf2>
    3d00:	10002c1e 	bne	r2,zero,3db4 <_dtoa_r+0x148>
    3d04:	d9002217 	ldw	r4,136(sp)
    3d08:	d9c02417 	ldw	r7,144(sp)
    3d0c:	00800044 	movi	r2,1
    3d10:	20800015 	stw	r2,0(r4)
    3d14:	38019426 	beq	r7,zero,4368 <_dtoa_r+0x6fc>
    3d18:	00800074 	movhi	r2,1
    3d1c:	10b49244 	addi	r2,r2,-11703
    3d20:	38800015 	stw	r2,0(r7)
    3d24:	15ffffc4 	addi	r23,r2,-1
    3d28:	b805883a 	mov	r2,r23
    3d2c:	dfc02017 	ldw	ra,128(sp)
    3d30:	df001f17 	ldw	fp,124(sp)
    3d34:	ddc01e17 	ldw	r23,120(sp)
    3d38:	dd801d17 	ldw	r22,116(sp)
    3d3c:	dd401c17 	ldw	r21,112(sp)
    3d40:	dd001b17 	ldw	r20,108(sp)
    3d44:	dcc01a17 	ldw	r19,104(sp)
    3d48:	dc801917 	ldw	r18,100(sp)
    3d4c:	dc401817 	ldw	r17,96(sp)
    3d50:	dc001717 	ldw	r16,92(sp)
    3d54:	dec02104 	addi	sp,sp,132
    3d58:	f800283a 	ret
    3d5c:	d8c02217 	ldw	r3,136(sp)
    3d60:	d9000317 	ldw	r4,12(sp)
    3d64:	0089c3c4 	movi	r2,9999
    3d68:	18800015 	stw	r2,0(r3)
    3d6c:	20016c26 	beq	r4,zero,4320 <_dtoa_r+0x6b4>
    3d70:	05c00074 	movhi	r23,1
    3d74:	bdf49e04 	addi	r23,r23,-11656
    3d78:	d9c02417 	ldw	r7,144(sp)
    3d7c:	383fea26 	beq	r7,zero,3d28 <_dtoa_r+0xbc>
    3d80:	b88000c7 	ldb	r2,3(r23)
    3d84:	10016d1e 	bne	r2,zero,433c <_dtoa_r+0x6d0>
    3d88:	b88000c4 	addi	r2,r23,3
    3d8c:	d8c02417 	ldw	r3,144(sp)
    3d90:	18800015 	stw	r2,0(r3)
    3d94:	003fe406 	br	3d28 <_dtoa_r+0xbc>
    3d98:	04600034 	movhi	r17,32768
    3d9c:	8c7fffc4 	addi	r17,r17,-1
    3da0:	9462703a 	and	r17,r18,r17
    3da4:	00800044 	movi	r2,1
    3da8:	98800015 	stw	r2,0(r19)
    3dac:	8825883a 	mov	r18,r17
    3db0:	003fcb06 	br	3ce0 <_dtoa_r+0x74>
    3db4:	d9400317 	ldw	r5,12(sp)
    3db8:	9028d53a 	srli	r20,r18,20
    3dbc:	d8800204 	addi	r2,sp,8
    3dc0:	d8800015 	stw	r2,0(sp)
    3dc4:	8009883a 	mov	r4,r16
    3dc8:	880d883a 	mov	r6,r17
    3dcc:	d9c00104 	addi	r7,sp,4
    3dd0:	00073d80 	call	73d8 <__d2b>
    3dd4:	a501ffcc 	andi	r20,r20,2047
    3dd8:	1039883a 	mov	fp,r2
    3ddc:	a001591e 	bne	r20,zero,4344 <_dtoa_r+0x6d8>
    3de0:	dd400217 	ldw	r21,8(sp)
    3de4:	dd000117 	ldw	r20,4(sp)
    3de8:	00befbc4 	movi	r2,-1041
    3dec:	ad29883a 	add	r20,r21,r20
    3df0:	a082d216 	blt	r20,r2,493c <_dtoa_r+0xcd0>
    3df4:	d8c00317 	ldw	r3,12(sp)
    3df8:	013f0384 	movi	r4,-1010
    3dfc:	2509c83a 	sub	r4,r4,r20
    3e00:	a0810484 	addi	r2,r20,1042
    3e04:	9124983a 	sll	r18,r18,r4
    3e08:	1884d83a 	srl	r2,r3,r2
    3e0c:	9088b03a 	or	r4,r18,r2
    3e10:	0009c640 	call	9c64 <__floatunsidf>
    3e14:	1009883a 	mov	r4,r2
    3e18:	017f8434 	movhi	r5,65040
    3e1c:	00800044 	movi	r2,1
    3e20:	194b883a 	add	r5,r3,r5
    3e24:	a53fffc4 	addi	r20,r20,-1
    3e28:	d8800f15 	stw	r2,60(sp)
    3e2c:	000d883a 	mov	r6,zero
    3e30:	01cffe34 	movhi	r7,16376
    3e34:	00093e80 	call	93e8 <__subdf3>
    3e38:	1009883a 	mov	r4,r2
    3e3c:	180b883a 	mov	r5,r3
    3e40:	0198dbf4 	movhi	r6,25455
    3e44:	3190d844 	addi	r6,r6,17249
    3e48:	01cff4f4 	movhi	r7,16339
    3e4c:	39e1e9c4 	addi	r7,r7,-30809
    3e50:	00094480 	call	9448 <__muldf3>
    3e54:	180b883a 	mov	r5,r3
    3e58:	01a2d874 	movhi	r6,35681
    3e5c:	31b22cc4 	addi	r6,r6,-14157
    3e60:	01cff1f4 	movhi	r7,16327
    3e64:	39e28a04 	addi	r7,r7,-30168
    3e68:	1009883a 	mov	r4,r2
    3e6c:	00093940 	call	9394 <__adddf3>
    3e70:	a009883a 	mov	r4,r20
    3e74:	1027883a 	mov	r19,r2
    3e78:	1825883a 	mov	r18,r3
    3e7c:	0009abc0 	call	9abc <__floatsidf>
    3e80:	1009883a 	mov	r4,r2
    3e84:	180b883a 	mov	r5,r3
    3e88:	019427f4 	movhi	r6,20639
    3e8c:	319e7ec4 	addi	r6,r6,31227
    3e90:	01cff4f4 	movhi	r7,16339
    3e94:	39d104c4 	addi	r7,r7,17427
    3e98:	00094480 	call	9448 <__muldf3>
    3e9c:	9809883a 	mov	r4,r19
    3ea0:	900b883a 	mov	r5,r18
    3ea4:	100d883a 	mov	r6,r2
    3ea8:	180f883a 	mov	r7,r3
    3eac:	00093940 	call	9394 <__adddf3>
    3eb0:	1009883a 	mov	r4,r2
    3eb4:	180b883a 	mov	r5,r3
    3eb8:	1027883a 	mov	r19,r2
    3ebc:	1825883a 	mov	r18,r3
    3ec0:	0009b900 	call	9b90 <__fixdfsi>
    3ec4:	9809883a 	mov	r4,r19
    3ec8:	900b883a 	mov	r5,r18
    3ecc:	000d883a 	mov	r6,zero
    3ed0:	000f883a 	mov	r7,zero
    3ed4:	d8800615 	stw	r2,24(sp)
    3ed8:	0009a600 	call	9a60 <__ltdf2>
    3edc:	10027e16 	blt	r2,zero,48d8 <_dtoa_r+0xc6c>
    3ee0:	d8c00617 	ldw	r3,24(sp)
    3ee4:	00800584 	movi	r2,22
    3ee8:	10c26c36 	bltu	r2,r3,489c <_dtoa_r+0xc30>
    3eec:	180490fa 	slli	r2,r3,3
    3ef0:	00c00074 	movhi	r3,1
    3ef4:	18f4c304 	addi	r3,r3,-11508
    3ef8:	d9800317 	ldw	r6,12(sp)
    3efc:	1885883a 	add	r2,r3,r2
    3f00:	11000017 	ldw	r4,0(r2)
    3f04:	11400117 	ldw	r5,4(r2)
    3f08:	880f883a 	mov	r7,r17
    3f0c:	00099980 	call	9998 <__gtdf2>
    3f10:	00828f0e 	bge	zero,r2,4950 <_dtoa_r+0xce4>
    3f14:	d8800617 	ldw	r2,24(sp)
    3f18:	d8000d15 	stw	zero,52(sp)
    3f1c:	10bfffc4 	addi	r2,r2,-1
    3f20:	d8800615 	stw	r2,24(sp)
    3f24:	ad29c83a 	sub	r20,r21,r20
    3f28:	a53fffc4 	addi	r20,r20,-1
    3f2c:	a0026616 	blt	r20,zero,48c8 <_dtoa_r+0xc5c>
    3f30:	dd000715 	stw	r20,28(sp)
    3f34:	d8000815 	stw	zero,32(sp)
    3f38:	d8800617 	ldw	r2,24(sp)
    3f3c:	10025a16 	blt	r2,zero,48a8 <_dtoa_r+0xc3c>
    3f40:	d8c00717 	ldw	r3,28(sp)
    3f44:	d8800b15 	stw	r2,44(sp)
    3f48:	d8000a15 	stw	zero,40(sp)
    3f4c:	1887883a 	add	r3,r3,r2
    3f50:	d8c00715 	stw	r3,28(sp)
    3f54:	d9c00417 	ldw	r7,16(sp)
    3f58:	00800244 	movi	r2,9
    3f5c:	11c10536 	bltu	r2,r7,4374 <_dtoa_r+0x708>
    3f60:	00800144 	movi	r2,5
    3f64:	11c4c60e 	bge	r2,r7,5280 <_dtoa_r+0x1614>
    3f68:	39ffff04 	addi	r7,r7,-4
    3f6c:	d9c00415 	stw	r7,16(sp)
    3f70:	0027883a 	mov	r19,zero
    3f74:	d9c00417 	ldw	r7,16(sp)
    3f78:	008000c4 	movi	r2,3
    3f7c:	3883a226 	beq	r7,r2,4e08 <_dtoa_r+0x119c>
    3f80:	11c2bc16 	blt	r2,r7,4a74 <_dtoa_r+0xe08>
    3f84:	00800084 	movi	r2,2
    3f88:	3880fb1e 	bne	r7,r2,4378 <_dtoa_r+0x70c>
    3f8c:	d8000c15 	stw	zero,48(sp)
    3f90:	d9002117 	ldw	r4,132(sp)
    3f94:	0103ae0e 	bge	zero,r4,4e50 <_dtoa_r+0x11e4>
    3f98:	2025883a 	mov	r18,r4
    3f9c:	d9000e15 	stw	r4,56(sp)
    3fa0:	d9000915 	stw	r4,36(sp)
    3fa4:	80001115 	stw	zero,68(r16)
    3fa8:	008005c4 	movi	r2,23
    3fac:	1484b22e 	bgeu	r2,r18,5278 <_dtoa_r+0x160c>
    3fb0:	00c00044 	movi	r3,1
    3fb4:	00800104 	movi	r2,4
    3fb8:	1085883a 	add	r2,r2,r2
    3fbc:	11000504 	addi	r4,r2,20
    3fc0:	180b883a 	mov	r5,r3
    3fc4:	18c00044 	addi	r3,r3,1
    3fc8:	913ffb2e 	bgeu	r18,r4,3fb8 <_dtoa_r+0x34c>
    3fcc:	81401115 	stw	r5,68(r16)
    3fd0:	8009883a 	mov	r4,r16
    3fd4:	00066e40 	call	66e4 <_Balloc>
    3fd8:	102f883a 	mov	r23,r2
    3fdc:	80801015 	stw	r2,64(r16)
    3fe0:	00800384 	movi	r2,14
    3fe4:	1480f036 	bltu	r2,r18,43a8 <_dtoa_r+0x73c>
    3fe8:	9800ef26 	beq	r19,zero,43a8 <_dtoa_r+0x73c>
    3fec:	d8800617 	ldw	r2,24(sp)
    3ff0:	00839c0e 	bge	zero,r2,4e64 <_dtoa_r+0x11f8>
    3ff4:	d8c00617 	ldw	r3,24(sp)
    3ff8:	108003cc 	andi	r2,r2,15
    3ffc:	100490fa 	slli	r2,r2,3
    4000:	182bd13a 	srai	r21,r3,4
    4004:	00c00074 	movhi	r3,1
    4008:	18f4c304 	addi	r3,r3,-11508
    400c:	1885883a 	add	r2,r3,r2
    4010:	a8c0040c 	andi	r3,r21,16
    4014:	12800017 	ldw	r10,0(r2)
    4018:	15800117 	ldw	r22,4(r2)
    401c:	18038726 	beq	r3,zero,4e3c <_dtoa_r+0x11d0>
    4020:	00800074 	movhi	r2,1
    4024:	10b4b904 	addi	r2,r2,-11548
    4028:	11800817 	ldw	r6,32(r2)
    402c:	11c00917 	ldw	r7,36(r2)
    4030:	d9000317 	ldw	r4,12(sp)
    4034:	880b883a 	mov	r5,r17
    4038:	da801515 	stw	r10,84(sp)
    403c:	000972c0 	call	972c <__divdf3>
    4040:	da801517 	ldw	r10,84(sp)
    4044:	d8801015 	stw	r2,64(sp)
    4048:	1829883a 	mov	r20,r3
    404c:	ad4003cc 	andi	r21,r21,15
    4050:	048000c4 	movi	r18,3
    4054:	a8001126 	beq	r21,zero,409c <_dtoa_r+0x430>
    4058:	04c00074 	movhi	r19,1
    405c:	9cf4b904 	addi	r19,r19,-11548
    4060:	5005883a 	mov	r2,r10
    4064:	b007883a 	mov	r3,r22
    4068:	a980004c 	andi	r6,r21,1
    406c:	1009883a 	mov	r4,r2
    4070:	a82bd07a 	srai	r21,r21,1
    4074:	180b883a 	mov	r5,r3
    4078:	30000426 	beq	r6,zero,408c <_dtoa_r+0x420>
    407c:	99800017 	ldw	r6,0(r19)
    4080:	99c00117 	ldw	r7,4(r19)
    4084:	94800044 	addi	r18,r18,1
    4088:	00094480 	call	9448 <__muldf3>
    408c:	9cc00204 	addi	r19,r19,8
    4090:	a83ff51e 	bne	r21,zero,4068 <_dtoa_r+0x3fc>
    4094:	1015883a 	mov	r10,r2
    4098:	182d883a 	mov	r22,r3
    409c:	d9001017 	ldw	r4,64(sp)
    40a0:	a00b883a 	mov	r5,r20
    40a4:	500d883a 	mov	r6,r10
    40a8:	b00f883a 	mov	r7,r22
    40ac:	000972c0 	call	972c <__divdf3>
    40b0:	1027883a 	mov	r19,r2
    40b4:	1829883a 	mov	r20,r3
    40b8:	d8c00d17 	ldw	r3,52(sp)
    40bc:	18000626 	beq	r3,zero,40d8 <_dtoa_r+0x46c>
    40c0:	9809883a 	mov	r4,r19
    40c4:	a00b883a 	mov	r5,r20
    40c8:	000d883a 	mov	r6,zero
    40cc:	01cffc34 	movhi	r7,16368
    40d0:	0009a600 	call	9a60 <__ltdf2>
    40d4:	10040e16 	blt	r2,zero,5110 <_dtoa_r+0x14a4>
    40d8:	9009883a 	mov	r4,r18
    40dc:	0009abc0 	call	9abc <__floatsidf>
    40e0:	1009883a 	mov	r4,r2
    40e4:	180b883a 	mov	r5,r3
    40e8:	980d883a 	mov	r6,r19
    40ec:	a00f883a 	mov	r7,r20
    40f0:	00094480 	call	9448 <__muldf3>
    40f4:	1009883a 	mov	r4,r2
    40f8:	180b883a 	mov	r5,r3
    40fc:	000d883a 	mov	r6,zero
    4100:	01d00734 	movhi	r7,16412
    4104:	00093940 	call	9394 <__adddf3>
    4108:	057f3034 	movhi	r21,64704
    410c:	1d6b883a 	add	r21,r3,r21
    4110:	d8c00917 	ldw	r3,36(sp)
    4114:	1025883a 	mov	r18,r2
    4118:	18031f26 	beq	r3,zero,4d98 <_dtoa_r+0x112c>
    411c:	d8800617 	ldw	r2,24(sp)
    4120:	dac00917 	ldw	r11,36(sp)
    4124:	d8801315 	stw	r2,76(sp)
    4128:	d8c00c17 	ldw	r3,48(sp)
    412c:	18039026 	beq	r3,zero,4f70 <_dtoa_r+0x1304>
    4130:	58bfffc4 	addi	r2,r11,-1
    4134:	100490fa 	slli	r2,r2,3
    4138:	00c00074 	movhi	r3,1
    413c:	18f4c304 	addi	r3,r3,-11508
    4140:	0009883a 	mov	r4,zero
    4144:	1885883a 	add	r2,r3,r2
    4148:	11800017 	ldw	r6,0(r2)
    414c:	11c00117 	ldw	r7,4(r2)
    4150:	014ff834 	movhi	r5,16352
    4154:	dac01615 	stw	r11,88(sp)
    4158:	000972c0 	call	972c <__divdf3>
    415c:	900d883a 	mov	r6,r18
    4160:	a80f883a 	mov	r7,r21
    4164:	1009883a 	mov	r4,r2
    4168:	180b883a 	mov	r5,r3
    416c:	00093e80 	call	93e8 <__subdf3>
    4170:	a00b883a 	mov	r5,r20
    4174:	9809883a 	mov	r4,r19
    4178:	182b883a 	mov	r21,r3
    417c:	d8801015 	stw	r2,64(sp)
    4180:	0009b900 	call	9b90 <__fixdfsi>
    4184:	1009883a 	mov	r4,r2
    4188:	d8801515 	stw	r2,84(sp)
    418c:	0009abc0 	call	9abc <__floatsidf>
    4190:	9809883a 	mov	r4,r19
    4194:	a00b883a 	mov	r5,r20
    4198:	100d883a 	mov	r6,r2
    419c:	180f883a 	mov	r7,r3
    41a0:	00093e80 	call	93e8 <__subdf3>
    41a4:	da401517 	ldw	r9,84(sp)
    41a8:	d9001017 	ldw	r4,64(sp)
    41ac:	a80b883a 	mov	r5,r21
    41b0:	4d000c04 	addi	r20,r9,48
    41b4:	bd000005 	stb	r20,0(r23)
    41b8:	100d883a 	mov	r6,r2
    41bc:	180f883a 	mov	r7,r3
    41c0:	bd800044 	addi	r22,r23,1
    41c4:	1025883a 	mov	r18,r2
    41c8:	1827883a 	mov	r19,r3
    41cc:	00099980 	call	9998 <__gtdf2>
    41d0:	00842216 	blt	zero,r2,525c <_dtoa_r+0x15f0>
    41d4:	0009883a 	mov	r4,zero
    41d8:	014ffc34 	movhi	r5,16368
    41dc:	900d883a 	mov	r6,r18
    41e0:	980f883a 	mov	r7,r19
    41e4:	00093e80 	call	93e8 <__subdf3>
    41e8:	d9001017 	ldw	r4,64(sp)
    41ec:	a80b883a 	mov	r5,r21
    41f0:	100d883a 	mov	r6,r2
    41f4:	180f883a 	mov	r7,r3
    41f8:	00099980 	call	9998 <__gtdf2>
    41fc:	dac01617 	ldw	r11,88(sp)
    4200:	00841316 	blt	zero,r2,5250 <_dtoa_r+0x15e4>
    4204:	00800044 	movi	r2,1
    4208:	12c0670e 	bge	r2,r11,43a8 <_dtoa_r+0x73c>
    420c:	bad7883a 	add	r11,r23,r11
    4210:	df001115 	stw	fp,68(sp)
    4214:	dc401215 	stw	r17,72(sp)
    4218:	5839883a 	mov	fp,r11
    421c:	dc401017 	ldw	r17,64(sp)
    4220:	00000806 	br	4244 <_dtoa_r+0x5d8>
    4224:	00093e80 	call	93e8 <__subdf3>
    4228:	1009883a 	mov	r4,r2
    422c:	180b883a 	mov	r5,r3
    4230:	880d883a 	mov	r6,r17
    4234:	a80f883a 	mov	r7,r21
    4238:	0009a600 	call	9a60 <__ltdf2>
    423c:	1003ee16 	blt	r2,zero,51f8 <_dtoa_r+0x158c>
    4240:	b703f126 	beq	r22,fp,5208 <_dtoa_r+0x159c>
    4244:	8809883a 	mov	r4,r17
    4248:	a80b883a 	mov	r5,r21
    424c:	000d883a 	mov	r6,zero
    4250:	01d00934 	movhi	r7,16420
    4254:	00094480 	call	9448 <__muldf3>
    4258:	000d883a 	mov	r6,zero
    425c:	01d00934 	movhi	r7,16420
    4260:	9009883a 	mov	r4,r18
    4264:	980b883a 	mov	r5,r19
    4268:	1023883a 	mov	r17,r2
    426c:	182b883a 	mov	r21,r3
    4270:	00094480 	call	9448 <__muldf3>
    4274:	180b883a 	mov	r5,r3
    4278:	1009883a 	mov	r4,r2
    427c:	1825883a 	mov	r18,r3
    4280:	1027883a 	mov	r19,r2
    4284:	0009b900 	call	9b90 <__fixdfsi>
    4288:	1009883a 	mov	r4,r2
    428c:	1029883a 	mov	r20,r2
    4290:	0009abc0 	call	9abc <__floatsidf>
    4294:	9809883a 	mov	r4,r19
    4298:	900b883a 	mov	r5,r18
    429c:	100d883a 	mov	r6,r2
    42a0:	180f883a 	mov	r7,r3
    42a4:	00093e80 	call	93e8 <__subdf3>
    42a8:	a5000c04 	addi	r20,r20,48
    42ac:	b5000005 	stb	r20,0(r22)
    42b0:	1009883a 	mov	r4,r2
    42b4:	180b883a 	mov	r5,r3
    42b8:	880d883a 	mov	r6,r17
    42bc:	a80f883a 	mov	r7,r21
    42c0:	1025883a 	mov	r18,r2
    42c4:	1827883a 	mov	r19,r3
    42c8:	0009a600 	call	9a60 <__ltdf2>
    42cc:	b5800044 	addi	r22,r22,1
    42d0:	0009883a 	mov	r4,zero
    42d4:	014ffc34 	movhi	r5,16368
    42d8:	900d883a 	mov	r6,r18
    42dc:	980f883a 	mov	r7,r19
    42e0:	103fd00e 	bge	r2,zero,4224 <_dtoa_r+0x5b8>
    42e4:	d9001317 	ldw	r4,76(sp)
    42e8:	df001117 	ldw	fp,68(sp)
    42ec:	d9000615 	stw	r4,24(sp)
    42f0:	8009883a 	mov	r4,r16
    42f4:	e00b883a 	mov	r5,fp
    42f8:	000678c0 	call	678c <_Bfree>
    42fc:	d9c00617 	ldw	r7,24(sp)
    4300:	d8c02217 	ldw	r3,136(sp)
    4304:	d9002417 	ldw	r4,144(sp)
    4308:	b0000005 	stb	zero,0(r22)
    430c:	38800044 	addi	r2,r7,1
    4310:	18800015 	stw	r2,0(r3)
    4314:	203e8426 	beq	r4,zero,3d28 <_dtoa_r+0xbc>
    4318:	25800015 	stw	r22,0(r4)
    431c:	003e8206 	br	3d28 <_dtoa_r+0xbc>
    4320:	00800434 	movhi	r2,16
    4324:	10bfffc4 	addi	r2,r2,-1
    4328:	90a4703a 	and	r18,r18,r2
    432c:	903e901e 	bne	r18,zero,3d70 <_dtoa_r+0x104>
    4330:	05c00074 	movhi	r23,1
    4334:	bdf49b04 	addi	r23,r23,-11668
    4338:	003e8f06 	br	3d78 <_dtoa_r+0x10c>
    433c:	b8800204 	addi	r2,r23,8
    4340:	003e9206 	br	3d8c <_dtoa_r+0x120>
    4344:	01400434 	movhi	r5,16
    4348:	297fffc4 	addi	r5,r5,-1
    434c:	894a703a 	and	r5,r17,r5
    4350:	d9000317 	ldw	r4,12(sp)
    4354:	294ffc34 	orhi	r5,r5,16368
    4358:	a53f0044 	addi	r20,r20,-1023
    435c:	dd400217 	ldw	r21,8(sp)
    4360:	d8000f15 	stw	zero,60(sp)
    4364:	003eb106 	br	3e2c <_dtoa_r+0x1c0>
    4368:	05c00074 	movhi	r23,1
    436c:	bdf49204 	addi	r23,r23,-11704
    4370:	003e6d06 	br	3d28 <_dtoa_r+0xbc>
    4374:	d8000415 	stw	zero,16(sp)
    4378:	80001115 	stw	zero,68(r16)
    437c:	8009883a 	mov	r4,r16
    4380:	000b883a 	mov	r5,zero
    4384:	00066e40 	call	66e4 <_Balloc>
    4388:	01ffffc4 	movi	r7,-1
    438c:	102f883a 	mov	r23,r2
    4390:	80801015 	stw	r2,64(r16)
    4394:	00800044 	movi	r2,1
    4398:	d9c00915 	stw	r7,36(sp)
    439c:	d8002115 	stw	zero,132(sp)
    43a0:	d9c00e15 	stw	r7,56(sp)
    43a4:	d8800c15 	stw	r2,48(sp)
    43a8:	d8800117 	ldw	r2,4(sp)
    43ac:	10008b16 	blt	r2,zero,45dc <_dtoa_r+0x970>
    43b0:	d9000617 	ldw	r4,24(sp)
    43b4:	00c00384 	movi	r3,14
    43b8:	19008816 	blt	r3,r4,45dc <_dtoa_r+0x970>
    43bc:	200490fa 	slli	r2,r4,3
    43c0:	d9c02117 	ldw	r7,132(sp)
    43c4:	00c00074 	movhi	r3,1
    43c8:	18f4c304 	addi	r3,r3,-11508
    43cc:	1885883a 	add	r2,r3,r2
    43d0:	14800017 	ldw	r18,0(r2)
    43d4:	14c00117 	ldw	r19,4(r2)
    43d8:	3801c916 	blt	r7,zero,4b00 <_dtoa_r+0xe94>
    43dc:	d9000317 	ldw	r4,12(sp)
    43e0:	900d883a 	mov	r6,r18
    43e4:	980f883a 	mov	r7,r19
    43e8:	880b883a 	mov	r5,r17
    43ec:	000972c0 	call	972c <__divdf3>
    43f0:	180b883a 	mov	r5,r3
    43f4:	1009883a 	mov	r4,r2
    43f8:	0009b900 	call	9b90 <__fixdfsi>
    43fc:	1009883a 	mov	r4,r2
    4400:	102b883a 	mov	r21,r2
    4404:	0009abc0 	call	9abc <__floatsidf>
    4408:	1009883a 	mov	r4,r2
    440c:	180b883a 	mov	r5,r3
    4410:	900d883a 	mov	r6,r18
    4414:	980f883a 	mov	r7,r19
    4418:	00094480 	call	9448 <__muldf3>
    441c:	d9000317 	ldw	r4,12(sp)
    4420:	880b883a 	mov	r5,r17
    4424:	100d883a 	mov	r6,r2
    4428:	180f883a 	mov	r7,r3
    442c:	00093e80 	call	93e8 <__subdf3>
    4430:	d9c00917 	ldw	r7,36(sp)
    4434:	1009883a 	mov	r4,r2
    4438:	a8800c04 	addi	r2,r21,48
    443c:	b8800005 	stb	r2,0(r23)
    4440:	01800044 	movi	r6,1
    4444:	180b883a 	mov	r5,r3
    4448:	2005883a 	mov	r2,r4
    444c:	bd800044 	addi	r22,r23,1
    4450:	39803726 	beq	r7,r6,4530 <_dtoa_r+0x8c4>
    4454:	000d883a 	mov	r6,zero
    4458:	01d00934 	movhi	r7,16420
    445c:	00094480 	call	9448 <__muldf3>
    4460:	1009883a 	mov	r4,r2
    4464:	180b883a 	mov	r5,r3
    4468:	000d883a 	mov	r6,zero
    446c:	000f883a 	mov	r7,zero
    4470:	1029883a 	mov	r20,r2
    4474:	1823883a 	mov	r17,r3
    4478:	00098e00 	call	98e0 <__eqdf2>
    447c:	103f9c26 	beq	r2,zero,42f0 <_dtoa_r+0x684>
    4480:	dd400917 	ldw	r21,36(sp)
    4484:	dc000415 	stw	r16,16(sp)
    4488:	00000906 	br	44b0 <_dtoa_r+0x844>
    448c:	00094480 	call	9448 <__muldf3>
    4490:	1009883a 	mov	r4,r2
    4494:	180b883a 	mov	r5,r3
    4498:	000d883a 	mov	r6,zero
    449c:	000f883a 	mov	r7,zero
    44a0:	1029883a 	mov	r20,r2
    44a4:	1823883a 	mov	r17,r3
    44a8:	00098e00 	call	98e0 <__eqdf2>
    44ac:	10022926 	beq	r2,zero,4d54 <_dtoa_r+0x10e8>
    44b0:	900d883a 	mov	r6,r18
    44b4:	980f883a 	mov	r7,r19
    44b8:	a009883a 	mov	r4,r20
    44bc:	880b883a 	mov	r5,r17
    44c0:	000972c0 	call	972c <__divdf3>
    44c4:	180b883a 	mov	r5,r3
    44c8:	1009883a 	mov	r4,r2
    44cc:	0009b900 	call	9b90 <__fixdfsi>
    44d0:	1009883a 	mov	r4,r2
    44d4:	1021883a 	mov	r16,r2
    44d8:	0009abc0 	call	9abc <__floatsidf>
    44dc:	1009883a 	mov	r4,r2
    44e0:	180b883a 	mov	r5,r3
    44e4:	900d883a 	mov	r6,r18
    44e8:	980f883a 	mov	r7,r19
    44ec:	00094480 	call	9448 <__muldf3>
    44f0:	a009883a 	mov	r4,r20
    44f4:	880b883a 	mov	r5,r17
    44f8:	100d883a 	mov	r6,r2
    44fc:	180f883a 	mov	r7,r3
    4500:	00093e80 	call	93e8 <__subdf3>
    4504:	82400c04 	addi	r9,r16,48
    4508:	b2400005 	stb	r9,0(r22)
    450c:	b5800044 	addi	r22,r22,1
    4510:	b5d3c83a 	sub	r9,r22,r23
    4514:	000d883a 	mov	r6,zero
    4518:	01d00934 	movhi	r7,16420
    451c:	1009883a 	mov	r4,r2
    4520:	180b883a 	mov	r5,r3
    4524:	aa7fd91e 	bne	r21,r9,448c <_dtoa_r+0x820>
    4528:	802b883a 	mov	r21,r16
    452c:	dc000417 	ldw	r16,16(sp)
    4530:	1009883a 	mov	r4,r2
    4534:	180b883a 	mov	r5,r3
    4538:	100d883a 	mov	r6,r2
    453c:	180f883a 	mov	r7,r3
    4540:	00093940 	call	9394 <__adddf3>
    4544:	9009883a 	mov	r4,r18
    4548:	980b883a 	mov	r5,r19
    454c:	100d883a 	mov	r6,r2
    4550:	180f883a 	mov	r7,r3
    4554:	1023883a 	mov	r17,r2
    4558:	1829883a 	mov	r20,r3
    455c:	0009a600 	call	9a60 <__ltdf2>
    4560:	10000816 	blt	r2,zero,4584 <_dtoa_r+0x918>
    4564:	9009883a 	mov	r4,r18
    4568:	980b883a 	mov	r5,r19
    456c:	880d883a 	mov	r6,r17
    4570:	a00f883a 	mov	r7,r20
    4574:	00098e00 	call	98e0 <__eqdf2>
    4578:	103f5d1e 	bne	r2,zero,42f0 <_dtoa_r+0x684>
    457c:	ad40004c 	andi	r21,r21,1
    4580:	a83f5b26 	beq	r21,zero,42f0 <_dtoa_r+0x684>
    4584:	b53fffc3 	ldbu	r20,-1(r22)
    4588:	b0ffff84 	addi	r3,r22,-2
    458c:	01400e44 	movi	r5,57
    4590:	00000306 	br	45a0 <_dtoa_r+0x934>
    4594:	1d000003 	ldbu	r20,0(r3)
    4598:	102d883a 	mov	r22,r2
    459c:	18ffffc4 	addi	r3,r3,-1
    45a0:	a1003fcc 	andi	r4,r20,255
    45a4:	2100201c 	xori	r4,r4,128
    45a8:	213fe004 	addi	r4,r4,-128
    45ac:	b0bfffc4 	addi	r2,r22,-1
    45b0:	2142ca1e 	bne	r4,r5,50dc <_dtoa_r+0x1470>
    45b4:	b8bff71e 	bne	r23,r2,4594 <_dtoa_r+0x928>
    45b8:	d8800617 	ldw	r2,24(sp)
    45bc:	05000c44 	movi	r20,49
    45c0:	10800044 	addi	r2,r2,1
    45c4:	d8800615 	stw	r2,24(sp)
    45c8:	00800c04 	movi	r2,48
    45cc:	b8800005 	stb	r2,0(r23)
    45d0:	b805883a 	mov	r2,r23
    45d4:	15000005 	stb	r20,0(r2)
    45d8:	003f4506 	br	42f0 <_dtoa_r+0x684>
    45dc:	d9c00c17 	ldw	r7,48(sp)
    45e0:	3800c926 	beq	r7,zero,4908 <_dtoa_r+0xc9c>
    45e4:	d9c00417 	ldw	r7,16(sp)
    45e8:	00c00044 	movi	r3,1
    45ec:	19c16c0e 	bge	r3,r7,4ba0 <_dtoa_r+0xf34>
    45f0:	d9000917 	ldw	r4,36(sp)
    45f4:	d9c00a17 	ldw	r7,40(sp)
    45f8:	24ffffc4 	addi	r19,r4,-1
    45fc:	3cc20716 	blt	r7,r19,4e1c <_dtoa_r+0x11b0>
    4600:	3ce7c83a 	sub	r19,r7,r19
    4604:	d9c00917 	ldw	r7,36(sp)
    4608:	3802ae16 	blt	r7,zero,50c4 <_dtoa_r+0x1458>
    460c:	dc800817 	ldw	r18,32(sp)
    4610:	d8800917 	ldw	r2,36(sp)
    4614:	d8c00817 	ldw	r3,32(sp)
    4618:	d9c00717 	ldw	r7,28(sp)
    461c:	8009883a 	mov	r4,r16
    4620:	1887883a 	add	r3,r3,r2
    4624:	388f883a 	add	r7,r7,r2
    4628:	01400044 	movi	r5,1
    462c:	d8c00815 	stw	r3,32(sp)
    4630:	d9c00715 	stw	r7,28(sp)
    4634:	0006b140 	call	6b14 <__i2b>
    4638:	102b883a 	mov	r21,r2
    463c:	90000a26 	beq	r18,zero,4668 <_dtoa_r+0x9fc>
    4640:	d8800717 	ldw	r2,28(sp)
    4644:	0080080e 	bge	zero,r2,4668 <_dtoa_r+0x9fc>
    4648:	90812b16 	blt	r18,r2,4af8 <_dtoa_r+0xe8c>
    464c:	d8c00817 	ldw	r3,32(sp)
    4650:	d9000717 	ldw	r4,28(sp)
    4654:	90a5c83a 	sub	r18,r18,r2
    4658:	1887c83a 	sub	r3,r3,r2
    465c:	2089c83a 	sub	r4,r4,r2
    4660:	d8c00815 	stw	r3,32(sp)
    4664:	d9000715 	stw	r4,28(sp)
    4668:	d9c00a17 	ldw	r7,40(sp)
    466c:	01c0140e 	bge	zero,r7,46c0 <_dtoa_r+0xa54>
    4670:	d8800c17 	ldw	r2,48(sp)
    4674:	1001de26 	beq	r2,zero,4df0 <_dtoa_r+0x1184>
    4678:	04c00e0e 	bge	zero,r19,46b4 <_dtoa_r+0xa48>
    467c:	a80b883a 	mov	r5,r21
    4680:	8009883a 	mov	r4,r16
    4684:	980d883a 	mov	r6,r19
    4688:	0006da80 	call	6da8 <__pow5mult>
    468c:	e00d883a 	mov	r6,fp
    4690:	8009883a 	mov	r4,r16
    4694:	100b883a 	mov	r5,r2
    4698:	102b883a 	mov	r21,r2
    469c:	0006b500 	call	6b50 <__multiply>
    46a0:	1029883a 	mov	r20,r2
    46a4:	e00b883a 	mov	r5,fp
    46a8:	8009883a 	mov	r4,r16
    46ac:	000678c0 	call	678c <_Bfree>
    46b0:	a039883a 	mov	fp,r20
    46b4:	d8c00a17 	ldw	r3,40(sp)
    46b8:	1ccdc83a 	sub	r6,r3,r19
    46bc:	3001291e 	bne	r6,zero,4b64 <_dtoa_r+0xef8>
    46c0:	8009883a 	mov	r4,r16
    46c4:	01400044 	movi	r5,1
    46c8:	0006b140 	call	6b14 <__i2b>
    46cc:	d9000b17 	ldw	r4,44(sp)
    46d0:	1029883a 	mov	r20,r2
    46d4:	0100050e 	bge	zero,r4,46ec <_dtoa_r+0xa80>
    46d8:	d9800b17 	ldw	r6,44(sp)
    46dc:	8009883a 	mov	r4,r16
    46e0:	100b883a 	mov	r5,r2
    46e4:	0006da80 	call	6da8 <__pow5mult>
    46e8:	1029883a 	mov	r20,r2
    46ec:	d9c00417 	ldw	r7,16(sp)
    46f0:	00800044 	movi	r2,1
    46f4:	11c0f00e 	bge	r2,r7,4ab8 <_dtoa_r+0xe4c>
    46f8:	0023883a 	mov	r17,zero
    46fc:	d8800b17 	ldw	r2,44(sp)
    4700:	1001741e 	bne	r2,zero,4cd4 <_dtoa_r+0x1068>
    4704:	00800044 	movi	r2,1
    4708:	d8c00717 	ldw	r3,28(sp)
    470c:	10c5883a 	add	r2,r2,r3
    4710:	108007cc 	andi	r2,r2,31
    4714:	10008026 	beq	r2,zero,4918 <_dtoa_r+0xcac>
    4718:	01000804 	movi	r4,32
    471c:	2089c83a 	sub	r4,r4,r2
    4720:	00c00104 	movi	r3,4
    4724:	1902d00e 	bge	r3,r4,5268 <_dtoa_r+0x15fc>
    4728:	d9000817 	ldw	r4,32(sp)
    472c:	d9c00717 	ldw	r7,28(sp)
    4730:	00c00704 	movi	r3,28
    4734:	1885c83a 	sub	r2,r3,r2
    4738:	2089883a 	add	r4,r4,r2
    473c:	388f883a 	add	r7,r7,r2
    4740:	d9000815 	stw	r4,32(sp)
    4744:	90a5883a 	add	r18,r18,r2
    4748:	d9c00715 	stw	r7,28(sp)
    474c:	d9c00817 	ldw	r7,32(sp)
    4750:	01c0050e 	bge	zero,r7,4768 <_dtoa_r+0xafc>
    4754:	e00b883a 	mov	r5,fp
    4758:	8009883a 	mov	r4,r16
    475c:	380d883a 	mov	r6,r7
    4760:	0006ed40 	call	6ed4 <__lshift>
    4764:	1039883a 	mov	fp,r2
    4768:	d8800717 	ldw	r2,28(sp)
    476c:	0080050e 	bge	zero,r2,4784 <_dtoa_r+0xb18>
    4770:	a00b883a 	mov	r5,r20
    4774:	8009883a 	mov	r4,r16
    4778:	100d883a 	mov	r6,r2
    477c:	0006ed40 	call	6ed4 <__lshift>
    4780:	1029883a 	mov	r20,r2
    4784:	d8c00d17 	ldw	r3,52(sp)
    4788:	1801401e 	bne	r3,zero,4c8c <_dtoa_r+0x1020>
    478c:	d8800917 	ldw	r2,36(sp)
    4790:	00815a0e 	bge	zero,r2,4cfc <_dtoa_r+0x1090>
    4794:	d8c00c17 	ldw	r3,48(sp)
    4798:	18006f1e 	bne	r3,zero,4958 <_dtoa_r+0xcec>
    479c:	b823883a 	mov	r17,r23
    47a0:	dc800917 	ldw	r18,36(sp)
    47a4:	00000206 	br	47b0 <_dtoa_r+0xb44>
    47a8:	00067b40 	call	67b4 <__multadd>
    47ac:	1039883a 	mov	fp,r2
    47b0:	e009883a 	mov	r4,fp
    47b4:	a00b883a 	mov	r5,r20
    47b8:	0003a300 	call	3a30 <quorem>
    47bc:	10800c04 	addi	r2,r2,48
    47c0:	88800005 	stb	r2,0(r17)
    47c4:	8c400044 	addi	r17,r17,1
    47c8:	8dc7c83a 	sub	r3,r17,r23
    47cc:	8009883a 	mov	r4,r16
    47d0:	e00b883a 	mov	r5,fp
    47d4:	01800284 	movi	r6,10
    47d8:	000f883a 	mov	r7,zero
    47dc:	1cbff216 	blt	r3,r18,47a8 <_dtoa_r+0xb3c>
    47e0:	dd800917 	ldw	r22,36(sp)
    47e4:	1007883a 	mov	r3,r2
    47e8:	05823a0e 	bge	zero,r22,50d4 <_dtoa_r+0x1468>
    47ec:	bdad883a 	add	r22,r23,r22
    47f0:	0023883a 	mov	r17,zero
    47f4:	e00b883a 	mov	r5,fp
    47f8:	01800044 	movi	r6,1
    47fc:	8009883a 	mov	r4,r16
    4800:	d8c01515 	stw	r3,84(sp)
    4804:	0006ed40 	call	6ed4 <__lshift>
    4808:	1009883a 	mov	r4,r2
    480c:	a00b883a 	mov	r5,r20
    4810:	1039883a 	mov	fp,r2
    4814:	00070300 	call	7030 <__mcmp>
    4818:	d8c01517 	ldw	r3,84(sp)
    481c:	0080d60e 	bge	zero,r2,4b78 <_dtoa_r+0xf0c>
    4820:	b13fffc3 	ldbu	r4,-1(r22)
    4824:	b0ffff84 	addi	r3,r22,-2
    4828:	01800e44 	movi	r6,57
    482c:	00000306 	br	483c <_dtoa_r+0xbd0>
    4830:	19000003 	ldbu	r4,0(r3)
    4834:	102d883a 	mov	r22,r2
    4838:	18ffffc4 	addi	r3,r3,-1
    483c:	21403fcc 	andi	r5,r4,255
    4840:	2940201c 	xori	r5,r5,128
    4844:	297fe004 	addi	r5,r5,-128
    4848:	b0bfffc4 	addi	r2,r22,-1
    484c:	2981a71e 	bne	r5,r6,4eec <_dtoa_r+0x1280>
    4850:	b8bff71e 	bne	r23,r2,4830 <_dtoa_r+0xbc4>
    4854:	d8800617 	ldw	r2,24(sp)
    4858:	10800044 	addi	r2,r2,1
    485c:	d8800615 	stw	r2,24(sp)
    4860:	00800c44 	movi	r2,49
    4864:	b8800005 	stb	r2,0(r23)
    4868:	8009883a 	mov	r4,r16
    486c:	a00b883a 	mov	r5,r20
    4870:	000678c0 	call	678c <_Bfree>
    4874:	a83e9e26 	beq	r21,zero,42f0 <_dtoa_r+0x684>
    4878:	88000426 	beq	r17,zero,488c <_dtoa_r+0xc20>
    487c:	8d400326 	beq	r17,r21,488c <_dtoa_r+0xc20>
    4880:	8009883a 	mov	r4,r16
    4884:	880b883a 	mov	r5,r17
    4888:	000678c0 	call	678c <_Bfree>
    488c:	8009883a 	mov	r4,r16
    4890:	a80b883a 	mov	r5,r21
    4894:	000678c0 	call	678c <_Bfree>
    4898:	003e9506 	br	42f0 <_dtoa_r+0x684>
    489c:	00c00044 	movi	r3,1
    48a0:	d8c00d15 	stw	r3,52(sp)
    48a4:	003d9f06 	br	3f24 <_dtoa_r+0x2b8>
    48a8:	d9000817 	ldw	r4,32(sp)
    48ac:	d8800617 	ldw	r2,24(sp)
    48b0:	d8000b15 	stw	zero,44(sp)
    48b4:	2089c83a 	sub	r4,r4,r2
    48b8:	0087c83a 	sub	r3,zero,r2
    48bc:	d9000815 	stw	r4,32(sp)
    48c0:	d8c00a15 	stw	r3,40(sp)
    48c4:	003da306 	br	3f54 <_dtoa_r+0x2e8>
    48c8:	0529c83a 	sub	r20,zero,r20
    48cc:	dd000815 	stw	r20,32(sp)
    48d0:	d8000715 	stw	zero,28(sp)
    48d4:	003d9806 	br	3f38 <_dtoa_r+0x2cc>
    48d8:	d9000617 	ldw	r4,24(sp)
    48dc:	0009abc0 	call	9abc <__floatsidf>
    48e0:	1009883a 	mov	r4,r2
    48e4:	180b883a 	mov	r5,r3
    48e8:	980d883a 	mov	r6,r19
    48ec:	900f883a 	mov	r7,r18
    48f0:	000993c0 	call	993c <__nedf2>
    48f4:	103d7a26 	beq	r2,zero,3ee0 <_dtoa_r+0x274>
    48f8:	d8800617 	ldw	r2,24(sp)
    48fc:	10bfffc4 	addi	r2,r2,-1
    4900:	d8800615 	stw	r2,24(sp)
    4904:	003d7606 	br	3ee0 <_dtoa_r+0x274>
    4908:	dcc00a17 	ldw	r19,40(sp)
    490c:	dc800817 	ldw	r18,32(sp)
    4910:	002b883a 	mov	r21,zero
    4914:	003f4906 	br	463c <_dtoa_r+0x9d0>
    4918:	00800704 	movi	r2,28
    491c:	d8c00817 	ldw	r3,32(sp)
    4920:	d9000717 	ldw	r4,28(sp)
    4924:	90a5883a 	add	r18,r18,r2
    4928:	1887883a 	add	r3,r3,r2
    492c:	2089883a 	add	r4,r4,r2
    4930:	d8c00815 	stw	r3,32(sp)
    4934:	d9000715 	stw	r4,28(sp)
    4938:	003f8406 	br	474c <_dtoa_r+0xae0>
    493c:	d9c00317 	ldw	r7,12(sp)
    4940:	013efb84 	movi	r4,-1042
    4944:	2509c83a 	sub	r4,r4,r20
    4948:	3908983a 	sll	r4,r7,r4
    494c:	003d3006 	br	3e10 <_dtoa_r+0x1a4>
    4950:	d8000d15 	stw	zero,52(sp)
    4954:	003d7306 	br	3f24 <_dtoa_r+0x2b8>
    4958:	0480050e 	bge	zero,r18,4970 <_dtoa_r+0xd04>
    495c:	a80b883a 	mov	r5,r21
    4960:	8009883a 	mov	r4,r16
    4964:	900d883a 	mov	r6,r18
    4968:	0006ed40 	call	6ed4 <__lshift>
    496c:	102b883a 	mov	r21,r2
    4970:	8801611e 	bne	r17,zero,4ef8 <_dtoa_r+0x128c>
    4974:	a827883a 	mov	r19,r21
    4978:	d8c00317 	ldw	r3,12(sp)
    497c:	d9000917 	ldw	r4,36(sp)
    4980:	b8bfffc4 	addi	r2,r23,-1
    4984:	18c0004c 	andi	r3,r3,1
    4988:	1105883a 	add	r2,r2,r4
    498c:	b825883a 	mov	r18,r23
    4990:	d8800515 	stw	r2,20(sp)
    4994:	a823883a 	mov	r17,r21
    4998:	d8c00315 	stw	r3,12(sp)
    499c:	ddc00715 	stw	r23,28(sp)
    49a0:	e009883a 	mov	r4,fp
    49a4:	a00b883a 	mov	r5,r20
    49a8:	0003a300 	call	3a30 <quorem>
    49ac:	e009883a 	mov	r4,fp
    49b0:	880b883a 	mov	r5,r17
    49b4:	102d883a 	mov	r22,r2
    49b8:	00070300 	call	7030 <__mcmp>
    49bc:	980d883a 	mov	r6,r19
    49c0:	8009883a 	mov	r4,r16
    49c4:	a00b883a 	mov	r5,r20
    49c8:	102b883a 	mov	r21,r2
    49cc:	00070880 	call	7088 <__mdiff>
    49d0:	100d883a 	mov	r6,r2
    49d4:	10800317 	ldw	r2,12(r2)
    49d8:	b5c00c04 	addi	r23,r22,48
    49dc:	10008c26 	beq	r2,zero,4c10 <_dtoa_r+0xfa4>
    49e0:	8009883a 	mov	r4,r16
    49e4:	300b883a 	mov	r5,r6
    49e8:	000678c0 	call	678c <_Bfree>
    49ec:	00800044 	movi	r2,1
    49f0:	a8007116 	blt	r21,zero,4bb8 <_dtoa_r+0xf4c>
    49f4:	a800041e 	bne	r21,zero,4a08 <_dtoa_r+0xd9c>
    49f8:	d9c00417 	ldw	r7,16(sp)
    49fc:	3800021e 	bne	r7,zero,4a08 <_dtoa_r+0xd9c>
    4a00:	d8c00317 	ldw	r3,12(sp)
    4a04:	18006c26 	beq	r3,zero,4bb8 <_dtoa_r+0xf4c>
    4a08:	00814c16 	blt	zero,r2,4f3c <_dtoa_r+0x12d0>
    4a0c:	d8c00517 	ldw	r3,20(sp)
    4a10:	95400044 	addi	r21,r18,1
    4a14:	95c00005 	stb	r23,0(r18)
    4a18:	a82d883a 	mov	r22,r21
    4a1c:	90c14d26 	beq	r18,r3,4f54 <_dtoa_r+0x12e8>
    4a20:	e00b883a 	mov	r5,fp
    4a24:	8009883a 	mov	r4,r16
    4a28:	01800284 	movi	r6,10
    4a2c:	000f883a 	mov	r7,zero
    4a30:	00067b40 	call	67b4 <__multadd>
    4a34:	1039883a 	mov	fp,r2
    4a38:	8cc08b26 	beq	r17,r19,4c68 <_dtoa_r+0xffc>
    4a3c:	880b883a 	mov	r5,r17
    4a40:	01800284 	movi	r6,10
    4a44:	000f883a 	mov	r7,zero
    4a48:	8009883a 	mov	r4,r16
    4a4c:	00067b40 	call	67b4 <__multadd>
    4a50:	980b883a 	mov	r5,r19
    4a54:	8009883a 	mov	r4,r16
    4a58:	01800284 	movi	r6,10
    4a5c:	000f883a 	mov	r7,zero
    4a60:	1023883a 	mov	r17,r2
    4a64:	00067b40 	call	67b4 <__multadd>
    4a68:	1027883a 	mov	r19,r2
    4a6c:	a825883a 	mov	r18,r21
    4a70:	003fcb06 	br	49a0 <_dtoa_r+0xd34>
    4a74:	d9c00417 	ldw	r7,16(sp)
    4a78:	00800104 	movi	r2,4
    4a7c:	3880e426 	beq	r7,r2,4e10 <_dtoa_r+0x11a4>
    4a80:	00800144 	movi	r2,5
    4a84:	38be3c1e 	bne	r7,r2,4378 <_dtoa_r+0x70c>
    4a88:	00c00044 	movi	r3,1
    4a8c:	d8c00c15 	stw	r3,48(sp)
    4a90:	d9c02117 	ldw	r7,132(sp)
    4a94:	d8800617 	ldw	r2,24(sp)
    4a98:	388f883a 	add	r7,r7,r2
    4a9c:	3c800044 	addi	r18,r7,1
    4aa0:	d9c00e15 	stw	r7,56(sp)
    4aa4:	dc800915 	stw	r18,36(sp)
    4aa8:	04bd3e16 	blt	zero,r18,3fa4 <_dtoa_r+0x338>
    4aac:	80001115 	stw	zero,68(r16)
    4ab0:	000b883a 	mov	r5,zero
    4ab4:	003d4606 	br	3fd0 <_dtoa_r+0x364>
    4ab8:	d8c00317 	ldw	r3,12(sp)
    4abc:	183f0e1e 	bne	r3,zero,46f8 <_dtoa_r+0xa8c>
    4ac0:	00c00434 	movhi	r3,16
    4ac4:	18ffffc4 	addi	r3,r3,-1
    4ac8:	88c6703a 	and	r3,r17,r3
    4acc:	183f0a1e 	bne	r3,zero,46f8 <_dtoa_r+0xa8c>
    4ad0:	8c5ffc2c 	andhi	r17,r17,32752
    4ad4:	883f0826 	beq	r17,zero,46f8 <_dtoa_r+0xa8c>
    4ad8:	d9000817 	ldw	r4,32(sp)
    4adc:	d9c00717 	ldw	r7,28(sp)
    4ae0:	1023883a 	mov	r17,r2
    4ae4:	2089883a 	add	r4,r4,r2
    4ae8:	388f883a 	add	r7,r7,r2
    4aec:	d9000815 	stw	r4,32(sp)
    4af0:	d9c00715 	stw	r7,28(sp)
    4af4:	003f0106 	br	46fc <_dtoa_r+0xa90>
    4af8:	9005883a 	mov	r2,r18
    4afc:	003ed306 	br	464c <_dtoa_r+0x9e0>
    4b00:	d8800917 	ldw	r2,36(sp)
    4b04:	00be3516 	blt	zero,r2,43dc <_dtoa_r+0x770>
    4b08:	1000b61e 	bne	r2,zero,4de4 <_dtoa_r+0x1178>
    4b0c:	9009883a 	mov	r4,r18
    4b10:	980b883a 	mov	r5,r19
    4b14:	000d883a 	mov	r6,zero
    4b18:	01d00534 	movhi	r7,16404
    4b1c:	00094480 	call	9448 <__muldf3>
    4b20:	d9800317 	ldw	r6,12(sp)
    4b24:	1009883a 	mov	r4,r2
    4b28:	180b883a 	mov	r5,r3
    4b2c:	880f883a 	mov	r7,r17
    4b30:	00099fc0 	call	99fc <__gedf2>
    4b34:	0029883a 	mov	r20,zero
    4b38:	002b883a 	mov	r21,zero
    4b3c:	10007e16 	blt	r2,zero,4d38 <_dtoa_r+0x10cc>
    4b40:	d8802117 	ldw	r2,132(sp)
    4b44:	b82d883a 	mov	r22,r23
    4b48:	0084303a 	nor	r2,zero,r2
    4b4c:	d8800615 	stw	r2,24(sp)
    4b50:	8009883a 	mov	r4,r16
    4b54:	a00b883a 	mov	r5,r20
    4b58:	000678c0 	call	678c <_Bfree>
    4b5c:	a83f4b1e 	bne	r21,zero,488c <_dtoa_r+0xc20>
    4b60:	003de306 	br	42f0 <_dtoa_r+0x684>
    4b64:	e00b883a 	mov	r5,fp
    4b68:	8009883a 	mov	r4,r16
    4b6c:	0006da80 	call	6da8 <__pow5mult>
    4b70:	1039883a 	mov	fp,r2
    4b74:	003ed206 	br	46c0 <_dtoa_r+0xa54>
    4b78:	1000021e 	bne	r2,zero,4b84 <_dtoa_r+0xf18>
    4b7c:	18c0004c 	andi	r3,r3,1
    4b80:	183f271e 	bne	r3,zero,4820 <_dtoa_r+0xbb4>
    4b84:	01000c04 	movi	r4,48
    4b88:	00000106 	br	4b90 <_dtoa_r+0xf24>
    4b8c:	102d883a 	mov	r22,r2
    4b90:	b0bfffc4 	addi	r2,r22,-1
    4b94:	10c00007 	ldb	r3,0(r2)
    4b98:	193ffc26 	beq	r3,r4,4b8c <_dtoa_r+0xf20>
    4b9c:	003f3206 	br	4868 <_dtoa_r+0xbfc>
    4ba0:	d8c00f17 	ldw	r3,60(sp)
    4ba4:	18015026 	beq	r3,zero,50e8 <_dtoa_r+0x147c>
    4ba8:	10810cc4 	addi	r2,r2,1075
    4bac:	dcc00a17 	ldw	r19,40(sp)
    4bb0:	dc800817 	ldw	r18,32(sp)
    4bb4:	003e9706 	br	4614 <_dtoa_r+0x9a8>
    4bb8:	b807883a 	mov	r3,r23
    4bbc:	182b883a 	mov	r21,r3
    4bc0:	ddc00717 	ldw	r23,28(sp)
    4bc4:	00800e0e 	bge	zero,r2,4c00 <_dtoa_r+0xf94>
    4bc8:	e00b883a 	mov	r5,fp
    4bcc:	01800044 	movi	r6,1
    4bd0:	8009883a 	mov	r4,r16
    4bd4:	d8c01515 	stw	r3,84(sp)
    4bd8:	0006ed40 	call	6ed4 <__lshift>
    4bdc:	1009883a 	mov	r4,r2
    4be0:	a00b883a 	mov	r5,r20
    4be4:	1039883a 	mov	fp,r2
    4be8:	00070300 	call	7030 <__mcmp>
    4bec:	d8c01517 	ldw	r3,84(sp)
    4bf0:	0081880e 	bge	zero,r2,5214 <_dtoa_r+0x15a8>
    4bf4:	00800e44 	movi	r2,57
    4bf8:	b0c00c44 	addi	r3,r22,49
    4bfc:	a8816326 	beq	r21,r2,518c <_dtoa_r+0x1520>
    4c00:	90c00005 	stb	r3,0(r18)
    4c04:	95800044 	addi	r22,r18,1
    4c08:	982b883a 	mov	r21,r19
    4c0c:	003f1606 	br	4868 <_dtoa_r+0xbfc>
    4c10:	300b883a 	mov	r5,r6
    4c14:	e009883a 	mov	r4,fp
    4c18:	d9801515 	stw	r6,84(sp)
    4c1c:	00070300 	call	7030 <__mcmp>
    4c20:	d9801517 	ldw	r6,84(sp)
    4c24:	8009883a 	mov	r4,r16
    4c28:	d8801515 	stw	r2,84(sp)
    4c2c:	300b883a 	mov	r5,r6
    4c30:	000678c0 	call	678c <_Bfree>
    4c34:	d8801517 	ldw	r2,84(sp)
    4c38:	103f6d1e 	bne	r2,zero,49f0 <_dtoa_r+0xd84>
    4c3c:	d9c00417 	ldw	r7,16(sp)
    4c40:	383f6b1e 	bne	r7,zero,49f0 <_dtoa_r+0xd84>
    4c44:	d8c00317 	ldw	r3,12(sp)
    4c48:	183f691e 	bne	r3,zero,49f0 <_dtoa_r+0xd84>
    4c4c:	b807883a 	mov	r3,r23
    4c50:	00800e44 	movi	r2,57
    4c54:	ddc00717 	ldw	r23,28(sp)
    4c58:	18814c26 	beq	r3,r2,518c <_dtoa_r+0x1520>
    4c5c:	057fe80e 	bge	zero,r21,4c00 <_dtoa_r+0xf94>
    4c60:	b0c00c44 	addi	r3,r22,49
    4c64:	003fe606 	br	4c00 <_dtoa_r+0xf94>
    4c68:	880b883a 	mov	r5,r17
    4c6c:	8009883a 	mov	r4,r16
    4c70:	01800284 	movi	r6,10
    4c74:	000f883a 	mov	r7,zero
    4c78:	00067b40 	call	67b4 <__multadd>
    4c7c:	1023883a 	mov	r17,r2
    4c80:	1027883a 	mov	r19,r2
    4c84:	a825883a 	mov	r18,r21
    4c88:	003f4506 	br	49a0 <_dtoa_r+0xd34>
    4c8c:	e009883a 	mov	r4,fp
    4c90:	a00b883a 	mov	r5,r20
    4c94:	00070300 	call	7030 <__mcmp>
    4c98:	103ebc0e 	bge	r2,zero,478c <_dtoa_r+0xb20>
    4c9c:	e00b883a 	mov	r5,fp
    4ca0:	8009883a 	mov	r4,r16
    4ca4:	01800284 	movi	r6,10
    4ca8:	000f883a 	mov	r7,zero
    4cac:	00067b40 	call	67b4 <__multadd>
    4cb0:	1039883a 	mov	fp,r2
    4cb4:	d8800617 	ldw	r2,24(sp)
    4cb8:	d8c00c17 	ldw	r3,48(sp)
    4cbc:	10bfffc4 	addi	r2,r2,-1
    4cc0:	d8800615 	stw	r2,24(sp)
    4cc4:	1801571e 	bne	r3,zero,5224 <_dtoa_r+0x15b8>
    4cc8:	d9c00e17 	ldw	r7,56(sp)
    4ccc:	d9c00915 	stw	r7,36(sp)
    4cd0:	003eae06 	br	478c <_dtoa_r+0xb20>
    4cd4:	a0800417 	ldw	r2,16(r20)
    4cd8:	10800104 	addi	r2,r2,4
    4cdc:	1085883a 	add	r2,r2,r2
    4ce0:	1085883a 	add	r2,r2,r2
    4ce4:	a085883a 	add	r2,r20,r2
    4ce8:	11000017 	ldw	r4,0(r2)
    4cec:	00069fc0 	call	69fc <__hi0bits>
    4cf0:	00c00804 	movi	r3,32
    4cf4:	1885c83a 	sub	r2,r3,r2
    4cf8:	003e8306 	br	4708 <_dtoa_r+0xa9c>
    4cfc:	d9c00417 	ldw	r7,16(sp)
    4d00:	00800084 	movi	r2,2
    4d04:	11fea30e 	bge	r2,r7,4794 <_dtoa_r+0xb28>
    4d08:	d8800917 	ldw	r2,36(sp)
    4d0c:	103f8c1e 	bne	r2,zero,4b40 <_dtoa_r+0xed4>
    4d10:	a00b883a 	mov	r5,r20
    4d14:	8009883a 	mov	r4,r16
    4d18:	01800144 	movi	r6,5
    4d1c:	000f883a 	mov	r7,zero
    4d20:	00067b40 	call	67b4 <__multadd>
    4d24:	e009883a 	mov	r4,fp
    4d28:	100b883a 	mov	r5,r2
    4d2c:	1029883a 	mov	r20,r2
    4d30:	00070300 	call	7030 <__mcmp>
    4d34:	00bf820e 	bge	zero,r2,4b40 <_dtoa_r+0xed4>
    4d38:	00800c44 	movi	r2,49
    4d3c:	b8800005 	stb	r2,0(r23)
    4d40:	d8800617 	ldw	r2,24(sp)
    4d44:	bd800044 	addi	r22,r23,1
    4d48:	10800044 	addi	r2,r2,1
    4d4c:	d8800615 	stw	r2,24(sp)
    4d50:	003f7f06 	br	4b50 <_dtoa_r+0xee4>
    4d54:	dc000417 	ldw	r16,16(sp)
    4d58:	003d6506 	br	42f0 <_dtoa_r+0x684>
    4d5c:	9009883a 	mov	r4,r18
    4d60:	0009abc0 	call	9abc <__floatsidf>
    4d64:	1009883a 	mov	r4,r2
    4d68:	180b883a 	mov	r5,r3
    4d6c:	980d883a 	mov	r6,r19
    4d70:	a00f883a 	mov	r7,r20
    4d74:	00094480 	call	9448 <__muldf3>
    4d78:	1009883a 	mov	r4,r2
    4d7c:	180b883a 	mov	r5,r3
    4d80:	000d883a 	mov	r6,zero
    4d84:	01d00734 	movhi	r7,16412
    4d88:	00093940 	call	9394 <__adddf3>
    4d8c:	057f3034 	movhi	r21,64704
    4d90:	1025883a 	mov	r18,r2
    4d94:	1d6b883a 	add	r21,r3,r21
    4d98:	9809883a 	mov	r4,r19
    4d9c:	a00b883a 	mov	r5,r20
    4da0:	000d883a 	mov	r6,zero
    4da4:	01d00534 	movhi	r7,16404
    4da8:	00093e80 	call	93e8 <__subdf3>
    4dac:	1009883a 	mov	r4,r2
    4db0:	180b883a 	mov	r5,r3
    4db4:	900d883a 	mov	r6,r18
    4db8:	a80f883a 	mov	r7,r21
    4dbc:	1027883a 	mov	r19,r2
    4dc0:	1829883a 	mov	r20,r3
    4dc4:	00099980 	call	9998 <__gtdf2>
    4dc8:	00806616 	blt	zero,r2,4f64 <_dtoa_r+0x12f8>
    4dcc:	a9e0003c 	xorhi	r7,r21,32768
    4dd0:	9809883a 	mov	r4,r19
    4dd4:	a00b883a 	mov	r5,r20
    4dd8:	900d883a 	mov	r6,r18
    4ddc:	0009a600 	call	9a60 <__ltdf2>
    4de0:	103d710e 	bge	r2,zero,43a8 <_dtoa_r+0x73c>
    4de4:	0029883a 	mov	r20,zero
    4de8:	002b883a 	mov	r21,zero
    4dec:	003f5406 	br	4b40 <_dtoa_r+0xed4>
    4df0:	d9800a17 	ldw	r6,40(sp)
    4df4:	e00b883a 	mov	r5,fp
    4df8:	8009883a 	mov	r4,r16
    4dfc:	0006da80 	call	6da8 <__pow5mult>
    4e00:	1039883a 	mov	fp,r2
    4e04:	003e2e06 	br	46c0 <_dtoa_r+0xa54>
    4e08:	d8000c15 	stw	zero,48(sp)
    4e0c:	003f2006 	br	4a90 <_dtoa_r+0xe24>
    4e10:	00800044 	movi	r2,1
    4e14:	d8800c15 	stw	r2,48(sp)
    4e18:	003c5d06 	br	3f90 <_dtoa_r+0x324>
    4e1c:	d8c00a17 	ldw	r3,40(sp)
    4e20:	d9000b17 	ldw	r4,44(sp)
    4e24:	dcc00a15 	stw	r19,40(sp)
    4e28:	98c5c83a 	sub	r2,r19,r3
    4e2c:	2089883a 	add	r4,r4,r2
    4e30:	d9000b15 	stw	r4,44(sp)
    4e34:	0027883a 	mov	r19,zero
    4e38:	003df206 	br	4604 <_dtoa_r+0x998>
    4e3c:	d9000317 	ldw	r4,12(sp)
    4e40:	8829883a 	mov	r20,r17
    4e44:	04800084 	movi	r18,2
    4e48:	d9001015 	stw	r4,64(sp)
    4e4c:	003c8106 	br	4054 <_dtoa_r+0x3e8>
    4e50:	04800044 	movi	r18,1
    4e54:	dc800e15 	stw	r18,56(sp)
    4e58:	dc800915 	stw	r18,36(sp)
    4e5c:	dc802115 	stw	r18,132(sp)
    4e60:	003f1206 	br	4aac <_dtoa_r+0xe40>
    4e64:	d8800617 	ldw	r2,24(sp)
    4e68:	00abc83a 	sub	r21,zero,r2
    4e6c:	a800a426 	beq	r21,zero,5100 <_dtoa_r+0x1494>
    4e70:	a88003cc 	andi	r2,r21,15
    4e74:	100490fa 	slli	r2,r2,3
    4e78:	00c00074 	movhi	r3,1
    4e7c:	18f4c304 	addi	r3,r3,-11508
    4e80:	d9000317 	ldw	r4,12(sp)
    4e84:	1885883a 	add	r2,r3,r2
    4e88:	11800017 	ldw	r6,0(r2)
    4e8c:	11c00117 	ldw	r7,4(r2)
    4e90:	a82bd13a 	srai	r21,r21,4
    4e94:	880b883a 	mov	r5,r17
    4e98:	00094480 	call	9448 <__muldf3>
    4e9c:	1027883a 	mov	r19,r2
    4ea0:	1829883a 	mov	r20,r3
    4ea4:	a800e826 	beq	r21,zero,5248 <_dtoa_r+0x15dc>
    4ea8:	05800074 	movhi	r22,1
    4eac:	b5b4b904 	addi	r22,r22,-11548
    4eb0:	04800084 	movi	r18,2
    4eb4:	a980004c 	andi	r6,r21,1
    4eb8:	1009883a 	mov	r4,r2
    4ebc:	a82bd07a 	srai	r21,r21,1
    4ec0:	180b883a 	mov	r5,r3
    4ec4:	30000426 	beq	r6,zero,4ed8 <_dtoa_r+0x126c>
    4ec8:	b1800017 	ldw	r6,0(r22)
    4ecc:	b1c00117 	ldw	r7,4(r22)
    4ed0:	94800044 	addi	r18,r18,1
    4ed4:	00094480 	call	9448 <__muldf3>
    4ed8:	b5800204 	addi	r22,r22,8
    4edc:	a83ff51e 	bne	r21,zero,4eb4 <_dtoa_r+0x1248>
    4ee0:	1027883a 	mov	r19,r2
    4ee4:	1829883a 	mov	r20,r3
    4ee8:	003c7306 	br	40b8 <_dtoa_r+0x44c>
    4eec:	21000044 	addi	r4,r4,1
    4ef0:	11000005 	stb	r4,0(r2)
    4ef4:	003e5c06 	br	4868 <_dtoa_r+0xbfc>
    4ef8:	a9400117 	ldw	r5,4(r21)
    4efc:	8009883a 	mov	r4,r16
    4f00:	00066e40 	call	66e4 <_Balloc>
    4f04:	a9800417 	ldw	r6,16(r21)
    4f08:	11000304 	addi	r4,r2,12
    4f0c:	a9400304 	addi	r5,r21,12
    4f10:	31800084 	addi	r6,r6,2
    4f14:	318d883a 	add	r6,r6,r6
    4f18:	318d883a 	add	r6,r6,r6
    4f1c:	1023883a 	mov	r17,r2
    4f20:	00017000 	call	1700 <memcpy>
    4f24:	8009883a 	mov	r4,r16
    4f28:	880b883a 	mov	r5,r17
    4f2c:	01800044 	movi	r6,1
    4f30:	0006ed40 	call	6ed4 <__lshift>
    4f34:	1027883a 	mov	r19,r2
    4f38:	003e8f06 	br	4978 <_dtoa_r+0xd0c>
    4f3c:	b807883a 	mov	r3,r23
    4f40:	00800e44 	movi	r2,57
    4f44:	ddc00717 	ldw	r23,28(sp)
    4f48:	18809026 	beq	r3,r2,518c <_dtoa_r+0x1520>
    4f4c:	18c00044 	addi	r3,r3,1
    4f50:	003f2b06 	br	4c00 <_dtoa_r+0xf94>
    4f54:	b807883a 	mov	r3,r23
    4f58:	982b883a 	mov	r21,r19
    4f5c:	ddc00717 	ldw	r23,28(sp)
    4f60:	003e2406 	br	47f4 <_dtoa_r+0xb88>
    4f64:	0029883a 	mov	r20,zero
    4f68:	002b883a 	mov	r21,zero
    4f6c:	003f7206 	br	4d38 <_dtoa_r+0x10cc>
    4f70:	593fffc4 	addi	r4,r11,-1
    4f74:	200490fa 	slli	r2,r4,3
    4f78:	00c00074 	movhi	r3,1
    4f7c:	18f4c304 	addi	r3,r3,-11508
    4f80:	d9001015 	stw	r4,64(sp)
    4f84:	1885883a 	add	r2,r3,r2
    4f88:	11000017 	ldw	r4,0(r2)
    4f8c:	11400117 	ldw	r5,4(r2)
    4f90:	900d883a 	mov	r6,r18
    4f94:	a80f883a 	mov	r7,r21
    4f98:	dac01615 	stw	r11,88(sp)
    4f9c:	00094480 	call	9448 <__muldf3>
    4fa0:	a00b883a 	mov	r5,r20
    4fa4:	9809883a 	mov	r4,r19
    4fa8:	d8c01215 	stw	r3,72(sp)
    4fac:	d8801115 	stw	r2,68(sp)
    4fb0:	0009b900 	call	9b90 <__fixdfsi>
    4fb4:	1009883a 	mov	r4,r2
    4fb8:	1025883a 	mov	r18,r2
    4fbc:	0009abc0 	call	9abc <__floatsidf>
    4fc0:	9809883a 	mov	r4,r19
    4fc4:	a00b883a 	mov	r5,r20
    4fc8:	100d883a 	mov	r6,r2
    4fcc:	180f883a 	mov	r7,r3
    4fd0:	94800c04 	addi	r18,r18,48
    4fd4:	00093e80 	call	93e8 <__subdf3>
    4fd8:	bc800005 	stb	r18,0(r23)
    4fdc:	dac01617 	ldw	r11,88(sp)
    4fe0:	102b883a 	mov	r21,r2
    4fe4:	00800044 	movi	r2,1
    4fe8:	bd800044 	addi	r22,r23,1
    4fec:	1815883a 	mov	r10,r3
    4ff0:	58802226 	beq	r11,r2,507c <_dtoa_r+0x1410>
    4ff4:	bad7883a 	add	r11,r23,r11
    4ff8:	dc001415 	stw	r16,80(sp)
    4ffc:	a805883a 	mov	r2,r21
    5000:	b027883a 	mov	r19,r22
    5004:	5821883a 	mov	r16,r11
    5008:	882b883a 	mov	r21,r17
    500c:	000d883a 	mov	r6,zero
    5010:	01d00934 	movhi	r7,16420
    5014:	1009883a 	mov	r4,r2
    5018:	180b883a 	mov	r5,r3
    501c:	00094480 	call	9448 <__muldf3>
    5020:	180b883a 	mov	r5,r3
    5024:	1009883a 	mov	r4,r2
    5028:	1829883a 	mov	r20,r3
    502c:	1023883a 	mov	r17,r2
    5030:	0009b900 	call	9b90 <__fixdfsi>
    5034:	1009883a 	mov	r4,r2
    5038:	1025883a 	mov	r18,r2
    503c:	0009abc0 	call	9abc <__floatsidf>
    5040:	8809883a 	mov	r4,r17
    5044:	a00b883a 	mov	r5,r20
    5048:	100d883a 	mov	r6,r2
    504c:	180f883a 	mov	r7,r3
    5050:	94800c04 	addi	r18,r18,48
    5054:	00093e80 	call	93e8 <__subdf3>
    5058:	9cc00044 	addi	r19,r19,1
    505c:	9cbfffc5 	stb	r18,-1(r19)
    5060:	9c3fea1e 	bne	r19,r16,500c <_dtoa_r+0x13a0>
    5064:	1815883a 	mov	r10,r3
    5068:	d8c01017 	ldw	r3,64(sp)
    506c:	dc001417 	ldw	r16,80(sp)
    5070:	a823883a 	mov	r17,r21
    5074:	b0ed883a 	add	r22,r22,r3
    5078:	102b883a 	mov	r21,r2
    507c:	d9001117 	ldw	r4,68(sp)
    5080:	d9401217 	ldw	r5,72(sp)
    5084:	000d883a 	mov	r6,zero
    5088:	01cff834 	movhi	r7,16352
    508c:	da801515 	stw	r10,84(sp)
    5090:	00093940 	call	9394 <__adddf3>
    5094:	da801517 	ldw	r10,84(sp)
    5098:	1009883a 	mov	r4,r2
    509c:	180b883a 	mov	r5,r3
    50a0:	500f883a 	mov	r7,r10
    50a4:	a80d883a 	mov	r6,r21
    50a8:	0009a600 	call	9a60 <__ltdf2>
    50ac:	da801517 	ldw	r10,84(sp)
    50b0:	10003b0e 	bge	r2,zero,51a0 <_dtoa_r+0x1534>
    50b4:	d9c01317 	ldw	r7,76(sp)
    50b8:	b53fffc3 	ldbu	r20,-1(r22)
    50bc:	d9c00615 	stw	r7,24(sp)
    50c0:	003d3106 	br	4588 <_dtoa_r+0x91c>
    50c4:	d8800817 	ldw	r2,32(sp)
    50c8:	11e5c83a 	sub	r18,r2,r7
    50cc:	0005883a 	mov	r2,zero
    50d0:	003d5006 	br	4614 <_dtoa_r+0x9a8>
    50d4:	05800044 	movi	r22,1
    50d8:	003dc406 	br	47ec <_dtoa_r+0xb80>
    50dc:	a5000044 	addi	r20,r20,1
    50e0:	15000005 	stb	r20,0(r2)
    50e4:	003c8206 	br	42f0 <_dtoa_r+0x684>
    50e8:	d8800217 	ldw	r2,8(sp)
    50ec:	00c00d84 	movi	r3,54
    50f0:	dcc00a17 	ldw	r19,40(sp)
    50f4:	1885c83a 	sub	r2,r3,r2
    50f8:	dc800817 	ldw	r18,32(sp)
    50fc:	003d4506 	br	4614 <_dtoa_r+0x9a8>
    5100:	dcc00317 	ldw	r19,12(sp)
    5104:	8829883a 	mov	r20,r17
    5108:	04800084 	movi	r18,2
    510c:	003bea06 	br	40b8 <_dtoa_r+0x44c>
    5110:	d9000917 	ldw	r4,36(sp)
    5114:	203f1126 	beq	r4,zero,4d5c <_dtoa_r+0x10f0>
    5118:	d9c00e17 	ldw	r7,56(sp)
    511c:	01fca20e 	bge	zero,r7,43a8 <_dtoa_r+0x73c>
    5120:	a00b883a 	mov	r5,r20
    5124:	9809883a 	mov	r4,r19
    5128:	000d883a 	mov	r6,zero
    512c:	01d00934 	movhi	r7,16420
    5130:	00094480 	call	9448 <__muldf3>
    5134:	91000044 	addi	r4,r18,1
    5138:	1027883a 	mov	r19,r2
    513c:	1829883a 	mov	r20,r3
    5140:	0009abc0 	call	9abc <__floatsidf>
    5144:	9809883a 	mov	r4,r19
    5148:	a00b883a 	mov	r5,r20
    514c:	100d883a 	mov	r6,r2
    5150:	180f883a 	mov	r7,r3
    5154:	00094480 	call	9448 <__muldf3>
    5158:	1009883a 	mov	r4,r2
    515c:	180b883a 	mov	r5,r3
    5160:	000d883a 	mov	r6,zero
    5164:	01d00734 	movhi	r7,16412
    5168:	00093940 	call	9394 <__adddf3>
    516c:	1025883a 	mov	r18,r2
    5170:	d8800617 	ldw	r2,24(sp)
    5174:	057f3034 	movhi	r21,64704
    5178:	1d6b883a 	add	r21,r3,r21
    517c:	10bfffc4 	addi	r2,r2,-1
    5180:	d8801315 	stw	r2,76(sp)
    5184:	dac00e17 	ldw	r11,56(sp)
    5188:	003be706 	br	4128 <_dtoa_r+0x4bc>
    518c:	01000e44 	movi	r4,57
    5190:	91000005 	stb	r4,0(r18)
    5194:	95800044 	addi	r22,r18,1
    5198:	982b883a 	mov	r21,r19
    519c:	003da106 	br	4824 <_dtoa_r+0xbb8>
    51a0:	d9801117 	ldw	r6,68(sp)
    51a4:	d9c01217 	ldw	r7,72(sp)
    51a8:	0009883a 	mov	r4,zero
    51ac:	014ff834 	movhi	r5,16352
    51b0:	da801515 	stw	r10,84(sp)
    51b4:	00093e80 	call	93e8 <__subdf3>
    51b8:	da801517 	ldw	r10,84(sp)
    51bc:	1009883a 	mov	r4,r2
    51c0:	180b883a 	mov	r5,r3
    51c4:	a80d883a 	mov	r6,r21
    51c8:	500f883a 	mov	r7,r10
    51cc:	00099980 	call	9998 <__gtdf2>
    51d0:	00bc750e 	bge	zero,r2,43a8 <_dtoa_r+0x73c>
    51d4:	01000c04 	movi	r4,48
    51d8:	00000106 	br	51e0 <_dtoa_r+0x1574>
    51dc:	102d883a 	mov	r22,r2
    51e0:	b0bfffc4 	addi	r2,r22,-1
    51e4:	10c00007 	ldb	r3,0(r2)
    51e8:	193ffc26 	beq	r3,r4,51dc <_dtoa_r+0x1570>
    51ec:	d8801317 	ldw	r2,76(sp)
    51f0:	d8800615 	stw	r2,24(sp)
    51f4:	003c3e06 	br	42f0 <_dtoa_r+0x684>
    51f8:	d9001317 	ldw	r4,76(sp)
    51fc:	df001117 	ldw	fp,68(sp)
    5200:	d9000615 	stw	r4,24(sp)
    5204:	003ce006 	br	4588 <_dtoa_r+0x91c>
    5208:	df001117 	ldw	fp,68(sp)
    520c:	dc401217 	ldw	r17,72(sp)
    5210:	003c6506 	br	43a8 <_dtoa_r+0x73c>
    5214:	103e7a1e 	bne	r2,zero,4c00 <_dtoa_r+0xf94>
    5218:	1880004c 	andi	r2,r3,1
    521c:	103e7826 	beq	r2,zero,4c00 <_dtoa_r+0xf94>
    5220:	003e7406 	br	4bf4 <_dtoa_r+0xf88>
    5224:	8009883a 	mov	r4,r16
    5228:	a80b883a 	mov	r5,r21
    522c:	01800284 	movi	r6,10
    5230:	000f883a 	mov	r7,zero
    5234:	00067b40 	call	67b4 <__multadd>
    5238:	d9000e17 	ldw	r4,56(sp)
    523c:	102b883a 	mov	r21,r2
    5240:	d9000915 	stw	r4,36(sp)
    5244:	003d5106 	br	478c <_dtoa_r+0xb20>
    5248:	04800084 	movi	r18,2
    524c:	003b9a06 	br	40b8 <_dtoa_r+0x44c>
    5250:	d8c01317 	ldw	r3,76(sp)
    5254:	d8c00615 	stw	r3,24(sp)
    5258:	003ccb06 	br	4588 <_dtoa_r+0x91c>
    525c:	d8c01317 	ldw	r3,76(sp)
    5260:	d8c00615 	stw	r3,24(sp)
    5264:	003c2206 	br	42f0 <_dtoa_r+0x684>
    5268:	20fd3826 	beq	r4,r3,474c <_dtoa_r+0xae0>
    526c:	00c00f04 	movi	r3,60
    5270:	1885c83a 	sub	r2,r3,r2
    5274:	003da906 	br	491c <_dtoa_r+0xcb0>
    5278:	000b883a 	mov	r5,zero
    527c:	003b5406 	br	3fd0 <_dtoa_r+0x364>
    5280:	04c00044 	movi	r19,1
    5284:	003b3b06 	br	3f74 <_dtoa_r+0x308>

00005288 <_fflush_r>:
    5288:	defffb04 	addi	sp,sp,-20
    528c:	dcc00315 	stw	r19,12(sp)
    5290:	dc400115 	stw	r17,4(sp)
    5294:	dfc00415 	stw	ra,16(sp)
    5298:	dc800215 	stw	r18,8(sp)
    529c:	dc000015 	stw	r16,0(sp)
    52a0:	2027883a 	mov	r19,r4
    52a4:	2823883a 	mov	r17,r5
    52a8:	20000226 	beq	r4,zero,52b4 <_fflush_r+0x2c>
    52ac:	20800e17 	ldw	r2,56(r4)
    52b0:	10005726 	beq	r2,zero,5410 <_fflush_r+0x188>
    52b4:	8880030b 	ldhu	r2,12(r17)
    52b8:	10c0020c 	andi	r3,r2,8
    52bc:	18ffffcc 	andi	r3,r3,65535
    52c0:	18e0001c 	xori	r3,r3,32768
    52c4:	18e00004 	addi	r3,r3,-32768
    52c8:	1800311e 	bne	r3,zero,5390 <_fflush_r+0x108>
    52cc:	89000117 	ldw	r4,4(r17)
    52d0:	10c20014 	ori	r3,r2,2048
    52d4:	88c0030d 	sth	r3,12(r17)
    52d8:	180b883a 	mov	r5,r3
    52dc:	0100520e 	bge	zero,r4,5428 <_fflush_r+0x1a0>
    52e0:	88c00a17 	ldw	r3,40(r17)
    52e4:	18002226 	beq	r3,zero,5370 <_fflush_r+0xe8>
    52e8:	1084000c 	andi	r2,r2,4096
    52ec:	10bfffcc 	andi	r2,r2,65535
    52f0:	10a0001c 	xori	r2,r2,32768
    52f4:	10a00004 	addi	r2,r2,-32768
    52f8:	10004e26 	beq	r2,zero,5434 <_fflush_r+0x1ac>
    52fc:	8c001417 	ldw	r16,80(r17)
    5300:	2940010c 	andi	r5,r5,4
    5304:	297fffcc 	andi	r5,r5,65535
    5308:	2960001c 	xori	r5,r5,32768
    530c:	29600004 	addi	r5,r5,-32768
    5310:	28000626 	beq	r5,zero,532c <_fflush_r+0xa4>
    5314:	89000117 	ldw	r4,4(r17)
    5318:	88800c17 	ldw	r2,48(r17)
    531c:	8121c83a 	sub	r16,r16,r4
    5320:	10000226 	beq	r2,zero,532c <_fflush_r+0xa4>
    5324:	88800f17 	ldw	r2,60(r17)
    5328:	80a1c83a 	sub	r16,r16,r2
    532c:	89400717 	ldw	r5,28(r17)
    5330:	9809883a 	mov	r4,r19
    5334:	800d883a 	mov	r6,r16
    5338:	000f883a 	mov	r7,zero
    533c:	183ee83a 	callr	r3
    5340:	8080281e 	bne	r16,r2,53e4 <_fflush_r+0x15c>
    5344:	8880030b 	ldhu	r2,12(r17)
    5348:	88c00417 	ldw	r3,16(r17)
    534c:	88000115 	stw	zero,4(r17)
    5350:	113dffcc 	andi	r4,r2,63487
    5354:	1084000c 	andi	r2,r2,4096
    5358:	10bfffcc 	andi	r2,r2,65535
    535c:	10a0001c 	xori	r2,r2,32768
    5360:	8900030d 	sth	r4,12(r17)
    5364:	88c00015 	stw	r3,0(r17)
    5368:	10a00004 	addi	r2,r2,-32768
    536c:	10002c1e 	bne	r2,zero,5420 <_fflush_r+0x198>
    5370:	0005883a 	mov	r2,zero
    5374:	dfc00417 	ldw	ra,16(sp)
    5378:	dcc00317 	ldw	r19,12(sp)
    537c:	dc800217 	ldw	r18,8(sp)
    5380:	dc400117 	ldw	r17,4(sp)
    5384:	dc000017 	ldw	r16,0(sp)
    5388:	dec00504 	addi	sp,sp,20
    538c:	f800283a 	ret
    5390:	8c800417 	ldw	r18,16(r17)
    5394:	903ff626 	beq	r18,zero,5370 <_fflush_r+0xe8>
    5398:	8c000017 	ldw	r16,0(r17)
    539c:	108000cc 	andi	r2,r2,3
    53a0:	8c800015 	stw	r18,0(r17)
    53a4:	84a1c83a 	sub	r16,r16,r18
    53a8:	10001b1e 	bne	r2,zero,5418 <_fflush_r+0x190>
    53ac:	88800517 	ldw	r2,20(r17)
    53b0:	88800215 	stw	r2,8(r17)
    53b4:	04000316 	blt	zero,r16,53c4 <_fflush_r+0x13c>
    53b8:	003fed06 	br	5370 <_fflush_r+0xe8>
    53bc:	90a5883a 	add	r18,r18,r2
    53c0:	043feb0e 	bge	zero,r16,5370 <_fflush_r+0xe8>
    53c4:	88800917 	ldw	r2,36(r17)
    53c8:	89400717 	ldw	r5,28(r17)
    53cc:	800f883a 	mov	r7,r16
    53d0:	900d883a 	mov	r6,r18
    53d4:	9809883a 	mov	r4,r19
    53d8:	103ee83a 	callr	r2
    53dc:	80a1c83a 	sub	r16,r16,r2
    53e0:	00bff616 	blt	zero,r2,53bc <_fflush_r+0x134>
    53e4:	88c0030b 	ldhu	r3,12(r17)
    53e8:	00bfffc4 	movi	r2,-1
    53ec:	18c01014 	ori	r3,r3,64
    53f0:	88c0030d 	sth	r3,12(r17)
    53f4:	dfc00417 	ldw	ra,16(sp)
    53f8:	dcc00317 	ldw	r19,12(sp)
    53fc:	dc800217 	ldw	r18,8(sp)
    5400:	dc400117 	ldw	r17,4(sp)
    5404:	dc000017 	ldw	r16,0(sp)
    5408:	dec00504 	addi	sp,sp,20
    540c:	f800283a 	ret
    5410:	00055440 	call	5544 <__sinit>
    5414:	003fa706 	br	52b4 <_fflush_r+0x2c>
    5418:	0005883a 	mov	r2,zero
    541c:	003fe406 	br	53b0 <_fflush_r+0x128>
    5420:	8c001415 	stw	r16,80(r17)
    5424:	003fd206 	br	5370 <_fflush_r+0xe8>
    5428:	88c00f17 	ldw	r3,60(r17)
    542c:	00ffac16 	blt	zero,r3,52e0 <_fflush_r+0x58>
    5430:	003fcf06 	br	5370 <_fflush_r+0xe8>
    5434:	89400717 	ldw	r5,28(r17)
    5438:	9809883a 	mov	r4,r19
    543c:	000d883a 	mov	r6,zero
    5440:	01c00044 	movi	r7,1
    5444:	183ee83a 	callr	r3
    5448:	1021883a 	mov	r16,r2
    544c:	00bfffc4 	movi	r2,-1
    5450:	80800326 	beq	r16,r2,5460 <_fflush_r+0x1d8>
    5454:	8940030b 	ldhu	r5,12(r17)
    5458:	88c00a17 	ldw	r3,40(r17)
    545c:	003fa806 	br	5300 <_fflush_r+0x78>
    5460:	98c00017 	ldw	r3,0(r19)
    5464:	00800744 	movi	r2,29
    5468:	18bfde1e 	bne	r3,r2,53e4 <_fflush_r+0x15c>
    546c:	003fc006 	br	5370 <_fflush_r+0xe8>

00005470 <fflush>:
    5470:	200b883a 	mov	r5,r4
    5474:	20000426 	beq	r4,zero,5488 <fflush+0x18>
    5478:	00800074 	movhi	r2,1
    547c:	10bbd004 	addi	r2,r2,-4288
    5480:	11000017 	ldw	r4,0(r2)
    5484:	00052881 	jmpi	5288 <_fflush_r>
    5488:	00800074 	movhi	r2,1
    548c:	10bbcf04 	addi	r2,r2,-4292
    5490:	11000017 	ldw	r4,0(r2)
    5494:	01400034 	movhi	r5,0
    5498:	2954a204 	addi	r5,r5,21128
    549c:	00061241 	jmpi	6124 <_fwalk_reent>

000054a0 <__fp_lock>:
    54a0:	0005883a 	mov	r2,zero
    54a4:	f800283a 	ret

000054a8 <__fp_unlock>:
    54a8:	0005883a 	mov	r2,zero
    54ac:	f800283a 	ret

000054b0 <_cleanup_r>:
    54b0:	01400074 	movhi	r5,1
    54b4:	29608404 	addi	r5,r5,-32240
    54b8:	000607c1 	jmpi	607c <_fwalk>

000054bc <__sfmoreglue>:
    54bc:	defffc04 	addi	sp,sp,-16
    54c0:	dc800215 	stw	r18,8(sp)
    54c4:	2825883a 	mov	r18,r5
    54c8:	dc000015 	stw	r16,0(sp)
    54cc:	01401704 	movi	r5,92
    54d0:	2021883a 	mov	r16,r4
    54d4:	9009883a 	mov	r4,r18
    54d8:	dfc00315 	stw	ra,12(sp)
    54dc:	dc400115 	stw	r17,4(sp)
    54e0:	0000e440 	call	e44 <__mulsi3>
    54e4:	8009883a 	mov	r4,r16
    54e8:	11400304 	addi	r5,r2,12
    54ec:	1023883a 	mov	r17,r2
    54f0:	0000f7c0 	call	f7c <_malloc_r>
    54f4:	1021883a 	mov	r16,r2
    54f8:	10000726 	beq	r2,zero,5518 <__sfmoreglue+0x5c>
    54fc:	11000304 	addi	r4,r2,12
    5500:	10000015 	stw	zero,0(r2)
    5504:	14800115 	stw	r18,4(r2)
    5508:	11000215 	stw	r4,8(r2)
    550c:	000b883a 	mov	r5,zero
    5510:	880d883a 	mov	r6,r17
    5514:	00018400 	call	1840 <memset>
    5518:	8005883a 	mov	r2,r16
    551c:	dfc00317 	ldw	ra,12(sp)
    5520:	dc800217 	ldw	r18,8(sp)
    5524:	dc400117 	ldw	r17,4(sp)
    5528:	dc000017 	ldw	r16,0(sp)
    552c:	dec00404 	addi	sp,sp,16
    5530:	f800283a 	ret

00005534 <_cleanup>:
    5534:	00800074 	movhi	r2,1
    5538:	10bbcf04 	addi	r2,r2,-4292
    553c:	11000017 	ldw	r4,0(r2)
    5540:	00054b01 	jmpi	54b0 <_cleanup_r>

00005544 <__sinit>:
    5544:	20800e17 	ldw	r2,56(r4)
    5548:	1000401e 	bne	r2,zero,564c <__sinit+0x108>
    554c:	21400117 	ldw	r5,4(r4)
    5550:	01800034 	movhi	r6,0
    5554:	31952c04 	addi	r6,r6,21680
    5558:	20c00217 	ldw	r3,8(r4)
    555c:	21800f15 	stw	r6,60(r4)
    5560:	2080bb04 	addi	r2,r4,748
    5564:	02400044 	movi	r9,1
    5568:	018000c4 	movi	r6,3
    556c:	2180b915 	stw	r6,740(r4)
    5570:	2080ba15 	stw	r2,744(r4)
    5574:	22400e15 	stw	r9,56(r4)
    5578:	20800317 	ldw	r2,12(r4)
    557c:	2000b815 	stw	zero,736(r4)
    5580:	02000034 	movhi	r8,0
    5584:	421f6504 	addi	r8,r8,32148
    5588:	01c00034 	movhi	r7,0
    558c:	39df7a04 	addi	r7,r7,32232
    5590:	01800034 	movhi	r6,0
    5594:	319f9c04 	addi	r6,r6,32368
    5598:	01000034 	movhi	r4,0
    559c:	211fb304 	addi	r4,r4,32460
    55a0:	02800104 	movi	r10,4
    55a4:	28000015 	stw	zero,0(r5)
    55a8:	28000115 	stw	zero,4(r5)
    55ac:	28000215 	stw	zero,8(r5)
    55b0:	2a80030d 	sth	r10,12(r5)
    55b4:	2800038d 	sth	zero,14(r5)
    55b8:	28000415 	stw	zero,16(r5)
    55bc:	28000515 	stw	zero,20(r5)
    55c0:	28000615 	stw	zero,24(r5)
    55c4:	29400715 	stw	r5,28(r5)
    55c8:	2a000815 	stw	r8,32(r5)
    55cc:	29c00915 	stw	r7,36(r5)
    55d0:	29800a15 	stw	r6,40(r5)
    55d4:	29000b15 	stw	r4,44(r5)
    55d8:	01400284 	movi	r5,10
    55dc:	18000015 	stw	zero,0(r3)
    55e0:	18000115 	stw	zero,4(r3)
    55e4:	18000215 	stw	zero,8(r3)
    55e8:	1940030d 	sth	r5,12(r3)
    55ec:	1a40038d 	sth	r9,14(r3)
    55f0:	18000415 	stw	zero,16(r3)
    55f4:	18000515 	stw	zero,20(r3)
    55f8:	18000615 	stw	zero,24(r3)
    55fc:	18c00715 	stw	r3,28(r3)
    5600:	1a000815 	stw	r8,32(r3)
    5604:	19c00915 	stw	r7,36(r3)
    5608:	19800a15 	stw	r6,40(r3)
    560c:	19000b15 	stw	r4,44(r3)
    5610:	00c00484 	movi	r3,18
    5614:	10c0030d 	sth	r3,12(r2)
    5618:	00c00084 	movi	r3,2
    561c:	10000015 	stw	zero,0(r2)
    5620:	10000115 	stw	zero,4(r2)
    5624:	10000215 	stw	zero,8(r2)
    5628:	10c0038d 	sth	r3,14(r2)
    562c:	10000415 	stw	zero,16(r2)
    5630:	10000515 	stw	zero,20(r2)
    5634:	10000615 	stw	zero,24(r2)
    5638:	10800715 	stw	r2,28(r2)
    563c:	12000815 	stw	r8,32(r2)
    5640:	11c00915 	stw	r7,36(r2)
    5644:	11800a15 	stw	r6,40(r2)
    5648:	11000b15 	stw	r4,44(r2)
    564c:	f800283a 	ret

00005650 <__sfp>:
    5650:	defffc04 	addi	sp,sp,-16
    5654:	00800074 	movhi	r2,1
    5658:	10bbcf04 	addi	r2,r2,-4292
    565c:	dc400115 	stw	r17,4(sp)
    5660:	14400017 	ldw	r17,0(r2)
    5664:	dc800215 	stw	r18,8(sp)
    5668:	dfc00315 	stw	ra,12(sp)
    566c:	88800e17 	ldw	r2,56(r17)
    5670:	dc000015 	stw	r16,0(sp)
    5674:	2025883a 	mov	r18,r4
    5678:	10002826 	beq	r2,zero,571c <__sfp+0xcc>
    567c:	8c40b804 	addi	r17,r17,736
    5680:	043fffc4 	movi	r16,-1
    5684:	89400117 	ldw	r5,4(r17)
    5688:	88800217 	ldw	r2,8(r17)
    568c:	297fffc4 	addi	r5,r5,-1
    5690:	28000a16 	blt	r5,zero,56bc <__sfp+0x6c>
    5694:	10c0030f 	ldh	r3,12(r2)
    5698:	18000c26 	beq	r3,zero,56cc <__sfp+0x7c>
    569c:	10c01a04 	addi	r3,r2,104
    56a0:	00000206 	br	56ac <__sfp+0x5c>
    56a4:	19bfe90f 	ldh	r6,-92(r3)
    56a8:	30000826 	beq	r6,zero,56cc <__sfp+0x7c>
    56ac:	297fffc4 	addi	r5,r5,-1
    56b0:	18bffd04 	addi	r2,r3,-12
    56b4:	18c01704 	addi	r3,r3,92
    56b8:	2c3ffa1e 	bne	r5,r16,56a4 <__sfp+0x54>
    56bc:	88800017 	ldw	r2,0(r17)
    56c0:	10001926 	beq	r2,zero,5728 <__sfp+0xd8>
    56c4:	1023883a 	mov	r17,r2
    56c8:	003fee06 	br	5684 <__sfp+0x34>
    56cc:	00ffffc4 	movi	r3,-1
    56d0:	10c0038d 	sth	r3,14(r2)
    56d4:	00c00044 	movi	r3,1
    56d8:	10c0030d 	sth	r3,12(r2)
    56dc:	10000015 	stw	zero,0(r2)
    56e0:	10000215 	stw	zero,8(r2)
    56e4:	10000115 	stw	zero,4(r2)
    56e8:	10000415 	stw	zero,16(r2)
    56ec:	10000515 	stw	zero,20(r2)
    56f0:	10000615 	stw	zero,24(r2)
    56f4:	10000c15 	stw	zero,48(r2)
    56f8:	10000d15 	stw	zero,52(r2)
    56fc:	10001115 	stw	zero,68(r2)
    5700:	10001215 	stw	zero,72(r2)
    5704:	dfc00317 	ldw	ra,12(sp)
    5708:	dc800217 	ldw	r18,8(sp)
    570c:	dc400117 	ldw	r17,4(sp)
    5710:	dc000017 	ldw	r16,0(sp)
    5714:	dec00404 	addi	sp,sp,16
    5718:	f800283a 	ret
    571c:	8809883a 	mov	r4,r17
    5720:	00055440 	call	5544 <__sinit>
    5724:	003fd506 	br	567c <__sfp+0x2c>
    5728:	9009883a 	mov	r4,r18
    572c:	01400104 	movi	r5,4
    5730:	00054bc0 	call	54bc <__sfmoreglue>
    5734:	88800015 	stw	r2,0(r17)
    5738:	103fe21e 	bne	r2,zero,56c4 <__sfp+0x74>
    573c:	00800304 	movi	r2,12
    5740:	90800015 	stw	r2,0(r18)
    5744:	0005883a 	mov	r2,zero
    5748:	003fee06 	br	5704 <__sfp+0xb4>

0000574c <__sfp_lock_acquire>:
    574c:	f800283a 	ret

00005750 <__sfp_lock_release>:
    5750:	f800283a 	ret

00005754 <__sinit_lock_acquire>:
    5754:	f800283a 	ret

00005758 <__sinit_lock_release>:
    5758:	f800283a 	ret

0000575c <__fp_lock_all>:
    575c:	00800074 	movhi	r2,1
    5760:	10bbd004 	addi	r2,r2,-4288
    5764:	11000017 	ldw	r4,0(r2)
    5768:	01400034 	movhi	r5,0
    576c:	29552804 	addi	r5,r5,21664
    5770:	000607c1 	jmpi	607c <_fwalk>

00005774 <__fp_unlock_all>:
    5774:	00800074 	movhi	r2,1
    5778:	10bbd004 	addi	r2,r2,-4288
    577c:	11000017 	ldw	r4,0(r2)
    5780:	01400034 	movhi	r5,0
    5784:	29552a04 	addi	r5,r5,21672
    5788:	000607c1 	jmpi	607c <_fwalk>

0000578c <_malloc_trim_r>:
    578c:	defffb04 	addi	sp,sp,-20
    5790:	dcc00315 	stw	r19,12(sp)
    5794:	dc800215 	stw	r18,8(sp)
    5798:	dc400115 	stw	r17,4(sp)
    579c:	dc000015 	stw	r16,0(sp)
    57a0:	2827883a 	mov	r19,r5
    57a4:	dfc00415 	stw	ra,16(sp)
    57a8:	04400074 	movhi	r17,1
    57ac:	8c764804 	addi	r17,r17,-9952
    57b0:	2021883a 	mov	r16,r4
    57b4:	000aac00 	call	aac0 <__malloc_lock>
    57b8:	88800217 	ldw	r2,8(r17)
    57bc:	14800117 	ldw	r18,4(r2)
    57c0:	00bfff04 	movi	r2,-4
    57c4:	90a4703a 	and	r18,r18,r2
    57c8:	9083fbc4 	addi	r2,r18,4079
    57cc:	14e7c83a 	sub	r19,r2,r19
    57d0:	9826d33a 	srli	r19,r19,12
    57d4:	0083ffc4 	movi	r2,4095
    57d8:	9cffffc4 	addi	r19,r19,-1
    57dc:	9826933a 	slli	r19,r19,12
    57e0:	14c0060e 	bge	r2,r19,57fc <_malloc_trim_r+0x70>
    57e4:	8009883a 	mov	r4,r16
    57e8:	000b883a 	mov	r5,zero
    57ec:	00019840 	call	1984 <_sbrk_r>
    57f0:	88c00217 	ldw	r3,8(r17)
    57f4:	1c87883a 	add	r3,r3,r18
    57f8:	10c00a26 	beq	r2,r3,5824 <_malloc_trim_r+0x98>
    57fc:	8009883a 	mov	r4,r16
    5800:	000aae00 	call	aae0 <__malloc_unlock>
    5804:	0005883a 	mov	r2,zero
    5808:	dfc00417 	ldw	ra,16(sp)
    580c:	dcc00317 	ldw	r19,12(sp)
    5810:	dc800217 	ldw	r18,8(sp)
    5814:	dc400117 	ldw	r17,4(sp)
    5818:	dc000017 	ldw	r16,0(sp)
    581c:	dec00504 	addi	sp,sp,20
    5820:	f800283a 	ret
    5824:	8009883a 	mov	r4,r16
    5828:	04cbc83a 	sub	r5,zero,r19
    582c:	00019840 	call	1984 <_sbrk_r>
    5830:	00ffffc4 	movi	r3,-1
    5834:	10c01326 	beq	r2,r3,5884 <_malloc_trim_r+0xf8>
    5838:	00800074 	movhi	r2,1
    583c:	10828304 	addi	r2,r2,2572
    5840:	11000017 	ldw	r4,0(r2)
    5844:	88c00217 	ldw	r3,8(r17)
    5848:	94e5c83a 	sub	r18,r18,r19
    584c:	94800054 	ori	r18,r18,1
    5850:	24e7c83a 	sub	r19,r4,r19
    5854:	1c800115 	stw	r18,4(r3)
    5858:	8009883a 	mov	r4,r16
    585c:	14c00015 	stw	r19,0(r2)
    5860:	000aae00 	call	aae0 <__malloc_unlock>
    5864:	00800044 	movi	r2,1
    5868:	dfc00417 	ldw	ra,16(sp)
    586c:	dcc00317 	ldw	r19,12(sp)
    5870:	dc800217 	ldw	r18,8(sp)
    5874:	dc400117 	ldw	r17,4(sp)
    5878:	dc000017 	ldw	r16,0(sp)
    587c:	dec00504 	addi	sp,sp,20
    5880:	f800283a 	ret
    5884:	8009883a 	mov	r4,r16
    5888:	000b883a 	mov	r5,zero
    588c:	00019840 	call	1984 <_sbrk_r>
    5890:	88c00217 	ldw	r3,8(r17)
    5894:	014003c4 	movi	r5,15
    5898:	10c9c83a 	sub	r4,r2,r3
    589c:	293fd70e 	bge	r5,r4,57fc <_malloc_trim_r+0x70>
    58a0:	01400074 	movhi	r5,1
    58a4:	297bd104 	addi	r5,r5,-4284
    58a8:	29400017 	ldw	r5,0(r5)
    58ac:	21000054 	ori	r4,r4,1
    58b0:	19000115 	stw	r4,4(r3)
    58b4:	1145c83a 	sub	r2,r2,r5
    58b8:	01400074 	movhi	r5,1
    58bc:	29428304 	addi	r5,r5,2572
    58c0:	28800015 	stw	r2,0(r5)
    58c4:	003fcd06 	br	57fc <_malloc_trim_r+0x70>

000058c8 <_free_r>:
    58c8:	defffd04 	addi	sp,sp,-12
    58cc:	dc400115 	stw	r17,4(sp)
    58d0:	dc000015 	stw	r16,0(sp)
    58d4:	dfc00215 	stw	ra,8(sp)
    58d8:	2821883a 	mov	r16,r5
    58dc:	2023883a 	mov	r17,r4
    58e0:	28004b26 	beq	r5,zero,5a10 <_free_r+0x148>
    58e4:	000aac00 	call	aac0 <__malloc_lock>
    58e8:	823fff17 	ldw	r8,-4(r16)
    58ec:	00bfff84 	movi	r2,-2
    58f0:	81bffe04 	addi	r6,r16,-8
    58f4:	4084703a 	and	r2,r8,r2
    58f8:	3087883a 	add	r3,r6,r2
    58fc:	01400074 	movhi	r5,1
    5900:	29764804 	addi	r5,r5,-9952
    5904:	1a400117 	ldw	r9,4(r3)
    5908:	29000217 	ldw	r4,8(r5)
    590c:	01ffff04 	movi	r7,-4
    5910:	49ce703a 	and	r7,r9,r7
    5914:	20c06526 	beq	r4,r3,5aac <_free_r+0x1e4>
    5918:	19c00115 	stw	r7,4(r3)
    591c:	4200004c 	andi	r8,r8,1
    5920:	40003026 	beq	r8,zero,59e4 <_free_r+0x11c>
    5924:	0009883a 	mov	r4,zero
    5928:	19d1883a 	add	r8,r3,r7
    592c:	42000117 	ldw	r8,4(r8)
    5930:	4200004c 	andi	r8,r8,1
    5934:	4000061e 	bne	r8,zero,5950 <_free_r+0x88>
    5938:	11c5883a 	add	r2,r2,r7
    593c:	19c00217 	ldw	r7,8(r3)
    5940:	20004e26 	beq	r4,zero,5a7c <_free_r+0x1b4>
    5944:	18c00317 	ldw	r3,12(r3)
    5948:	38c00315 	stw	r3,12(r7)
    594c:	19c00215 	stw	r7,8(r3)
    5950:	11c00054 	ori	r7,r2,1
    5954:	3087883a 	add	r3,r6,r2
    5958:	31c00115 	stw	r7,4(r6)
    595c:	18800015 	stw	r2,0(r3)
    5960:	20001a1e 	bne	r4,zero,59cc <_free_r+0x104>
    5964:	00c07fc4 	movi	r3,511
    5968:	18802e2e 	bgeu	r3,r2,5a24 <_free_r+0x15c>
    596c:	1006d27a 	srli	r3,r2,9
    5970:	01000104 	movi	r4,4
    5974:	20c06636 	bltu	r4,r3,5b10 <_free_r+0x248>
    5978:	1008d1ba 	srli	r4,r2,6
    597c:	21000e04 	addi	r4,r4,56
    5980:	210f883a 	add	r7,r4,r4
    5984:	39cf883a 	add	r7,r7,r7
    5988:	39cf883a 	add	r7,r7,r7
    598c:	29cf883a 	add	r7,r5,r7
    5990:	38c00217 	ldw	r3,8(r7)
    5994:	01400074 	movhi	r5,1
    5998:	29764804 	addi	r5,r5,-9952
    599c:	19c06126 	beq	r3,r7,5b24 <_free_r+0x25c>
    59a0:	013fff04 	movi	r4,-4
    59a4:	19400117 	ldw	r5,4(r3)
    59a8:	290a703a 	and	r5,r5,r4
    59ac:	1140022e 	bgeu	r2,r5,59b8 <_free_r+0xf0>
    59b0:	18c00217 	ldw	r3,8(r3)
    59b4:	38fffb1e 	bne	r7,r3,59a4 <_free_r+0xdc>
    59b8:	18800317 	ldw	r2,12(r3)
    59bc:	30800315 	stw	r2,12(r6)
    59c0:	30c00215 	stw	r3,8(r6)
    59c4:	11800215 	stw	r6,8(r2)
    59c8:	19800315 	stw	r6,12(r3)
    59cc:	8809883a 	mov	r4,r17
    59d0:	dfc00217 	ldw	ra,8(sp)
    59d4:	dc400117 	ldw	r17,4(sp)
    59d8:	dc000017 	ldw	r16,0(sp)
    59dc:	dec00304 	addi	sp,sp,12
    59e0:	000aae01 	jmpi	aae0 <__malloc_unlock>
    59e4:	813ffe17 	ldw	r4,-8(r16)
    59e8:	2a400204 	addi	r9,r5,8
    59ec:	310dc83a 	sub	r6,r6,r4
    59f0:	32000217 	ldw	r8,8(r6)
    59f4:	1105883a 	add	r2,r2,r4
    59f8:	42404326 	beq	r8,r9,5b08 <_free_r+0x240>
    59fc:	32400317 	ldw	r9,12(r6)
    5a00:	0009883a 	mov	r4,zero
    5a04:	42400315 	stw	r9,12(r8)
    5a08:	4a000215 	stw	r8,8(r9)
    5a0c:	003fc606 	br	5928 <_free_r+0x60>
    5a10:	dfc00217 	ldw	ra,8(sp)
    5a14:	dc400117 	ldw	r17,4(sp)
    5a18:	dc000017 	ldw	r16,0(sp)
    5a1c:	dec00304 	addi	sp,sp,12
    5a20:	f800283a 	ret
    5a24:	1004d0fa 	srli	r2,r2,3
    5a28:	02000044 	movi	r8,1
    5a2c:	29c00117 	ldw	r7,4(r5)
    5a30:	1087883a 	add	r3,r2,r2
    5a34:	18c7883a 	add	r3,r3,r3
    5a38:	1005d0ba 	srai	r2,r2,2
    5a3c:	18c7883a 	add	r3,r3,r3
    5a40:	28c7883a 	add	r3,r5,r3
    5a44:	19000217 	ldw	r4,8(r3)
    5a48:	4084983a 	sll	r2,r8,r2
    5a4c:	30c00315 	stw	r3,12(r6)
    5a50:	31000215 	stw	r4,8(r6)
    5a54:	11c4b03a 	or	r2,r2,r7
    5a58:	21800315 	stw	r6,12(r4)
    5a5c:	8809883a 	mov	r4,r17
    5a60:	28800115 	stw	r2,4(r5)
    5a64:	19800215 	stw	r6,8(r3)
    5a68:	dfc00217 	ldw	ra,8(sp)
    5a6c:	dc400117 	ldw	r17,4(sp)
    5a70:	dc000017 	ldw	r16,0(sp)
    5a74:	dec00304 	addi	sp,sp,12
    5a78:	000aae01 	jmpi	aae0 <__malloc_unlock>
    5a7c:	02000074 	movhi	r8,1
    5a80:	42364a04 	addi	r8,r8,-9944
    5a84:	3a3faf1e 	bne	r7,r8,5944 <_free_r+0x7c>
    5a88:	29800515 	stw	r6,20(r5)
    5a8c:	29800415 	stw	r6,16(r5)
    5a90:	11000054 	ori	r4,r2,1
    5a94:	3087883a 	add	r3,r6,r2
    5a98:	31c00315 	stw	r7,12(r6)
    5a9c:	31c00215 	stw	r7,8(r6)
    5aa0:	31000115 	stw	r4,4(r6)
    5aa4:	18800015 	stw	r2,0(r3)
    5aa8:	003fc806 	br	59cc <_free_r+0x104>
    5aac:	4200004c 	andi	r8,r8,1
    5ab0:	3885883a 	add	r2,r7,r2
    5ab4:	4000071e 	bne	r8,zero,5ad4 <_free_r+0x20c>
    5ab8:	81fffe17 	ldw	r7,-8(r16)
    5abc:	31cdc83a 	sub	r6,r6,r7
    5ac0:	30c00317 	ldw	r3,12(r6)
    5ac4:	31000217 	ldw	r4,8(r6)
    5ac8:	11c5883a 	add	r2,r2,r7
    5acc:	20c00315 	stw	r3,12(r4)
    5ad0:	19000215 	stw	r4,8(r3)
    5ad4:	00c00074 	movhi	r3,1
    5ad8:	18fbd204 	addi	r3,r3,-4280
    5adc:	18c00017 	ldw	r3,0(r3)
    5ae0:	11000054 	ori	r4,r2,1
    5ae4:	31000115 	stw	r4,4(r6)
    5ae8:	29800215 	stw	r6,8(r5)
    5aec:	10ffb736 	bltu	r2,r3,59cc <_free_r+0x104>
    5af0:	00800074 	movhi	r2,1
    5af4:	10827804 	addi	r2,r2,2528
    5af8:	11400017 	ldw	r5,0(r2)
    5afc:	8809883a 	mov	r4,r17
    5b00:	000578c0 	call	578c <_malloc_trim_r>
    5b04:	003fb106 	br	59cc <_free_r+0x104>
    5b08:	01000044 	movi	r4,1
    5b0c:	003f8606 	br	5928 <_free_r+0x60>
    5b10:	01000504 	movi	r4,20
    5b14:	20c00b36 	bltu	r4,r3,5b44 <_free_r+0x27c>
    5b18:	190016c4 	addi	r4,r3,91
    5b1c:	210f883a 	add	r7,r4,r4
    5b20:	003f9806 	br	5984 <_free_r+0xbc>
    5b24:	2009d0ba 	srai	r4,r4,2
    5b28:	00800044 	movi	r2,1
    5b2c:	29c00117 	ldw	r7,4(r5)
    5b30:	1108983a 	sll	r4,r2,r4
    5b34:	1805883a 	mov	r2,r3
    5b38:	21c8b03a 	or	r4,r4,r7
    5b3c:	29000115 	stw	r4,4(r5)
    5b40:	003f9e06 	br	59bc <_free_r+0xf4>
    5b44:	01001504 	movi	r4,84
    5b48:	20c00436 	bltu	r4,r3,5b5c <_free_r+0x294>
    5b4c:	1008d33a 	srli	r4,r2,12
    5b50:	21001b84 	addi	r4,r4,110
    5b54:	210f883a 	add	r7,r4,r4
    5b58:	003f8a06 	br	5984 <_free_r+0xbc>
    5b5c:	01005504 	movi	r4,340
    5b60:	20c00436 	bltu	r4,r3,5b74 <_free_r+0x2ac>
    5b64:	1008d3fa 	srli	r4,r2,15
    5b68:	21001dc4 	addi	r4,r4,119
    5b6c:	210f883a 	add	r7,r4,r4
    5b70:	003f8406 	br	5984 <_free_r+0xbc>
    5b74:	01015504 	movi	r4,1364
    5b78:	20c00436 	bltu	r4,r3,5b8c <_free_r+0x2c4>
    5b7c:	1008d4ba 	srli	r4,r2,18
    5b80:	21001f04 	addi	r4,r4,124
    5b84:	210f883a 	add	r7,r4,r4
    5b88:	003f7e06 	br	5984 <_free_r+0xbc>
    5b8c:	01c03f04 	movi	r7,252
    5b90:	01001f84 	movi	r4,126
    5b94:	003f7b06 	br	5984 <_free_r+0xbc>

00005b98 <__sfvwrite_r>:
    5b98:	30800217 	ldw	r2,8(r6)
    5b9c:	defff504 	addi	sp,sp,-44
    5ba0:	dd400615 	stw	r21,24(sp)
    5ba4:	dd000515 	stw	r20,20(sp)
    5ba8:	dc000115 	stw	r16,4(sp)
    5bac:	dfc00a15 	stw	ra,40(sp)
    5bb0:	df000915 	stw	fp,36(sp)
    5bb4:	ddc00815 	stw	r23,32(sp)
    5bb8:	dd800715 	stw	r22,28(sp)
    5bbc:	dcc00415 	stw	r19,16(sp)
    5bc0:	dc800315 	stw	r18,12(sp)
    5bc4:	dc400215 	stw	r17,8(sp)
    5bc8:	3029883a 	mov	r20,r6
    5bcc:	202b883a 	mov	r21,r4
    5bd0:	2821883a 	mov	r16,r5
    5bd4:	10002126 	beq	r2,zero,5c5c <__sfvwrite_r+0xc4>
    5bd8:	2880030b 	ldhu	r2,12(r5)
    5bdc:	10c0020c 	andi	r3,r2,8
    5be0:	18ffffcc 	andi	r3,r3,65535
    5be4:	18e0001c 	xori	r3,r3,32768
    5be8:	18e00004 	addi	r3,r3,-32768
    5bec:	18002826 	beq	r3,zero,5c90 <__sfvwrite_r+0xf8>
    5bf0:	28c00417 	ldw	r3,16(r5)
    5bf4:	18002626 	beq	r3,zero,5c90 <__sfvwrite_r+0xf8>
    5bf8:	10c0008c 	andi	r3,r2,2
    5bfc:	18ffffcc 	andi	r3,r3,65535
    5c00:	18e0001c 	xori	r3,r3,32768
    5c04:	18e00004 	addi	r3,r3,-32768
    5c08:	a4400017 	ldw	r17,0(r20)
    5c0c:	18002b26 	beq	r3,zero,5cbc <__sfvwrite_r+0x124>
    5c10:	0027883a 	mov	r19,zero
    5c14:	0025883a 	mov	r18,zero
    5c18:	05810004 	movi	r22,1024
    5c1c:	980d883a 	mov	r6,r19
    5c20:	a809883a 	mov	r4,r21
    5c24:	90004f26 	beq	r18,zero,5d64 <__sfvwrite_r+0x1cc>
    5c28:	900f883a 	mov	r7,r18
    5c2c:	81400717 	ldw	r5,28(r16)
    5c30:	b480012e 	bgeu	r22,r18,5c38 <__sfvwrite_r+0xa0>
    5c34:	01c10004 	movi	r7,1024
    5c38:	80800917 	ldw	r2,36(r16)
    5c3c:	103ee83a 	callr	r2
    5c40:	0080540e 	bge	zero,r2,5d94 <__sfvwrite_r+0x1fc>
    5c44:	a0c00217 	ldw	r3,8(r20)
    5c48:	98a7883a 	add	r19,r19,r2
    5c4c:	90a5c83a 	sub	r18,r18,r2
    5c50:	1885c83a 	sub	r2,r3,r2
    5c54:	a0800215 	stw	r2,8(r20)
    5c58:	103ff01e 	bne	r2,zero,5c1c <__sfvwrite_r+0x84>
    5c5c:	0005883a 	mov	r2,zero
    5c60:	dfc00a17 	ldw	ra,40(sp)
    5c64:	df000917 	ldw	fp,36(sp)
    5c68:	ddc00817 	ldw	r23,32(sp)
    5c6c:	dd800717 	ldw	r22,28(sp)
    5c70:	dd400617 	ldw	r21,24(sp)
    5c74:	dd000517 	ldw	r20,20(sp)
    5c78:	dcc00417 	ldw	r19,16(sp)
    5c7c:	dc800317 	ldw	r18,12(sp)
    5c80:	dc400217 	ldw	r17,8(sp)
    5c84:	dc000117 	ldw	r16,4(sp)
    5c88:	dec00b04 	addi	sp,sp,44
    5c8c:	f800283a 	ret
    5c90:	a809883a 	mov	r4,r21
    5c94:	800b883a 	mov	r5,r16
    5c98:	00038bc0 	call	38bc <__swsetup_r>
    5c9c:	1000f01e 	bne	r2,zero,6060 <__sfvwrite_r+0x4c8>
    5ca0:	8080030b 	ldhu	r2,12(r16)
    5ca4:	a4400017 	ldw	r17,0(r20)
    5ca8:	10c0008c 	andi	r3,r2,2
    5cac:	18ffffcc 	andi	r3,r3,65535
    5cb0:	18e0001c 	xori	r3,r3,32768
    5cb4:	18e00004 	addi	r3,r3,-32768
    5cb8:	183fd51e 	bne	r3,zero,5c10 <__sfvwrite_r+0x78>
    5cbc:	10c0004c 	andi	r3,r2,1
    5cc0:	002d883a 	mov	r22,zero
    5cc4:	1800381e 	bne	r3,zero,5da8 <__sfvwrite_r+0x210>
    5cc8:	0025883a 	mov	r18,zero
    5ccc:	90002126 	beq	r18,zero,5d54 <__sfvwrite_r+0x1bc>
    5cd0:	10c0800c 	andi	r3,r2,512
    5cd4:	18ffffcc 	andi	r3,r3,65535
    5cd8:	18e0001c 	xori	r3,r3,32768
    5cdc:	18e00004 	addi	r3,r3,-32768
    5ce0:	84c00217 	ldw	r19,8(r16)
    5ce4:	18006b26 	beq	r3,zero,5e94 <__sfvwrite_r+0x2fc>
    5ce8:	980f883a 	mov	r7,r19
    5cec:	94c08636 	bltu	r18,r19,5f08 <__sfvwrite_r+0x370>
    5cf0:	10c1200c 	andi	r3,r2,1152
    5cf4:	18009f1e 	bne	r3,zero,5f74 <__sfvwrite_r+0x3dc>
    5cf8:	81000017 	ldw	r4,0(r16)
    5cfc:	982f883a 	mov	r23,r19
    5d00:	9039883a 	mov	fp,r18
    5d04:	9027883a 	mov	r19,r18
    5d08:	380d883a 	mov	r6,r7
    5d0c:	b00b883a 	mov	r5,r22
    5d10:	d9c00015 	stw	r7,0(sp)
    5d14:	00065580 	call	6558 <memmove>
    5d18:	d9c00017 	ldw	r7,0(sp)
    5d1c:	81000217 	ldw	r4,8(r16)
    5d20:	80800017 	ldw	r2,0(r16)
    5d24:	25efc83a 	sub	r23,r4,r23
    5d28:	11cf883a 	add	r7,r2,r7
    5d2c:	85c00215 	stw	r23,8(r16)
    5d30:	81c00015 	stw	r7,0(r16)
    5d34:	a0800217 	ldw	r2,8(r20)
    5d38:	b72d883a 	add	r22,r22,fp
    5d3c:	9725c83a 	sub	r18,r18,fp
    5d40:	14e7c83a 	sub	r19,r2,r19
    5d44:	a4c00215 	stw	r19,8(r20)
    5d48:	983fc426 	beq	r19,zero,5c5c <__sfvwrite_r+0xc4>
    5d4c:	8080030b 	ldhu	r2,12(r16)
    5d50:	903fdf1e 	bne	r18,zero,5cd0 <__sfvwrite_r+0x138>
    5d54:	8d800017 	ldw	r22,0(r17)
    5d58:	8c800117 	ldw	r18,4(r17)
    5d5c:	8c400204 	addi	r17,r17,8
    5d60:	003fda06 	br	5ccc <__sfvwrite_r+0x134>
    5d64:	8cc00017 	ldw	r19,0(r17)
    5d68:	8c800117 	ldw	r18,4(r17)
    5d6c:	8c400204 	addi	r17,r17,8
    5d70:	003faa06 	br	5c1c <__sfvwrite_r+0x84>
    5d74:	00077340 	call	7734 <_realloc_r>
    5d78:	102f883a 	mov	r23,r2
    5d7c:	10009f1e 	bne	r2,zero,5ffc <__sfvwrite_r+0x464>
    5d80:	81400417 	ldw	r5,16(r16)
    5d84:	a809883a 	mov	r4,r21
    5d88:	00058c80 	call	58c8 <_free_r>
    5d8c:	00800304 	movi	r2,12
    5d90:	a8800015 	stw	r2,0(r21)
    5d94:	80c0030b 	ldhu	r3,12(r16)
    5d98:	00bfffc4 	movi	r2,-1
    5d9c:	18c01014 	ori	r3,r3,64
    5da0:	80c0030d 	sth	r3,12(r16)
    5da4:	003fae06 	br	5c60 <__sfvwrite_r+0xc8>
    5da8:	0007883a 	mov	r3,zero
    5dac:	0039883a 	mov	fp,zero
    5db0:	0025883a 	mov	r18,zero
    5db4:	90001e26 	beq	r18,zero,5e30 <__sfvwrite_r+0x298>
    5db8:	18006526 	beq	r3,zero,5f50 <__sfvwrite_r+0x3b8>
    5dbc:	b02f883a 	mov	r23,r22
    5dc0:	9580012e 	bgeu	r18,r22,5dc8 <__sfvwrite_r+0x230>
    5dc4:	902f883a 	mov	r23,r18
    5dc8:	81000017 	ldw	r4,0(r16)
    5dcc:	80800417 	ldw	r2,16(r16)
    5dd0:	84c00217 	ldw	r19,8(r16)
    5dd4:	81c00517 	ldw	r7,20(r16)
    5dd8:	1100022e 	bgeu	r2,r4,5de4 <__sfvwrite_r+0x24c>
    5ddc:	99e7883a 	add	r19,r19,r7
    5de0:	9dc01816 	blt	r19,r23,5e44 <__sfvwrite_r+0x2ac>
    5de4:	b9c03b16 	blt	r23,r7,5ed4 <__sfvwrite_r+0x33c>
    5de8:	80800917 	ldw	r2,36(r16)
    5dec:	81400717 	ldw	r5,28(r16)
    5df0:	a809883a 	mov	r4,r21
    5df4:	d8c00015 	stw	r3,0(sp)
    5df8:	e00d883a 	mov	r6,fp
    5dfc:	103ee83a 	callr	r2
    5e00:	1027883a 	mov	r19,r2
    5e04:	d8c00017 	ldw	r3,0(sp)
    5e08:	00bfe20e 	bge	zero,r2,5d94 <__sfvwrite_r+0x1fc>
    5e0c:	b4edc83a 	sub	r22,r22,r19
    5e10:	b0001a26 	beq	r22,zero,5e7c <__sfvwrite_r+0x2e4>
    5e14:	a0800217 	ldw	r2,8(r20)
    5e18:	e4f9883a 	add	fp,fp,r19
    5e1c:	94e5c83a 	sub	r18,r18,r19
    5e20:	14e7c83a 	sub	r19,r2,r19
    5e24:	a4c00215 	stw	r19,8(r20)
    5e28:	983f8c26 	beq	r19,zero,5c5c <__sfvwrite_r+0xc4>
    5e2c:	903fe21e 	bne	r18,zero,5db8 <__sfvwrite_r+0x220>
    5e30:	8f000017 	ldw	fp,0(r17)
    5e34:	8c800117 	ldw	r18,4(r17)
    5e38:	0007883a 	mov	r3,zero
    5e3c:	8c400204 	addi	r17,r17,8
    5e40:	003fdc06 	br	5db4 <__sfvwrite_r+0x21c>
    5e44:	e00b883a 	mov	r5,fp
    5e48:	980d883a 	mov	r6,r19
    5e4c:	d8c00015 	stw	r3,0(sp)
    5e50:	00065580 	call	6558 <memmove>
    5e54:	80800017 	ldw	r2,0(r16)
    5e58:	a809883a 	mov	r4,r21
    5e5c:	800b883a 	mov	r5,r16
    5e60:	14c5883a 	add	r2,r2,r19
    5e64:	80800015 	stw	r2,0(r16)
    5e68:	00052880 	call	5288 <_fflush_r>
    5e6c:	d8c00017 	ldw	r3,0(sp)
    5e70:	103fc81e 	bne	r2,zero,5d94 <__sfvwrite_r+0x1fc>
    5e74:	b4edc83a 	sub	r22,r22,r19
    5e78:	b03fe61e 	bne	r22,zero,5e14 <__sfvwrite_r+0x27c>
    5e7c:	a809883a 	mov	r4,r21
    5e80:	800b883a 	mov	r5,r16
    5e84:	00052880 	call	5288 <_fflush_r>
    5e88:	103fc21e 	bne	r2,zero,5d94 <__sfvwrite_r+0x1fc>
    5e8c:	0007883a 	mov	r3,zero
    5e90:	003fe006 	br	5e14 <__sfvwrite_r+0x27c>
    5e94:	81000017 	ldw	r4,0(r16)
    5e98:	80800417 	ldw	r2,16(r16)
    5e9c:	1100022e 	bgeu	r2,r4,5ea8 <__sfvwrite_r+0x310>
    5ea0:	9839883a 	mov	fp,r19
    5ea4:	9c806036 	bltu	r19,r18,6028 <__sfvwrite_r+0x490>
    5ea8:	81c00517 	ldw	r7,20(r16)
    5eac:	91c01c36 	bltu	r18,r7,5f20 <__sfvwrite_r+0x388>
    5eb0:	80800917 	ldw	r2,36(r16)
    5eb4:	81400717 	ldw	r5,28(r16)
    5eb8:	a809883a 	mov	r4,r21
    5ebc:	b00d883a 	mov	r6,r22
    5ec0:	103ee83a 	callr	r2
    5ec4:	1027883a 	mov	r19,r2
    5ec8:	00bfb20e 	bge	zero,r2,5d94 <__sfvwrite_r+0x1fc>
    5ecc:	1039883a 	mov	fp,r2
    5ed0:	003f9806 	br	5d34 <__sfvwrite_r+0x19c>
    5ed4:	b80d883a 	mov	r6,r23
    5ed8:	e00b883a 	mov	r5,fp
    5edc:	d8c00015 	stw	r3,0(sp)
    5ee0:	00065580 	call	6558 <memmove>
    5ee4:	80800217 	ldw	r2,8(r16)
    5ee8:	81000017 	ldw	r4,0(r16)
    5eec:	b827883a 	mov	r19,r23
    5ef0:	15c5c83a 	sub	r2,r2,r23
    5ef4:	25ef883a 	add	r23,r4,r23
    5ef8:	80800215 	stw	r2,8(r16)
    5efc:	85c00015 	stw	r23,0(r16)
    5f00:	d8c00017 	ldw	r3,0(sp)
    5f04:	003fc106 	br	5e0c <__sfvwrite_r+0x274>
    5f08:	81000017 	ldw	r4,0(r16)
    5f0c:	902f883a 	mov	r23,r18
    5f10:	9039883a 	mov	fp,r18
    5f14:	9027883a 	mov	r19,r18
    5f18:	900f883a 	mov	r7,r18
    5f1c:	003f7a06 	br	5d08 <__sfvwrite_r+0x170>
    5f20:	b00b883a 	mov	r5,r22
    5f24:	900d883a 	mov	r6,r18
    5f28:	00065580 	call	6558 <memmove>
    5f2c:	80c00217 	ldw	r3,8(r16)
    5f30:	80800017 	ldw	r2,0(r16)
    5f34:	9027883a 	mov	r19,r18
    5f38:	1c87c83a 	sub	r3,r3,r18
    5f3c:	1485883a 	add	r2,r2,r18
    5f40:	80c00215 	stw	r3,8(r16)
    5f44:	80800015 	stw	r2,0(r16)
    5f48:	9039883a 	mov	fp,r18
    5f4c:	003f7906 	br	5d34 <__sfvwrite_r+0x19c>
    5f50:	e009883a 	mov	r4,fp
    5f54:	01400284 	movi	r5,10
    5f58:	900d883a 	mov	r6,r18
    5f5c:	00064600 	call	6460 <memchr>
    5f60:	10003c26 	beq	r2,zero,6054 <__sfvwrite_r+0x4bc>
    5f64:	15800044 	addi	r22,r2,1
    5f68:	b72dc83a 	sub	r22,r22,fp
    5f6c:	00c00044 	movi	r3,1
    5f70:	003f9206 	br	5dbc <__sfvwrite_r+0x224>
    5f74:	81000517 	ldw	r4,20(r16)
    5f78:	81400417 	ldw	r5,16(r16)
    5f7c:	80c00017 	ldw	r3,0(r16)
    5f80:	210d883a 	add	r6,r4,r4
    5f84:	3109883a 	add	r4,r6,r4
    5f88:	2026d7fa 	srli	r19,r4,31
    5f8c:	1979c83a 	sub	fp,r3,r5
    5f90:	e1800044 	addi	r6,fp,1
    5f94:	9909883a 	add	r4,r19,r4
    5f98:	2027d07a 	srai	r19,r4,1
    5f9c:	3489883a 	add	r4,r6,r18
    5fa0:	980d883a 	mov	r6,r19
    5fa4:	9900022e 	bgeu	r19,r4,5fb0 <__sfvwrite_r+0x418>
    5fa8:	2027883a 	mov	r19,r4
    5fac:	200d883a 	mov	r6,r4
    5fb0:	1081000c 	andi	r2,r2,1024
    5fb4:	10bfffcc 	andi	r2,r2,65535
    5fb8:	10a0001c 	xori	r2,r2,32768
    5fbc:	10a00004 	addi	r2,r2,-32768
    5fc0:	a809883a 	mov	r4,r21
    5fc4:	103f6b26 	beq	r2,zero,5d74 <__sfvwrite_r+0x1dc>
    5fc8:	300b883a 	mov	r5,r6
    5fcc:	0000f7c0 	call	f7c <_malloc_r>
    5fd0:	102f883a 	mov	r23,r2
    5fd4:	103f6d26 	beq	r2,zero,5d8c <__sfvwrite_r+0x1f4>
    5fd8:	81400417 	ldw	r5,16(r16)
    5fdc:	1009883a 	mov	r4,r2
    5fe0:	e00d883a 	mov	r6,fp
    5fe4:	00017000 	call	1700 <memcpy>
    5fe8:	8080030b 	ldhu	r2,12(r16)
    5fec:	00fedfc4 	movi	r3,-1153
    5ff0:	10c4703a 	and	r2,r2,r3
    5ff4:	10802014 	ori	r2,r2,128
    5ff8:	8080030d 	sth	r2,12(r16)
    5ffc:	bf09883a 	add	r4,r23,fp
    6000:	9f07c83a 	sub	r3,r19,fp
    6004:	85c00415 	stw	r23,16(r16)
    6008:	84c00515 	stw	r19,20(r16)
    600c:	81000015 	stw	r4,0(r16)
    6010:	902f883a 	mov	r23,r18
    6014:	80c00215 	stw	r3,8(r16)
    6018:	9039883a 	mov	fp,r18
    601c:	9027883a 	mov	r19,r18
    6020:	900f883a 	mov	r7,r18
    6024:	003f3806 	br	5d08 <__sfvwrite_r+0x170>
    6028:	b00b883a 	mov	r5,r22
    602c:	980d883a 	mov	r6,r19
    6030:	00065580 	call	6558 <memmove>
    6034:	80800017 	ldw	r2,0(r16)
    6038:	a809883a 	mov	r4,r21
    603c:	800b883a 	mov	r5,r16
    6040:	14c5883a 	add	r2,r2,r19
    6044:	80800015 	stw	r2,0(r16)
    6048:	00052880 	call	5288 <_fflush_r>
    604c:	103f3926 	beq	r2,zero,5d34 <__sfvwrite_r+0x19c>
    6050:	003f5006 	br	5d94 <__sfvwrite_r+0x1fc>
    6054:	95800044 	addi	r22,r18,1
    6058:	00c00044 	movi	r3,1
    605c:	003f5706 	br	5dbc <__sfvwrite_r+0x224>
    6060:	80c0030b 	ldhu	r3,12(r16)
    6064:	00bfffc4 	movi	r2,-1
    6068:	18c01014 	ori	r3,r3,64
    606c:	80c0030d 	sth	r3,12(r16)
    6070:	00c00244 	movi	r3,9
    6074:	a8c00015 	stw	r3,0(r21)
    6078:	003ef906 	br	5c60 <__sfvwrite_r+0xc8>

0000607c <_fwalk>:
    607c:	defff904 	addi	sp,sp,-28
    6080:	dcc00315 	stw	r19,12(sp)
    6084:	24c0b804 	addi	r19,r4,736
    6088:	dd400515 	stw	r21,20(sp)
    608c:	dd000415 	stw	r20,16(sp)
    6090:	dfc00615 	stw	ra,24(sp)
    6094:	dc800215 	stw	r18,8(sp)
    6098:	dc400115 	stw	r17,4(sp)
    609c:	dc000015 	stw	r16,0(sp)
    60a0:	282b883a 	mov	r21,r5
    60a4:	0029883a 	mov	r20,zero
    60a8:	000574c0 	call	574c <__sfp_lock_acquire>
    60ac:	98001226 	beq	r19,zero,60f8 <_fwalk+0x7c>
    60b0:	04bfffc4 	movi	r18,-1
    60b4:	9c400117 	ldw	r17,4(r19)
    60b8:	9c000217 	ldw	r16,8(r19)
    60bc:	8c7fffc4 	addi	r17,r17,-1
    60c0:	88000b16 	blt	r17,zero,60f0 <_fwalk+0x74>
    60c4:	84000304 	addi	r16,r16,12
    60c8:	80c0000f 	ldh	r3,0(r16)
    60cc:	8c7fffc4 	addi	r17,r17,-1
    60d0:	813ffd04 	addi	r4,r16,-12
    60d4:	18000426 	beq	r3,zero,60e8 <_fwalk+0x6c>
    60d8:	80c0008f 	ldh	r3,2(r16)
    60dc:	1c800226 	beq	r3,r18,60e8 <_fwalk+0x6c>
    60e0:	a83ee83a 	callr	r21
    60e4:	a0a8b03a 	or	r20,r20,r2
    60e8:	84001704 	addi	r16,r16,92
    60ec:	8cbff61e 	bne	r17,r18,60c8 <_fwalk+0x4c>
    60f0:	9cc00017 	ldw	r19,0(r19)
    60f4:	983fef1e 	bne	r19,zero,60b4 <_fwalk+0x38>
    60f8:	00057500 	call	5750 <__sfp_lock_release>
    60fc:	a005883a 	mov	r2,r20
    6100:	dfc00617 	ldw	ra,24(sp)
    6104:	dd400517 	ldw	r21,20(sp)
    6108:	dd000417 	ldw	r20,16(sp)
    610c:	dcc00317 	ldw	r19,12(sp)
    6110:	dc800217 	ldw	r18,8(sp)
    6114:	dc400117 	ldw	r17,4(sp)
    6118:	dc000017 	ldw	r16,0(sp)
    611c:	dec00704 	addi	sp,sp,28
    6120:	f800283a 	ret

00006124 <_fwalk_reent>:
    6124:	defff804 	addi	sp,sp,-32
    6128:	dcc00315 	stw	r19,12(sp)
    612c:	24c0b804 	addi	r19,r4,736
    6130:	dd800615 	stw	r22,24(sp)
    6134:	dd400515 	stw	r21,20(sp)
    6138:	dd000415 	stw	r20,16(sp)
    613c:	dfc00715 	stw	ra,28(sp)
    6140:	dc800215 	stw	r18,8(sp)
    6144:	dc400115 	stw	r17,4(sp)
    6148:	dc000015 	stw	r16,0(sp)
    614c:	2029883a 	mov	r20,r4
    6150:	282b883a 	mov	r21,r5
    6154:	002d883a 	mov	r22,zero
    6158:	000574c0 	call	574c <__sfp_lock_acquire>
    615c:	98001326 	beq	r19,zero,61ac <_fwalk_reent+0x88>
    6160:	04bfffc4 	movi	r18,-1
    6164:	9c400117 	ldw	r17,4(r19)
    6168:	9c000217 	ldw	r16,8(r19)
    616c:	8c7fffc4 	addi	r17,r17,-1
    6170:	88000c16 	blt	r17,zero,61a4 <_fwalk_reent+0x80>
    6174:	84000304 	addi	r16,r16,12
    6178:	80c0000f 	ldh	r3,0(r16)
    617c:	8c7fffc4 	addi	r17,r17,-1
    6180:	817ffd04 	addi	r5,r16,-12
    6184:	18000526 	beq	r3,zero,619c <_fwalk_reent+0x78>
    6188:	80c0008f 	ldh	r3,2(r16)
    618c:	a009883a 	mov	r4,r20
    6190:	1c800226 	beq	r3,r18,619c <_fwalk_reent+0x78>
    6194:	a83ee83a 	callr	r21
    6198:	b0acb03a 	or	r22,r22,r2
    619c:	84001704 	addi	r16,r16,92
    61a0:	8cbff51e 	bne	r17,r18,6178 <_fwalk_reent+0x54>
    61a4:	9cc00017 	ldw	r19,0(r19)
    61a8:	983fee1e 	bne	r19,zero,6164 <_fwalk_reent+0x40>
    61ac:	00057500 	call	5750 <__sfp_lock_release>
    61b0:	b005883a 	mov	r2,r22
    61b4:	dfc00717 	ldw	ra,28(sp)
    61b8:	dd800617 	ldw	r22,24(sp)
    61bc:	dd400517 	ldw	r21,20(sp)
    61c0:	dd000417 	ldw	r20,16(sp)
    61c4:	dcc00317 	ldw	r19,12(sp)
    61c8:	dc800217 	ldw	r18,8(sp)
    61cc:	dc400117 	ldw	r17,4(sp)
    61d0:	dc000017 	ldw	r16,0(sp)
    61d4:	dec00804 	addi	sp,sp,32
    61d8:	f800283a 	ret

000061dc <_setlocale_r>:
    61dc:	defffc04 	addi	sp,sp,-16
    61e0:	dc800215 	stw	r18,8(sp)
    61e4:	dc400115 	stw	r17,4(sp)
    61e8:	dc000015 	stw	r16,0(sp)
    61ec:	dfc00315 	stw	ra,12(sp)
    61f0:	3021883a 	mov	r16,r6
    61f4:	2023883a 	mov	r17,r4
    61f8:	2825883a 	mov	r18,r5
    61fc:	30001626 	beq	r6,zero,6258 <_setlocale_r+0x7c>
    6200:	3009883a 	mov	r4,r6
    6204:	01400074 	movhi	r5,1
    6208:	29748104 	addi	r5,r5,-11772
    620c:	0007ed40 	call	7ed4 <strcmp>
    6210:	10000a1e 	bne	r2,zero,623c <_setlocale_r+0x60>
    6214:	8c800c15 	stw	r18,48(r17)
    6218:	8c000d15 	stw	r16,52(r17)
    621c:	00800074 	movhi	r2,1
    6220:	10b48104 	addi	r2,r2,-11772
    6224:	dfc00317 	ldw	ra,12(sp)
    6228:	dc800217 	ldw	r18,8(sp)
    622c:	dc400117 	ldw	r17,4(sp)
    6230:	dc000017 	ldw	r16,0(sp)
    6234:	dec00404 	addi	sp,sp,16
    6238:	f800283a 	ret
    623c:	8009883a 	mov	r4,r16
    6240:	01400074 	movhi	r5,1
    6244:	29748a04 	addi	r5,r5,-11736
    6248:	0007ed40 	call	7ed4 <strcmp>
    624c:	103ff126 	beq	r2,zero,6214 <_setlocale_r+0x38>
    6250:	0005883a 	mov	r2,zero
    6254:	003ff306 	br	6224 <_setlocale_r+0x48>
    6258:	00800074 	movhi	r2,1
    625c:	10b48104 	addi	r2,r2,-11772
    6260:	dfc00317 	ldw	ra,12(sp)
    6264:	dc800217 	ldw	r18,8(sp)
    6268:	dc400117 	ldw	r17,4(sp)
    626c:	dc000017 	ldw	r16,0(sp)
    6270:	dec00404 	addi	sp,sp,16
    6274:	f800283a 	ret

00006278 <__locale_charset>:
    6278:	00800074 	movhi	r2,1
    627c:	10b49f04 	addi	r2,r2,-11652
    6280:	f800283a 	ret

00006284 <_localeconv_r>:
    6284:	00800074 	movhi	r2,1
    6288:	10b4a304 	addi	r2,r2,-11636
    628c:	f800283a 	ret

00006290 <setlocale>:
    6290:	00c00074 	movhi	r3,1
    6294:	18fbd004 	addi	r3,r3,-4288
    6298:	2005883a 	mov	r2,r4
    629c:	19000017 	ldw	r4,0(r3)
    62a0:	280d883a 	mov	r6,r5
    62a4:	100b883a 	mov	r5,r2
    62a8:	00061dc1 	jmpi	61dc <_setlocale_r>

000062ac <localeconv>:
    62ac:	00800074 	movhi	r2,1
    62b0:	10b4a304 	addi	r2,r2,-11636
    62b4:	f800283a 	ret

000062b8 <__smakebuf_r>:
    62b8:	2880030b 	ldhu	r2,12(r5)
    62bc:	deffed04 	addi	sp,sp,-76
    62c0:	dc401015 	stw	r17,64(sp)
    62c4:	10c0008c 	andi	r3,r2,2
    62c8:	18ffffcc 	andi	r3,r3,65535
    62cc:	18e0001c 	xori	r3,r3,32768
    62d0:	dc000f15 	stw	r16,60(sp)
    62d4:	dfc01215 	stw	ra,72(sp)
    62d8:	dc801115 	stw	r18,68(sp)
    62dc:	18e00004 	addi	r3,r3,-32768
    62e0:	2821883a 	mov	r16,r5
    62e4:	2023883a 	mov	r17,r4
    62e8:	1800381e 	bne	r3,zero,63cc <__smakebuf_r+0x114>
    62ec:	2940038f 	ldh	r5,14(r5)
    62f0:	28002d16 	blt	r5,zero,63a8 <__smakebuf_r+0xf0>
    62f4:	d80d883a 	mov	r6,sp
    62f8:	00082240 	call	8224 <_fstat_r>
    62fc:	10002916 	blt	r2,zero,63a4 <__smakebuf_r+0xec>
    6300:	d8800117 	ldw	r2,4(sp)
    6304:	00e00014 	movui	r3,32768
    6308:	10bc000c 	andi	r2,r2,61440
    630c:	10c03c26 	beq	r2,r3,6400 <__smakebuf_r+0x148>
    6310:	80c0030b 	ldhu	r3,12(r16)
    6314:	18c20014 	ori	r3,r3,2048
    6318:	80c0030d 	sth	r3,12(r16)
    631c:	00c80004 	movi	r3,8192
    6320:	10c00c1e 	bne	r2,r3,6354 <__smakebuf_r+0x9c>
    6324:	8140038f 	ldh	r5,14(r16)
    6328:	8809883a 	mov	r4,r17
    632c:	000828c0 	call	828c <_isatty_r>
    6330:	10000826 	beq	r2,zero,6354 <__smakebuf_r+0x9c>
    6334:	80c0030b 	ldhu	r3,12(r16)
    6338:	808010c4 	addi	r2,r16,67
    633c:	80800015 	stw	r2,0(r16)
    6340:	18c00054 	ori	r3,r3,1
    6344:	80800415 	stw	r2,16(r16)
    6348:	00800044 	movi	r2,1
    634c:	80c0030d 	sth	r3,12(r16)
    6350:	80800515 	stw	r2,20(r16)
    6354:	04810004 	movi	r18,1024
    6358:	8809883a 	mov	r4,r17
    635c:	900b883a 	mov	r5,r18
    6360:	0000f7c0 	call	f7c <_malloc_r>
    6364:	10003026 	beq	r2,zero,6428 <__smakebuf_r+0x170>
    6368:	80c0030b 	ldhu	r3,12(r16)
    636c:	01000034 	movhi	r4,0
    6370:	21152c04 	addi	r4,r4,21680
    6374:	89000f15 	stw	r4,60(r17)
    6378:	18c02014 	ori	r3,r3,128
    637c:	80c0030d 	sth	r3,12(r16)
    6380:	80800015 	stw	r2,0(r16)
    6384:	80800415 	stw	r2,16(r16)
    6388:	84800515 	stw	r18,20(r16)
    638c:	dfc01217 	ldw	ra,72(sp)
    6390:	dc801117 	ldw	r18,68(sp)
    6394:	dc401017 	ldw	r17,64(sp)
    6398:	dc000f17 	ldw	r16,60(sp)
    639c:	dec01304 	addi	sp,sp,76
    63a0:	f800283a 	ret
    63a4:	8080030b 	ldhu	r2,12(r16)
    63a8:	10c0200c 	andi	r3,r2,128
    63ac:	18ffffcc 	andi	r3,r3,65535
    63b0:	18e0001c 	xori	r3,r3,32768
    63b4:	18e00004 	addi	r3,r3,-32768
    63b8:	18000f1e 	bne	r3,zero,63f8 <__smakebuf_r+0x140>
    63bc:	04810004 	movi	r18,1024
    63c0:	10820014 	ori	r2,r2,2048
    63c4:	8080030d 	sth	r2,12(r16)
    63c8:	003fe306 	br	6358 <__smakebuf_r+0xa0>
    63cc:	288010c4 	addi	r2,r5,67
    63d0:	28800015 	stw	r2,0(r5)
    63d4:	28800415 	stw	r2,16(r5)
    63d8:	00800044 	movi	r2,1
    63dc:	28800515 	stw	r2,20(r5)
    63e0:	dfc01217 	ldw	ra,72(sp)
    63e4:	dc801117 	ldw	r18,68(sp)
    63e8:	dc401017 	ldw	r17,64(sp)
    63ec:	dc000f17 	ldw	r16,60(sp)
    63f0:	dec01304 	addi	sp,sp,76
    63f4:	f800283a 	ret
    63f8:	04801004 	movi	r18,64
    63fc:	003ff006 	br	63c0 <__smakebuf_r+0x108>
    6400:	81000a17 	ldw	r4,40(r16)
    6404:	00c00034 	movhi	r3,0
    6408:	18df9c04 	addi	r3,r3,32368
    640c:	20ffc01e 	bne	r4,r3,6310 <__smakebuf_r+0x58>
    6410:	8080030b 	ldhu	r2,12(r16)
    6414:	00c10004 	movi	r3,1024
    6418:	80c01315 	stw	r3,76(r16)
    641c:	10c4b03a 	or	r2,r2,r3
    6420:	8080030d 	sth	r2,12(r16)
    6424:	003fcb06 	br	6354 <__smakebuf_r+0x9c>
    6428:	8080030b 	ldhu	r2,12(r16)
    642c:	10c0800c 	andi	r3,r2,512
    6430:	18ffffcc 	andi	r3,r3,65535
    6434:	18e0001c 	xori	r3,r3,32768
    6438:	18e00004 	addi	r3,r3,-32768
    643c:	183fd31e 	bne	r3,zero,638c <__smakebuf_r+0xd4>
    6440:	10800094 	ori	r2,r2,2
    6444:	80c010c4 	addi	r3,r16,67
    6448:	8080030d 	sth	r2,12(r16)
    644c:	00800044 	movi	r2,1
    6450:	80c00015 	stw	r3,0(r16)
    6454:	80c00415 	stw	r3,16(r16)
    6458:	80800515 	stw	r2,20(r16)
    645c:	003fcb06 	br	638c <__smakebuf_r+0xd4>

00006460 <memchr>:
    6460:	008000c4 	movi	r2,3
    6464:	29403fcc 	andi	r5,r5,255
    6468:	1180282e 	bgeu	r2,r6,650c <memchr+0xac>
    646c:	2086703a 	and	r3,r4,r2
    6470:	1800351e 	bne	r3,zero,6548 <memchr+0xe8>
    6474:	2816923a 	slli	r11,r5,8
    6478:	2093883a 	add	r9,r4,r2
    647c:	22000084 	addi	r8,r4,2
    6480:	5957883a 	add	r11,r11,r5
    6484:	5816923a 	slli	r11,r11,8
    6488:	20c00044 	addi	r3,r4,1
    648c:	037fbff4 	movhi	r13,65279
    6490:	6b7fbfc4 	addi	r13,r13,-257
    6494:	5957883a 	add	r11,r11,r5
    6498:	5816923a 	slli	r11,r11,8
    649c:	03202074 	movhi	r12,32897
    64a0:	63202004 	addi	r12,r12,-32640
    64a4:	101d883a 	mov	r14,r2
    64a8:	5957883a 	add	r11,r11,r5
    64ac:	21c00017 	ldw	r7,0(r4)
    64b0:	31bfff04 	addi	r6,r6,-4
    64b4:	1805883a 	mov	r2,r3
    64b8:	3acef03a 	xor	r7,r7,r11
    64bc:	3b55883a 	add	r10,r7,r13
    64c0:	01ce303a 	nor	r7,zero,r7
    64c4:	51ce703a 	and	r7,r10,r7
    64c8:	3b0e703a 	and	r7,r7,r12
    64cc:	38000a26 	beq	r7,zero,64f8 <memchr+0x98>
    64d0:	21c00003 	ldbu	r7,0(r4)
    64d4:	39401e26 	beq	r7,r5,6550 <memchr+0xf0>
    64d8:	19c00003 	ldbu	r7,0(r3)
    64dc:	39401926 	beq	r7,r5,6544 <memchr+0xe4>
    64e0:	41c00003 	ldbu	r7,0(r8)
    64e4:	4005883a 	mov	r2,r8
    64e8:	39401626 	beq	r7,r5,6544 <memchr+0xe4>
    64ec:	49c00003 	ldbu	r7,0(r9)
    64f0:	4805883a 	mov	r2,r9
    64f4:	39401326 	beq	r7,r5,6544 <memchr+0xe4>
    64f8:	21000104 	addi	r4,r4,4
    64fc:	4a400104 	addi	r9,r9,4
    6500:	42000104 	addi	r8,r8,4
    6504:	18c00104 	addi	r3,r3,4
    6508:	71bfe836 	bltu	r14,r6,64ac <memchr+0x4c>
    650c:	2005883a 	mov	r2,r4
    6510:	30000a26 	beq	r6,zero,653c <memchr+0xdc>
    6514:	10c00003 	ldbu	r3,0(r2)
    6518:	19400a26 	beq	r3,r5,6544 <memchr+0xe4>
    651c:	10c00044 	addi	r3,r2,1
    6520:	118d883a 	add	r6,r2,r6
    6524:	00000306 	br	6534 <memchr+0xd4>
    6528:	11000003 	ldbu	r4,0(r2)
    652c:	18c00044 	addi	r3,r3,1
    6530:	21400426 	beq	r4,r5,6544 <memchr+0xe4>
    6534:	1805883a 	mov	r2,r3
    6538:	19bffb1e 	bne	r3,r6,6528 <memchr+0xc8>
    653c:	0005883a 	mov	r2,zero
    6540:	f800283a 	ret
    6544:	f800283a 	ret
    6548:	2005883a 	mov	r2,r4
    654c:	003ff106 	br	6514 <memchr+0xb4>
    6550:	2005883a 	mov	r2,r4
    6554:	f800283a 	ret

00006558 <memmove>:
    6558:	defffb04 	addi	sp,sp,-20
    655c:	dc000015 	stw	r16,0(sp)
    6560:	dfc00415 	stw	ra,16(sp)
    6564:	dcc00315 	stw	r19,12(sp)
    6568:	dc800215 	stw	r18,8(sp)
    656c:	dc400115 	stw	r17,4(sp)
    6570:	2021883a 	mov	r16,r4
    6574:	300f883a 	mov	r7,r6
    6578:	2900122e 	bgeu	r5,r4,65c4 <memmove+0x6c>
    657c:	2987883a 	add	r3,r5,r6
    6580:	20c0102e 	bgeu	r4,r3,65c4 <memmove+0x6c>
    6584:	218b883a 	add	r5,r4,r6
    6588:	1989c83a 	sub	r4,r3,r6
    658c:	30000526 	beq	r6,zero,65a4 <memmove+0x4c>
    6590:	18ffffc4 	addi	r3,r3,-1
    6594:	18800003 	ldbu	r2,0(r3)
    6598:	297fffc4 	addi	r5,r5,-1
    659c:	28800005 	stb	r2,0(r5)
    65a0:	193ffb1e 	bne	r3,r4,6590 <memmove+0x38>
    65a4:	8005883a 	mov	r2,r16
    65a8:	dfc00417 	ldw	ra,16(sp)
    65ac:	dcc00317 	ldw	r19,12(sp)
    65b0:	dc800217 	ldw	r18,8(sp)
    65b4:	dc400117 	ldw	r17,4(sp)
    65b8:	dc000017 	ldw	r16,0(sp)
    65bc:	dec00504 	addi	sp,sp,20
    65c0:	f800283a 	ret
    65c4:	008003c4 	movi	r2,15
    65c8:	1180422e 	bgeu	r2,r6,66d4 <memmove+0x17c>
    65cc:	2c04b03a 	or	r2,r5,r16
    65d0:	108000cc 	andi	r2,r2,3
    65d4:	10003f1e 	bne	r2,zero,66d4 <memmove+0x17c>
    65d8:	32bffc04 	addi	r10,r6,-16
    65dc:	5014d13a 	srli	r10,r10,4
    65e0:	81000404 	addi	r4,r16,16
    65e4:	8007883a 	mov	r3,r16
    65e8:	5004913a 	slli	r2,r10,4
    65ec:	280f883a 	mov	r7,r5
    65f0:	2089883a 	add	r4,r4,r2
    65f4:	38800017 	ldw	r2,0(r7)
    65f8:	18c00404 	addi	r3,r3,16
    65fc:	39c00404 	addi	r7,r7,16
    6600:	18bffc15 	stw	r2,-16(r3)
    6604:	38bffd17 	ldw	r2,-12(r7)
    6608:	18bffd15 	stw	r2,-12(r3)
    660c:	38bffe17 	ldw	r2,-8(r7)
    6610:	18bffe15 	stw	r2,-8(r3)
    6614:	38bfff17 	ldw	r2,-4(r7)
    6618:	18bfff15 	stw	r2,-4(r3)
    661c:	193ff51e 	bne	r3,r4,65f4 <memmove+0x9c>
    6620:	52800044 	addi	r10,r10,1
    6624:	5014913a 	slli	r10,r10,4
    6628:	31c003cc 	andi	r7,r6,15
    662c:	008000c4 	movi	r2,3
    6630:	8287883a 	add	r3,r16,r10
    6634:	2a95883a 	add	r10,r5,r10
    6638:	11c0282e 	bgeu	r2,r7,66dc <memmove+0x184>
    663c:	3c7fff04 	addi	r17,r7,-4
    6640:	8808d0ba 	srli	r4,r17,2
    6644:	1a400104 	addi	r9,r3,4
    6648:	180d883a 	mov	r6,r3
    664c:	2105883a 	add	r2,r4,r4
    6650:	1085883a 	add	r2,r2,r2
    6654:	4893883a 	add	r9,r9,r2
    6658:	5005883a 	mov	r2,r10
    665c:	12000017 	ldw	r8,0(r2)
    6660:	31800104 	addi	r6,r6,4
    6664:	10800104 	addi	r2,r2,4
    6668:	323fff15 	stw	r8,-4(r6)
    666c:	327ffb1e 	bne	r6,r9,665c <memmove+0x104>
    6670:	20800044 	addi	r2,r4,1
    6674:	1085883a 	add	r2,r2,r2
    6678:	1085883a 	add	r2,r2,r2
    667c:	017fff04 	movi	r5,-4
    6680:	18a5883a 	add	r18,r3,r2
    6684:	50a7883a 	add	r19,r10,r2
    6688:	0000e440 	call	e44 <__mulsi3>
    668c:	144f883a 	add	r7,r2,r17
    6690:	980b883a 	mov	r5,r19
    6694:	9007883a 	mov	r3,r18
    6698:	383fc226 	beq	r7,zero,65a4 <memmove+0x4c>
    669c:	19cf883a 	add	r7,r3,r7
    66a0:	29800003 	ldbu	r6,0(r5)
    66a4:	18c00044 	addi	r3,r3,1
    66a8:	29400044 	addi	r5,r5,1
    66ac:	19bfffc5 	stb	r6,-1(r3)
    66b0:	19fffb1e 	bne	r3,r7,66a0 <memmove+0x148>
    66b4:	8005883a 	mov	r2,r16
    66b8:	dfc00417 	ldw	ra,16(sp)
    66bc:	dcc00317 	ldw	r19,12(sp)
    66c0:	dc800217 	ldw	r18,8(sp)
    66c4:	dc400117 	ldw	r17,4(sp)
    66c8:	dc000017 	ldw	r16,0(sp)
    66cc:	dec00504 	addi	sp,sp,20
    66d0:	f800283a 	ret
    66d4:	8007883a 	mov	r3,r16
    66d8:	003fef06 	br	6698 <memmove+0x140>
    66dc:	500b883a 	mov	r5,r10
    66e0:	003fed06 	br	6698 <memmove+0x140>

000066e4 <_Balloc>:
    66e4:	20801317 	ldw	r2,76(r4)
    66e8:	defffc04 	addi	sp,sp,-16
    66ec:	dc400115 	stw	r17,4(sp)
    66f0:	dc000015 	stw	r16,0(sp)
    66f4:	dfc00315 	stw	ra,12(sp)
    66f8:	dc800215 	stw	r18,8(sp)
    66fc:	2023883a 	mov	r17,r4
    6700:	2821883a 	mov	r16,r5
    6704:	10000f26 	beq	r2,zero,6744 <_Balloc+0x60>
    6708:	8407883a 	add	r3,r16,r16
    670c:	18c7883a 	add	r3,r3,r3
    6710:	10c7883a 	add	r3,r2,r3
    6714:	18800017 	ldw	r2,0(r3)
    6718:	10001126 	beq	r2,zero,6760 <_Balloc+0x7c>
    671c:	11000017 	ldw	r4,0(r2)
    6720:	19000015 	stw	r4,0(r3)
    6724:	10000415 	stw	zero,16(r2)
    6728:	10000315 	stw	zero,12(r2)
    672c:	dfc00317 	ldw	ra,12(sp)
    6730:	dc800217 	ldw	r18,8(sp)
    6734:	dc400117 	ldw	r17,4(sp)
    6738:	dc000017 	ldw	r16,0(sp)
    673c:	dec00404 	addi	sp,sp,16
    6740:	f800283a 	ret
    6744:	01400104 	movi	r5,4
    6748:	01800404 	movi	r6,16
    674c:	0000e880 	call	e88 <_calloc_r>
    6750:	88801315 	stw	r2,76(r17)
    6754:	103fec1e 	bne	r2,zero,6708 <_Balloc+0x24>
    6758:	0005883a 	mov	r2,zero
    675c:	003ff306 	br	672c <_Balloc+0x48>
    6760:	01400044 	movi	r5,1
    6764:	2c24983a 	sll	r18,r5,r16
    6768:	8809883a 	mov	r4,r17
    676c:	91800144 	addi	r6,r18,5
    6770:	318d883a 	add	r6,r6,r6
    6774:	318d883a 	add	r6,r6,r6
    6778:	0000e880 	call	e88 <_calloc_r>
    677c:	103ff626 	beq	r2,zero,6758 <_Balloc+0x74>
    6780:	14000115 	stw	r16,4(r2)
    6784:	14800215 	stw	r18,8(r2)
    6788:	003fe606 	br	6724 <_Balloc+0x40>

0000678c <_Bfree>:
    678c:	28000826 	beq	r5,zero,67b0 <_Bfree+0x24>
    6790:	28c00117 	ldw	r3,4(r5)
    6794:	20801317 	ldw	r2,76(r4)
    6798:	18c7883a 	add	r3,r3,r3
    679c:	18c7883a 	add	r3,r3,r3
    67a0:	10c5883a 	add	r2,r2,r3
    67a4:	10c00017 	ldw	r3,0(r2)
    67a8:	28c00015 	stw	r3,0(r5)
    67ac:	11400015 	stw	r5,0(r2)
    67b0:	f800283a 	ret

000067b4 <__multadd>:
    67b4:	defff604 	addi	sp,sp,-40
    67b8:	dd400515 	stw	r21,20(sp)
    67bc:	2d400417 	ldw	r21,16(r5)
    67c0:	df000815 	stw	fp,32(sp)
    67c4:	ddc00715 	stw	r23,28(sp)
    67c8:	dd800615 	stw	r22,24(sp)
    67cc:	dd000415 	stw	r20,16(sp)
    67d0:	dc400115 	stw	r17,4(sp)
    67d4:	dc000015 	stw	r16,0(sp)
    67d8:	dfc00915 	stw	ra,36(sp)
    67dc:	dcc00315 	stw	r19,12(sp)
    67e0:	dc800215 	stw	r18,8(sp)
    67e4:	282d883a 	mov	r22,r5
    67e8:	202f883a 	mov	r23,r4
    67ec:	3029883a 	mov	r20,r6
    67f0:	3839883a 	mov	fp,r7
    67f4:	2c000504 	addi	r16,r5,20
    67f8:	0023883a 	mov	r17,zero
    67fc:	84c00017 	ldw	r19,0(r16)
    6800:	a00b883a 	mov	r5,r20
    6804:	8c400044 	addi	r17,r17,1
    6808:	993fffcc 	andi	r4,r19,65535
    680c:	0000e440 	call	e44 <__mulsi3>
    6810:	1725883a 	add	r18,r2,fp
    6814:	9808d43a 	srli	r4,r19,16
    6818:	9026d43a 	srli	r19,r18,16
    681c:	a00b883a 	mov	r5,r20
    6820:	0000e440 	call	e44 <__mulsi3>
    6824:	988f883a 	add	r7,r19,r2
    6828:	3804943a 	slli	r2,r7,16
    682c:	94bfffcc 	andi	r18,r18,65535
    6830:	3838d43a 	srli	fp,r7,16
    6834:	14a5883a 	add	r18,r2,r18
    6838:	84800015 	stw	r18,0(r16)
    683c:	84000104 	addi	r16,r16,4
    6840:	8d7fee16 	blt	r17,r21,67fc <__multadd+0x48>
    6844:	e0000926 	beq	fp,zero,686c <__multadd+0xb8>
    6848:	b0800217 	ldw	r2,8(r22)
    684c:	a880140e 	bge	r21,r2,68a0 <__multadd+0xec>
    6850:	a8800144 	addi	r2,r21,5
    6854:	1085883a 	add	r2,r2,r2
    6858:	1085883a 	add	r2,r2,r2
    685c:	b085883a 	add	r2,r22,r2
    6860:	ad400044 	addi	r21,r21,1
    6864:	17000015 	stw	fp,0(r2)
    6868:	b5400415 	stw	r21,16(r22)
    686c:	b005883a 	mov	r2,r22
    6870:	dfc00917 	ldw	ra,36(sp)
    6874:	df000817 	ldw	fp,32(sp)
    6878:	ddc00717 	ldw	r23,28(sp)
    687c:	dd800617 	ldw	r22,24(sp)
    6880:	dd400517 	ldw	r21,20(sp)
    6884:	dd000417 	ldw	r20,16(sp)
    6888:	dcc00317 	ldw	r19,12(sp)
    688c:	dc800217 	ldw	r18,8(sp)
    6890:	dc400117 	ldw	r17,4(sp)
    6894:	dc000017 	ldw	r16,0(sp)
    6898:	dec00a04 	addi	sp,sp,40
    689c:	f800283a 	ret
    68a0:	b1400117 	ldw	r5,4(r22)
    68a4:	b809883a 	mov	r4,r23
    68a8:	29400044 	addi	r5,r5,1
    68ac:	00066e40 	call	66e4 <_Balloc>
    68b0:	b1800417 	ldw	r6,16(r22)
    68b4:	b1400304 	addi	r5,r22,12
    68b8:	11000304 	addi	r4,r2,12
    68bc:	31800084 	addi	r6,r6,2
    68c0:	318d883a 	add	r6,r6,r6
    68c4:	318d883a 	add	r6,r6,r6
    68c8:	1021883a 	mov	r16,r2
    68cc:	00017000 	call	1700 <memcpy>
    68d0:	b0c00117 	ldw	r3,4(r22)
    68d4:	b8801317 	ldw	r2,76(r23)
    68d8:	18c7883a 	add	r3,r3,r3
    68dc:	18c7883a 	add	r3,r3,r3
    68e0:	10c5883a 	add	r2,r2,r3
    68e4:	10c00017 	ldw	r3,0(r2)
    68e8:	b0c00015 	stw	r3,0(r22)
    68ec:	15800015 	stw	r22,0(r2)
    68f0:	802d883a 	mov	r22,r16
    68f4:	003fd606 	br	6850 <__multadd+0x9c>

000068f8 <__s2b>:
    68f8:	defff904 	addi	sp,sp,-28
    68fc:	dd000415 	stw	r20,16(sp)
    6900:	dc400115 	stw	r17,4(sp)
    6904:	2829883a 	mov	r20,r5
    6908:	2023883a 	mov	r17,r4
    690c:	01400244 	movi	r5,9
    6910:	39000204 	addi	r4,r7,8
    6914:	dcc00315 	stw	r19,12(sp)
    6918:	dc800215 	stw	r18,8(sp)
    691c:	dfc00615 	stw	ra,24(sp)
    6920:	dd400515 	stw	r21,20(sp)
    6924:	dc000015 	stw	r16,0(sp)
    6928:	3825883a 	mov	r18,r7
    692c:	3027883a 	mov	r19,r6
    6930:	0000d880 	call	d88 <__divsi3>
    6934:	00c00044 	movi	r3,1
    6938:	000b883a 	mov	r5,zero
    693c:	1880030e 	bge	r3,r2,694c <__s2b+0x54>
    6940:	18c7883a 	add	r3,r3,r3
    6944:	29400044 	addi	r5,r5,1
    6948:	18bffd16 	blt	r3,r2,6940 <__s2b+0x48>
    694c:	8809883a 	mov	r4,r17
    6950:	00066e40 	call	66e4 <_Balloc>
    6954:	d8c00717 	ldw	r3,28(sp)
    6958:	10c00515 	stw	r3,20(r2)
    695c:	00c00044 	movi	r3,1
    6960:	10c00415 	stw	r3,16(r2)
    6964:	00c00244 	movi	r3,9
    6968:	1cc0210e 	bge	r3,r19,69f0 <__s2b+0xf8>
    696c:	a0eb883a 	add	r21,r20,r3
    6970:	a821883a 	mov	r16,r21
    6974:	a4e9883a 	add	r20,r20,r19
    6978:	81c00007 	ldb	r7,0(r16)
    697c:	8809883a 	mov	r4,r17
    6980:	84000044 	addi	r16,r16,1
    6984:	100b883a 	mov	r5,r2
    6988:	01800284 	movi	r6,10
    698c:	39fff404 	addi	r7,r7,-48
    6990:	00067b40 	call	67b4 <__multadd>
    6994:	853ff81e 	bne	r16,r20,6978 <__s2b+0x80>
    6998:	ace1883a 	add	r16,r21,r19
    699c:	843ffe04 	addi	r16,r16,-8
    69a0:	9c800a0e 	bge	r19,r18,69cc <__s2b+0xd4>
    69a4:	94e5c83a 	sub	r18,r18,r19
    69a8:	84a5883a 	add	r18,r16,r18
    69ac:	81c00007 	ldb	r7,0(r16)
    69b0:	8809883a 	mov	r4,r17
    69b4:	84000044 	addi	r16,r16,1
    69b8:	100b883a 	mov	r5,r2
    69bc:	01800284 	movi	r6,10
    69c0:	39fff404 	addi	r7,r7,-48
    69c4:	00067b40 	call	67b4 <__multadd>
    69c8:	84bff81e 	bne	r16,r18,69ac <__s2b+0xb4>
    69cc:	dfc00617 	ldw	ra,24(sp)
    69d0:	dd400517 	ldw	r21,20(sp)
    69d4:	dd000417 	ldw	r20,16(sp)
    69d8:	dcc00317 	ldw	r19,12(sp)
    69dc:	dc800217 	ldw	r18,8(sp)
    69e0:	dc400117 	ldw	r17,4(sp)
    69e4:	dc000017 	ldw	r16,0(sp)
    69e8:	dec00704 	addi	sp,sp,28
    69ec:	f800283a 	ret
    69f0:	a4000284 	addi	r16,r20,10
    69f4:	1827883a 	mov	r19,r3
    69f8:	003fe906 	br	69a0 <__s2b+0xa8>

000069fc <__hi0bits>:
    69fc:	20bfffec 	andhi	r2,r4,65535
    6a00:	1000141e 	bne	r2,zero,6a54 <__hi0bits+0x58>
    6a04:	2008943a 	slli	r4,r4,16
    6a08:	00800404 	movi	r2,16
    6a0c:	20ffc02c 	andhi	r3,r4,65280
    6a10:	1800021e 	bne	r3,zero,6a1c <__hi0bits+0x20>
    6a14:	2008923a 	slli	r4,r4,8
    6a18:	10800204 	addi	r2,r2,8
    6a1c:	20fc002c 	andhi	r3,r4,61440
    6a20:	1800021e 	bne	r3,zero,6a2c <__hi0bits+0x30>
    6a24:	2008913a 	slli	r4,r4,4
    6a28:	10800104 	addi	r2,r2,4
    6a2c:	20f0002c 	andhi	r3,r4,49152
    6a30:	1800031e 	bne	r3,zero,6a40 <__hi0bits+0x44>
    6a34:	2109883a 	add	r4,r4,r4
    6a38:	10800084 	addi	r2,r2,2
    6a3c:	2109883a 	add	r4,r4,r4
    6a40:	20000316 	blt	r4,zero,6a50 <__hi0bits+0x54>
    6a44:	2110002c 	andhi	r4,r4,16384
    6a48:	2000041e 	bne	r4,zero,6a5c <__hi0bits+0x60>
    6a4c:	00800804 	movi	r2,32
    6a50:	f800283a 	ret
    6a54:	0005883a 	mov	r2,zero
    6a58:	003fec06 	br	6a0c <__hi0bits+0x10>
    6a5c:	10800044 	addi	r2,r2,1
    6a60:	f800283a 	ret

00006a64 <__lo0bits>:
    6a64:	20c00017 	ldw	r3,0(r4)
    6a68:	188001cc 	andi	r2,r3,7
    6a6c:	10000826 	beq	r2,zero,6a90 <__lo0bits+0x2c>
    6a70:	1880004c 	andi	r2,r3,1
    6a74:	1000211e 	bne	r2,zero,6afc <__lo0bits+0x98>
    6a78:	1880008c 	andi	r2,r3,2
    6a7c:	1000211e 	bne	r2,zero,6b04 <__lo0bits+0xa0>
    6a80:	1806d0ba 	srli	r3,r3,2
    6a84:	00800084 	movi	r2,2
    6a88:	20c00015 	stw	r3,0(r4)
    6a8c:	f800283a 	ret
    6a90:	18bfffcc 	andi	r2,r3,65535
    6a94:	10001326 	beq	r2,zero,6ae4 <__lo0bits+0x80>
    6a98:	0005883a 	mov	r2,zero
    6a9c:	19403fcc 	andi	r5,r3,255
    6aa0:	2800021e 	bne	r5,zero,6aac <__lo0bits+0x48>
    6aa4:	1806d23a 	srli	r3,r3,8
    6aa8:	10800204 	addi	r2,r2,8
    6aac:	194003cc 	andi	r5,r3,15
    6ab0:	2800021e 	bne	r5,zero,6abc <__lo0bits+0x58>
    6ab4:	1806d13a 	srli	r3,r3,4
    6ab8:	10800104 	addi	r2,r2,4
    6abc:	194000cc 	andi	r5,r3,3
    6ac0:	2800021e 	bne	r5,zero,6acc <__lo0bits+0x68>
    6ac4:	1806d0ba 	srli	r3,r3,2
    6ac8:	10800084 	addi	r2,r2,2
    6acc:	1940004c 	andi	r5,r3,1
    6ad0:	2800081e 	bne	r5,zero,6af4 <__lo0bits+0x90>
    6ad4:	1806d07a 	srli	r3,r3,1
    6ad8:	1800051e 	bne	r3,zero,6af0 <__lo0bits+0x8c>
    6adc:	00800804 	movi	r2,32
    6ae0:	f800283a 	ret
    6ae4:	1806d43a 	srli	r3,r3,16
    6ae8:	00800404 	movi	r2,16
    6aec:	003feb06 	br	6a9c <__lo0bits+0x38>
    6af0:	10800044 	addi	r2,r2,1
    6af4:	20c00015 	stw	r3,0(r4)
    6af8:	f800283a 	ret
    6afc:	0005883a 	mov	r2,zero
    6b00:	f800283a 	ret
    6b04:	1806d07a 	srli	r3,r3,1
    6b08:	00800044 	movi	r2,1
    6b0c:	20c00015 	stw	r3,0(r4)
    6b10:	f800283a 	ret

00006b14 <__i2b>:
    6b14:	defffd04 	addi	sp,sp,-12
    6b18:	dc000015 	stw	r16,0(sp)
    6b1c:	04000044 	movi	r16,1
    6b20:	dc400115 	stw	r17,4(sp)
    6b24:	2823883a 	mov	r17,r5
    6b28:	800b883a 	mov	r5,r16
    6b2c:	dfc00215 	stw	ra,8(sp)
    6b30:	00066e40 	call	66e4 <_Balloc>
    6b34:	14400515 	stw	r17,20(r2)
    6b38:	14000415 	stw	r16,16(r2)
    6b3c:	dfc00217 	ldw	ra,8(sp)
    6b40:	dc400117 	ldw	r17,4(sp)
    6b44:	dc000017 	ldw	r16,0(sp)
    6b48:	dec00304 	addi	sp,sp,12
    6b4c:	f800283a 	ret

00006b50 <__multiply>:
    6b50:	defff004 	addi	sp,sp,-64
    6b54:	dc800815 	stw	r18,32(sp)
    6b58:	dc400715 	stw	r17,28(sp)
    6b5c:	34800417 	ldw	r18,16(r6)
    6b60:	2c400417 	ldw	r17,16(r5)
    6b64:	ddc00d15 	stw	r23,52(sp)
    6b68:	dc000615 	stw	r16,24(sp)
    6b6c:	dfc00f15 	stw	ra,60(sp)
    6b70:	df000e15 	stw	fp,56(sp)
    6b74:	dd800c15 	stw	r22,48(sp)
    6b78:	dd400b15 	stw	r21,44(sp)
    6b7c:	dd000a15 	stw	r20,40(sp)
    6b80:	dcc00915 	stw	r19,36(sp)
    6b84:	2821883a 	mov	r16,r5
    6b88:	302f883a 	mov	r23,r6
    6b8c:	8c80050e 	bge	r17,r18,6ba4 <__multiply+0x54>
    6b90:	8807883a 	mov	r3,r17
    6b94:	3021883a 	mov	r16,r6
    6b98:	9023883a 	mov	r17,r18
    6b9c:	282f883a 	mov	r23,r5
    6ba0:	1825883a 	mov	r18,r3
    6ba4:	80800217 	ldw	r2,8(r16)
    6ba8:	8c87883a 	add	r3,r17,r18
    6bac:	d8c00115 	stw	r3,4(sp)
    6bb0:	81400117 	ldw	r5,4(r16)
    6bb4:	10c0010e 	bge	r2,r3,6bbc <__multiply+0x6c>
    6bb8:	29400044 	addi	r5,r5,1
    6bbc:	00066e40 	call	66e4 <_Balloc>
    6bc0:	d8c00117 	ldw	r3,4(sp)
    6bc4:	d8800515 	stw	r2,20(sp)
    6bc8:	14c00504 	addi	r19,r2,20
    6bcc:	1d400144 	addi	r21,r3,5
    6bd0:	ad6b883a 	add	r21,r21,r21
    6bd4:	ad6b883a 	add	r21,r21,r21
    6bd8:	156b883a 	add	r21,r2,r21
    6bdc:	dd400215 	stw	r21,8(sp)
    6be0:	9805883a 	mov	r2,r19
    6be4:	9d40042e 	bgeu	r19,r21,6bf8 <__multiply+0xa8>
    6be8:	d8c00217 	ldw	r3,8(sp)
    6bec:	10000015 	stw	zero,0(r2)
    6bf0:	10800104 	addi	r2,r2,4
    6bf4:	10fffc36 	bltu	r2,r3,6be8 <__multiply+0x98>
    6bf8:	94800144 	addi	r18,r18,5
    6bfc:	94a5883a 	add	r18,r18,r18
    6c00:	94ad883a 	add	r22,r18,r18
    6c04:	8c400144 	addi	r17,r17,5
    6c08:	8c63883a 	add	r17,r17,r17
    6c0c:	bdad883a 	add	r22,r23,r22
    6c10:	80c00504 	addi	r3,r16,20
    6c14:	8c63883a 	add	r17,r17,r17
    6c18:	bc800504 	addi	r18,r23,20
    6c1c:	dd800315 	stw	r22,12(sp)
    6c20:	d8c00415 	stw	r3,16(sp)
    6c24:	dcc00015 	stw	r19,0(sp)
    6c28:	8463883a 	add	r17,r16,r17
    6c2c:	9580412e 	bgeu	r18,r22,6d34 <__multiply+0x1e4>
    6c30:	90800017 	ldw	r2,0(r18)
    6c34:	173fffcc 	andi	fp,r2,65535
    6c38:	e0001a26 	beq	fp,zero,6ca4 <__multiply+0x154>
    6c3c:	dd000017 	ldw	r20,0(sp)
    6c40:	dd800417 	ldw	r22,16(sp)
    6c44:	002b883a 	mov	r21,zero
    6c48:	b4c00017 	ldw	r19,0(r22)
    6c4c:	a4000017 	ldw	r16,0(r20)
    6c50:	e00b883a 	mov	r5,fp
    6c54:	993fffcc 	andi	r4,r19,65535
    6c58:	0000e440 	call	e44 <__mulsi3>
    6c5c:	9808d43a 	srli	r4,r19,16
    6c60:	817fffcc 	andi	r5,r16,65535
    6c64:	1145883a 	add	r2,r2,r5
    6c68:	e00b883a 	mov	r5,fp
    6c6c:	1567883a 	add	r19,r2,r21
    6c70:	8020d43a 	srli	r16,r16,16
    6c74:	0000e440 	call	e44 <__mulsi3>
    6c78:	9808d43a 	srli	r4,r19,16
    6c7c:	1405883a 	add	r2,r2,r16
    6c80:	a4c0000d 	sth	r19,0(r20)
    6c84:	110f883a 	add	r7,r2,r4
    6c88:	a1c0008d 	sth	r7,2(r20)
    6c8c:	b5800104 	addi	r22,r22,4
    6c90:	382ad43a 	srli	r21,r7,16
    6c94:	a5000104 	addi	r20,r20,4
    6c98:	b47feb36 	bltu	r22,r17,6c48 <__multiply+0xf8>
    6c9c:	a5400015 	stw	r21,0(r20)
    6ca0:	90800017 	ldw	r2,0(r18)
    6ca4:	1038d43a 	srli	fp,r2,16
    6ca8:	e0001c26 	beq	fp,zero,6d1c <__multiply+0x1cc>
    6cac:	d8c00017 	ldw	r3,0(sp)
    6cb0:	dd000417 	ldw	r20,16(sp)
    6cb4:	002b883a 	mov	r21,zero
    6cb8:	1d800017 	ldw	r22,0(r3)
    6cbc:	182f883a 	mov	r23,r3
    6cc0:	b021883a 	mov	r16,r22
    6cc4:	a4c00017 	ldw	r19,0(r20)
    6cc8:	8020d43a 	srli	r16,r16,16
    6ccc:	e00b883a 	mov	r5,fp
    6cd0:	993fffcc 	andi	r4,r19,65535
    6cd4:	0000e440 	call	e44 <__mulsi3>
    6cd8:	1405883a 	add	r2,r2,r16
    6cdc:	9808d43a 	srli	r4,r19,16
    6ce0:	156b883a 	add	r21,r2,r21
    6ce4:	bdc00104 	addi	r23,r23,4
    6ce8:	bdbfff0d 	sth	r22,-4(r23)
    6cec:	bd7fff8d 	sth	r21,-2(r23)
    6cf0:	bc000017 	ldw	r16,0(r23)
    6cf4:	e00b883a 	mov	r5,fp
    6cf8:	0000e440 	call	e44 <__mulsi3>
    6cfc:	a80ed43a 	srli	r7,r21,16
    6d00:	813fffcc 	andi	r4,r16,65535
    6d04:	2085883a 	add	r2,r4,r2
    6d08:	11ed883a 	add	r22,r2,r7
    6d0c:	a5000104 	addi	r20,r20,4
    6d10:	b02ad43a 	srli	r21,r22,16
    6d14:	a47feb36 	bltu	r20,r17,6cc4 <__multiply+0x174>
    6d18:	bd800015 	stw	r22,0(r23)
    6d1c:	d8c00017 	ldw	r3,0(sp)
    6d20:	94800104 	addi	r18,r18,4
    6d24:	18c00104 	addi	r3,r3,4
    6d28:	d8c00015 	stw	r3,0(sp)
    6d2c:	d8c00317 	ldw	r3,12(sp)
    6d30:	90ffbf36 	bltu	r18,r3,6c30 <__multiply+0xe0>
    6d34:	d8c00117 	ldw	r3,4(sp)
    6d38:	00c00c0e 	bge	zero,r3,6d6c <__multiply+0x21c>
    6d3c:	d8c00217 	ldw	r3,8(sp)
    6d40:	18bfff17 	ldw	r2,-4(r3)
    6d44:	1d7fff04 	addi	r21,r3,-4
    6d48:	10000326 	beq	r2,zero,6d58 <__multiply+0x208>
    6d4c:	00000706 	br	6d6c <__multiply+0x21c>
    6d50:	a8800017 	ldw	r2,0(r21)
    6d54:	1000051e 	bne	r2,zero,6d6c <__multiply+0x21c>
    6d58:	d8c00117 	ldw	r3,4(sp)
    6d5c:	ad7fff04 	addi	r21,r21,-4
    6d60:	18ffffc4 	addi	r3,r3,-1
    6d64:	d8c00115 	stw	r3,4(sp)
    6d68:	183ff91e 	bne	r3,zero,6d50 <__multiply+0x200>
    6d6c:	d8800517 	ldw	r2,20(sp)
    6d70:	d8c00117 	ldw	r3,4(sp)
    6d74:	10c00415 	stw	r3,16(r2)
    6d78:	dfc00f17 	ldw	ra,60(sp)
    6d7c:	df000e17 	ldw	fp,56(sp)
    6d80:	ddc00d17 	ldw	r23,52(sp)
    6d84:	dd800c17 	ldw	r22,48(sp)
    6d88:	dd400b17 	ldw	r21,44(sp)
    6d8c:	dd000a17 	ldw	r20,40(sp)
    6d90:	dcc00917 	ldw	r19,36(sp)
    6d94:	dc800817 	ldw	r18,32(sp)
    6d98:	dc400717 	ldw	r17,28(sp)
    6d9c:	dc000617 	ldw	r16,24(sp)
    6da0:	dec01004 	addi	sp,sp,64
    6da4:	f800283a 	ret

00006da8 <__pow5mult>:
    6da8:	defffb04 	addi	sp,sp,-20
    6dac:	dcc00315 	stw	r19,12(sp)
    6db0:	dc800215 	stw	r18,8(sp)
    6db4:	dc000015 	stw	r16,0(sp)
    6db8:	dfc00415 	stw	ra,16(sp)
    6dbc:	dc400115 	stw	r17,4(sp)
    6dc0:	308000cc 	andi	r2,r6,3
    6dc4:	3021883a 	mov	r16,r6
    6dc8:	2027883a 	mov	r19,r4
    6dcc:	2825883a 	mov	r18,r5
    6dd0:	10002e1e 	bne	r2,zero,6e8c <__pow5mult+0xe4>
    6dd4:	8021d0ba 	srai	r16,r16,2
    6dd8:	80001a26 	beq	r16,zero,6e44 <__pow5mult+0x9c>
    6ddc:	9c401217 	ldw	r17,72(r19)
    6de0:	8800061e 	bne	r17,zero,6dfc <__pow5mult+0x54>
    6de4:	00003406 	br	6eb8 <__pow5mult+0x110>
    6de8:	8021d07a 	srai	r16,r16,1
    6dec:	80001526 	beq	r16,zero,6e44 <__pow5mult+0x9c>
    6df0:	88c00017 	ldw	r3,0(r17)
    6df4:	18001b26 	beq	r3,zero,6e64 <__pow5mult+0xbc>
    6df8:	1823883a 	mov	r17,r3
    6dfc:	80c0004c 	andi	r3,r16,1
    6e00:	183ff926 	beq	r3,zero,6de8 <__pow5mult+0x40>
    6e04:	900b883a 	mov	r5,r18
    6e08:	880d883a 	mov	r6,r17
    6e0c:	9809883a 	mov	r4,r19
    6e10:	0006b500 	call	6b50 <__multiply>
    6e14:	90001b26 	beq	r18,zero,6e84 <__pow5mult+0xdc>
    6e18:	91000117 	ldw	r4,4(r18)
    6e1c:	98c01317 	ldw	r3,76(r19)
    6e20:	8021d07a 	srai	r16,r16,1
    6e24:	2109883a 	add	r4,r4,r4
    6e28:	2109883a 	add	r4,r4,r4
    6e2c:	1907883a 	add	r3,r3,r4
    6e30:	19000017 	ldw	r4,0(r3)
    6e34:	91000015 	stw	r4,0(r18)
    6e38:	1c800015 	stw	r18,0(r3)
    6e3c:	1025883a 	mov	r18,r2
    6e40:	803feb1e 	bne	r16,zero,6df0 <__pow5mult+0x48>
    6e44:	9005883a 	mov	r2,r18
    6e48:	dfc00417 	ldw	ra,16(sp)
    6e4c:	dcc00317 	ldw	r19,12(sp)
    6e50:	dc800217 	ldw	r18,8(sp)
    6e54:	dc400117 	ldw	r17,4(sp)
    6e58:	dc000017 	ldw	r16,0(sp)
    6e5c:	dec00504 	addi	sp,sp,20
    6e60:	f800283a 	ret
    6e64:	880b883a 	mov	r5,r17
    6e68:	880d883a 	mov	r6,r17
    6e6c:	9809883a 	mov	r4,r19
    6e70:	0006b500 	call	6b50 <__multiply>
    6e74:	88800015 	stw	r2,0(r17)
    6e78:	10000015 	stw	zero,0(r2)
    6e7c:	1023883a 	mov	r17,r2
    6e80:	003fde06 	br	6dfc <__pow5mult+0x54>
    6e84:	1025883a 	mov	r18,r2
    6e88:	003fd706 	br	6de8 <__pow5mult+0x40>
    6e8c:	10bfffc4 	addi	r2,r2,-1
    6e90:	1085883a 	add	r2,r2,r2
    6e94:	00c00074 	movhi	r3,1
    6e98:	18f4f504 	addi	r3,r3,-11308
    6e9c:	1085883a 	add	r2,r2,r2
    6ea0:	1885883a 	add	r2,r3,r2
    6ea4:	11800017 	ldw	r6,0(r2)
    6ea8:	000f883a 	mov	r7,zero
    6eac:	00067b40 	call	67b4 <__multadd>
    6eb0:	1025883a 	mov	r18,r2
    6eb4:	003fc706 	br	6dd4 <__pow5mult+0x2c>
    6eb8:	9809883a 	mov	r4,r19
    6ebc:	01409c44 	movi	r5,625
    6ec0:	0006b140 	call	6b14 <__i2b>
    6ec4:	98801215 	stw	r2,72(r19)
    6ec8:	1023883a 	mov	r17,r2
    6ecc:	10000015 	stw	zero,0(r2)
    6ed0:	003fca06 	br	6dfc <__pow5mult+0x54>

00006ed4 <__lshift>:
    6ed4:	defff904 	addi	sp,sp,-28
    6ed8:	dd400515 	stw	r21,20(sp)
    6edc:	dc400115 	stw	r17,4(sp)
    6ee0:	2d400417 	ldw	r21,16(r5)
    6ee4:	3023d17a 	srai	r17,r6,5
    6ee8:	28800217 	ldw	r2,8(r5)
    6eec:	dd000415 	stw	r20,16(sp)
    6ef0:	8d6b883a 	add	r21,r17,r21
    6ef4:	dcc00315 	stw	r19,12(sp)
    6ef8:	dc800215 	stw	r18,8(sp)
    6efc:	dc000015 	stw	r16,0(sp)
    6f00:	dfc00615 	stw	ra,24(sp)
    6f04:	ac000044 	addi	r16,r21,1
    6f08:	2825883a 	mov	r18,r5
    6f0c:	3029883a 	mov	r20,r6
    6f10:	2027883a 	mov	r19,r4
    6f14:	29400117 	ldw	r5,4(r5)
    6f18:	1400030e 	bge	r2,r16,6f28 <__lshift+0x54>
    6f1c:	1085883a 	add	r2,r2,r2
    6f20:	29400044 	addi	r5,r5,1
    6f24:	143ffd16 	blt	r2,r16,6f1c <__lshift+0x48>
    6f28:	9809883a 	mov	r4,r19
    6f2c:	00066e40 	call	66e4 <_Balloc>
    6f30:	10c00504 	addi	r3,r2,20
    6f34:	0440090e 	bge	zero,r17,6f5c <__lshift+0x88>
    6f38:	000f883a 	mov	r7,zero
    6f3c:	18000015 	stw	zero,0(r3)
    6f40:	39c00044 	addi	r7,r7,1
    6f44:	18c00104 	addi	r3,r3,4
    6f48:	3c7ffc1e 	bne	r7,r17,6f3c <__lshift+0x68>
    6f4c:	38c00144 	addi	r3,r7,5
    6f50:	18c7883a 	add	r3,r3,r3
    6f54:	18c7883a 	add	r3,r3,r3
    6f58:	10c7883a 	add	r3,r2,r3
    6f5c:	92000417 	ldw	r8,16(r18)
    6f60:	a18007cc 	andi	r6,r20,31
    6f64:	91c00504 	addi	r7,r18,20
    6f68:	42000144 	addi	r8,r8,5
    6f6c:	4211883a 	add	r8,r8,r8
    6f70:	4211883a 	add	r8,r8,r8
    6f74:	9211883a 	add	r8,r18,r8
    6f78:	30002226 	beq	r6,zero,7004 <__lshift+0x130>
    6f7c:	02800804 	movi	r10,32
    6f80:	5195c83a 	sub	r10,r10,r6
    6f84:	000b883a 	mov	r5,zero
    6f88:	3a400017 	ldw	r9,0(r7)
    6f8c:	18c00104 	addi	r3,r3,4
    6f90:	39c00104 	addi	r7,r7,4
    6f94:	4992983a 	sll	r9,r9,r6
    6f98:	2a4ab03a 	or	r5,r5,r9
    6f9c:	197fff15 	stw	r5,-4(r3)
    6fa0:	397fff17 	ldw	r5,-4(r7)
    6fa4:	2a8ad83a 	srl	r5,r5,r10
    6fa8:	3a3ff736 	bltu	r7,r8,6f88 <__lshift+0xb4>
    6fac:	19400015 	stw	r5,0(r3)
    6fb0:	28000126 	beq	r5,zero,6fb8 <__lshift+0xe4>
    6fb4:	ac000084 	addi	r16,r21,2
    6fb8:	91000117 	ldw	r4,4(r18)
    6fbc:	98c01317 	ldw	r3,76(r19)
    6fc0:	843fffc4 	addi	r16,r16,-1
    6fc4:	2109883a 	add	r4,r4,r4
    6fc8:	2109883a 	add	r4,r4,r4
    6fcc:	1907883a 	add	r3,r3,r4
    6fd0:	19000017 	ldw	r4,0(r3)
    6fd4:	14000415 	stw	r16,16(r2)
    6fd8:	91000015 	stw	r4,0(r18)
    6fdc:	1c800015 	stw	r18,0(r3)
    6fe0:	dfc00617 	ldw	ra,24(sp)
    6fe4:	dd400517 	ldw	r21,20(sp)
    6fe8:	dd000417 	ldw	r20,16(sp)
    6fec:	dcc00317 	ldw	r19,12(sp)
    6ff0:	dc800217 	ldw	r18,8(sp)
    6ff4:	dc400117 	ldw	r17,4(sp)
    6ff8:	dc000017 	ldw	r16,0(sp)
    6ffc:	dec00704 	addi	sp,sp,28
    7000:	f800283a 	ret
    7004:	39400017 	ldw	r5,0(r7)
    7008:	18c00104 	addi	r3,r3,4
    700c:	39c00104 	addi	r7,r7,4
    7010:	197fff15 	stw	r5,-4(r3)
    7014:	3a3fe82e 	bgeu	r7,r8,6fb8 <__lshift+0xe4>
    7018:	39400017 	ldw	r5,0(r7)
    701c:	18c00104 	addi	r3,r3,4
    7020:	39c00104 	addi	r7,r7,4
    7024:	197fff15 	stw	r5,-4(r3)
    7028:	3a3ff636 	bltu	r7,r8,7004 <__lshift+0x130>
    702c:	003fe206 	br	6fb8 <__lshift+0xe4>

00007030 <__mcmp>:
    7030:	20800417 	ldw	r2,16(r4)
    7034:	28c00417 	ldw	r3,16(r5)
    7038:	10c5c83a 	sub	r2,r2,r3
    703c:	10000f1e 	bne	r2,zero,707c <__mcmp+0x4c>
    7040:	18c00144 	addi	r3,r3,5
    7044:	18c7883a 	add	r3,r3,r3
    7048:	18c7883a 	add	r3,r3,r3
    704c:	21c00504 	addi	r7,r4,20
    7050:	28cb883a 	add	r5,r5,r3
    7054:	20c9883a 	add	r4,r4,r3
    7058:	213fff04 	addi	r4,r4,-4
    705c:	297fff04 	addi	r5,r5,-4
    7060:	21800017 	ldw	r6,0(r4)
    7064:	28c00017 	ldw	r3,0(r5)
    7068:	30c0021e 	bne	r6,r3,7074 <__mcmp+0x44>
    706c:	393ffa36 	bltu	r7,r4,7058 <__mcmp+0x28>
    7070:	f800283a 	ret
    7074:	30c00236 	bltu	r6,r3,7080 <__mcmp+0x50>
    7078:	00800044 	movi	r2,1
    707c:	f800283a 	ret
    7080:	00bfffc4 	movi	r2,-1
    7084:	f800283a 	ret

00007088 <__mdiff>:
    7088:	defffb04 	addi	sp,sp,-20
    708c:	dc000015 	stw	r16,0(sp)
    7090:	2821883a 	mov	r16,r5
    7094:	dc800215 	stw	r18,8(sp)
    7098:	300b883a 	mov	r5,r6
    709c:	2025883a 	mov	r18,r4
    70a0:	8009883a 	mov	r4,r16
    70a4:	dc400115 	stw	r17,4(sp)
    70a8:	dfc00415 	stw	ra,16(sp)
    70ac:	dcc00315 	stw	r19,12(sp)
    70b0:	3023883a 	mov	r17,r6
    70b4:	00070300 	call	7030 <__mcmp>
    70b8:	10005026 	beq	r2,zero,71fc <__mdiff+0x174>
    70bc:	10004a16 	blt	r2,zero,71e8 <__mdiff+0x160>
    70c0:	0027883a 	mov	r19,zero
    70c4:	81400117 	ldw	r5,4(r16)
    70c8:	9009883a 	mov	r4,r18
    70cc:	00066e40 	call	66e4 <_Balloc>
    70d0:	82400417 	ldw	r9,16(r16)
    70d4:	89800417 	ldw	r6,16(r17)
    70d8:	14c00315 	stw	r19,12(r2)
    70dc:	4b800144 	addi	r14,r9,5
    70e0:	31800144 	addi	r6,r6,5
    70e4:	739d883a 	add	r14,r14,r14
    70e8:	318d883a 	add	r6,r6,r6
    70ec:	739d883a 	add	r14,r14,r14
    70f0:	318d883a 	add	r6,r6,r6
    70f4:	81c00504 	addi	r7,r16,20
    70f8:	839d883a 	add	r14,r16,r14
    70fc:	8a000504 	addi	r8,r17,20
    7100:	898d883a 	add	r6,r17,r6
    7104:	10c00504 	addi	r3,r2,20
    7108:	0009883a 	mov	r4,zero
    710c:	3b000017 	ldw	r12,0(r7)
    7110:	42c00017 	ldw	r11,0(r8)
    7114:	42000104 	addi	r8,r8,4
    7118:	62bfffcc 	andi	r10,r12,65535
    711c:	5b7fffcc 	andi	r13,r11,65535
    7120:	5109883a 	add	r4,r10,r4
    7124:	2355c83a 	sub	r10,r4,r13
    7128:	5816d43a 	srli	r11,r11,16
    712c:	6008d43a 	srli	r4,r12,16
    7130:	501bd43a 	srai	r13,r10,16
    7134:	1a80000d 	sth	r10,0(r3)
    7138:	22c9c83a 	sub	r4,r4,r11
    713c:	2349883a 	add	r4,r4,r13
    7140:	1900008d 	sth	r4,2(r3)
    7144:	39c00104 	addi	r7,r7,4
    7148:	2009d43a 	srai	r4,r4,16
    714c:	18c00104 	addi	r3,r3,4
    7150:	41bfee36 	bltu	r8,r6,710c <__mdiff+0x84>
    7154:	180b883a 	mov	r5,r3
    7158:	3815883a 	mov	r10,r7
    715c:	3b80132e 	bgeu	r7,r14,71ac <__mdiff+0x124>
    7160:	3a000017 	ldw	r8,0(r7)
    7164:	18c00104 	addi	r3,r3,4
    7168:	39c00104 	addi	r7,r7,4
    716c:	41bfffcc 	andi	r6,r8,65535
    7170:	310d883a 	add	r6,r6,r4
    7174:	3009d43a 	srai	r4,r6,16
    7178:	4010d43a 	srli	r8,r8,16
    717c:	19bfff0d 	sth	r6,-4(r3)
    7180:	2209883a 	add	r4,r4,r8
    7184:	193fff8d 	sth	r4,-2(r3)
    7188:	2009d43a 	srai	r4,r4,16
    718c:	3bbff436 	bltu	r7,r14,7160 <__mdiff+0xd8>
    7190:	0286303a 	nor	r3,zero,r10
    7194:	1b87883a 	add	r3,r3,r14
    7198:	1806d0ba 	srli	r3,r3,2
    719c:	18c00044 	addi	r3,r3,1
    71a0:	18c7883a 	add	r3,r3,r3
    71a4:	18c7883a 	add	r3,r3,r3
    71a8:	28c7883a 	add	r3,r5,r3
    71ac:	193fff17 	ldw	r4,-4(r3)
    71b0:	18ffff04 	addi	r3,r3,-4
    71b4:	2000041e 	bne	r4,zero,71c8 <__mdiff+0x140>
    71b8:	18ffff04 	addi	r3,r3,-4
    71bc:	19000017 	ldw	r4,0(r3)
    71c0:	4a7fffc4 	addi	r9,r9,-1
    71c4:	203ffc26 	beq	r4,zero,71b8 <__mdiff+0x130>
    71c8:	12400415 	stw	r9,16(r2)
    71cc:	dfc00417 	ldw	ra,16(sp)
    71d0:	dcc00317 	ldw	r19,12(sp)
    71d4:	dc800217 	ldw	r18,8(sp)
    71d8:	dc400117 	ldw	r17,4(sp)
    71dc:	dc000017 	ldw	r16,0(sp)
    71e0:	dec00504 	addi	sp,sp,20
    71e4:	f800283a 	ret
    71e8:	8005883a 	mov	r2,r16
    71ec:	04c00044 	movi	r19,1
    71f0:	8821883a 	mov	r16,r17
    71f4:	1023883a 	mov	r17,r2
    71f8:	003fb206 	br	70c4 <__mdiff+0x3c>
    71fc:	9009883a 	mov	r4,r18
    7200:	000b883a 	mov	r5,zero
    7204:	00066e40 	call	66e4 <_Balloc>
    7208:	00c00044 	movi	r3,1
    720c:	10c00415 	stw	r3,16(r2)
    7210:	10000515 	stw	zero,20(r2)
    7214:	dfc00417 	ldw	ra,16(sp)
    7218:	dcc00317 	ldw	r19,12(sp)
    721c:	dc800217 	ldw	r18,8(sp)
    7220:	dc400117 	ldw	r17,4(sp)
    7224:	dc000017 	ldw	r16,0(sp)
    7228:	dec00504 	addi	sp,sp,20
    722c:	f800283a 	ret

00007230 <__ulp>:
    7230:	295ffc2c 	andhi	r5,r5,32752
    7234:	00bf3034 	movhi	r2,64704
    7238:	2887883a 	add	r3,r5,r2
    723c:	00c0020e 	bge	zero,r3,7248 <__ulp+0x18>
    7240:	0005883a 	mov	r2,zero
    7244:	f800283a 	ret
    7248:	00c7c83a 	sub	r3,zero,r3
    724c:	1805d53a 	srai	r2,r3,20
    7250:	00c004c4 	movi	r3,19
    7254:	18800a0e 	bge	r3,r2,7280 <__ulp+0x50>
    7258:	01000c84 	movi	r4,50
    725c:	0007883a 	mov	r3,zero
    7260:	20800516 	blt	r4,r2,7278 <__ulp+0x48>
    7264:	01000cc4 	movi	r4,51
    7268:	2085c83a 	sub	r2,r4,r2
    726c:	01000044 	movi	r4,1
    7270:	2084983a 	sll	r2,r4,r2
    7274:	f800283a 	ret
    7278:	00800044 	movi	r2,1
    727c:	f800283a 	ret
    7280:	00c00234 	movhi	r3,8
    7284:	1887d83a 	sra	r3,r3,r2
    7288:	0005883a 	mov	r2,zero
    728c:	f800283a 	ret

00007290 <__b2d>:
    7290:	defffa04 	addi	sp,sp,-24
    7294:	dc000015 	stw	r16,0(sp)
    7298:	24000417 	ldw	r16,16(r4)
    729c:	dc400115 	stw	r17,4(sp)
    72a0:	dcc00315 	stw	r19,12(sp)
    72a4:	84000144 	addi	r16,r16,5
    72a8:	8421883a 	add	r16,r16,r16
    72ac:	8421883a 	add	r16,r16,r16
    72b0:	2421883a 	add	r16,r4,r16
    72b4:	847fff17 	ldw	r17,-4(r16)
    72b8:	24c00504 	addi	r19,r4,20
    72bc:	dd000415 	stw	r20,16(sp)
    72c0:	8809883a 	mov	r4,r17
    72c4:	dc800215 	stw	r18,8(sp)
    72c8:	2829883a 	mov	r20,r5
    72cc:	dfc00515 	stw	ra,20(sp)
    72d0:	00069fc0 	call	69fc <__hi0bits>
    72d4:	00c00804 	movi	r3,32
    72d8:	1887c83a 	sub	r3,r3,r2
    72dc:	a0c00015 	stw	r3,0(r20)
    72e0:	00c00284 	movi	r3,10
    72e4:	84bfff04 	addi	r18,r16,-4
    72e8:	18801216 	blt	r3,r2,7334 <__b2d+0xa4>
    72ec:	010002c4 	movi	r4,11
    72f0:	2089c83a 	sub	r4,r4,r2
    72f4:	8906d83a 	srl	r3,r17,r4
    72f8:	18cffc34 	orhi	r3,r3,16368
    72fc:	9c80322e 	bgeu	r19,r18,73c8 <__b2d+0x138>
    7300:	817ffe17 	ldw	r5,-8(r16)
    7304:	2908d83a 	srl	r4,r5,r4
    7308:	10800544 	addi	r2,r2,21
    730c:	88a2983a 	sll	r17,r17,r2
    7310:	2444b03a 	or	r2,r4,r17
    7314:	dfc00517 	ldw	ra,20(sp)
    7318:	dd000417 	ldw	r20,16(sp)
    731c:	dcc00317 	ldw	r19,12(sp)
    7320:	dc800217 	ldw	r18,8(sp)
    7324:	dc400117 	ldw	r17,4(sp)
    7328:	dc000017 	ldw	r16,0(sp)
    732c:	dec00604 	addi	sp,sp,24
    7330:	f800283a 	ret
    7334:	9c801636 	bltu	r19,r18,7390 <__b2d+0x100>
    7338:	113ffd44 	addi	r4,r2,-11
    733c:	000b883a 	mov	r5,zero
    7340:	20001726 	beq	r4,zero,73a0 <__b2d+0x110>
    7344:	00c00ac4 	movi	r3,43
    7348:	1885c83a 	sub	r2,r3,r2
    734c:	8906983a 	sll	r3,r17,r4
    7350:	288cd83a 	srl	r6,r5,r2
    7354:	18cffc34 	orhi	r3,r3,16368
    7358:	1986b03a 	or	r3,r3,r6
    735c:	9c801c2e 	bgeu	r19,r18,73d0 <__b2d+0x140>
    7360:	91bfff17 	ldw	r6,-4(r18)
    7364:	3084d83a 	srl	r2,r6,r2
    7368:	2908983a 	sll	r4,r5,r4
    736c:	1104b03a 	or	r2,r2,r4
    7370:	dfc00517 	ldw	ra,20(sp)
    7374:	dd000417 	ldw	r20,16(sp)
    7378:	dcc00317 	ldw	r19,12(sp)
    737c:	dc800217 	ldw	r18,8(sp)
    7380:	dc400117 	ldw	r17,4(sp)
    7384:	dc000017 	ldw	r16,0(sp)
    7388:	dec00604 	addi	sp,sp,24
    738c:	f800283a 	ret
    7390:	113ffd44 	addi	r4,r2,-11
    7394:	84bffe04 	addi	r18,r16,-8
    7398:	817ffe17 	ldw	r5,-8(r16)
    739c:	203fe91e 	bne	r4,zero,7344 <__b2d+0xb4>
    73a0:	88cffc34 	orhi	r3,r17,16368
    73a4:	2805883a 	mov	r2,r5
    73a8:	dfc00517 	ldw	ra,20(sp)
    73ac:	dd000417 	ldw	r20,16(sp)
    73b0:	dcc00317 	ldw	r19,12(sp)
    73b4:	dc800217 	ldw	r18,8(sp)
    73b8:	dc400117 	ldw	r17,4(sp)
    73bc:	dc000017 	ldw	r16,0(sp)
    73c0:	dec00604 	addi	sp,sp,24
    73c4:	f800283a 	ret
    73c8:	0009883a 	mov	r4,zero
    73cc:	003fce06 	br	7308 <__b2d+0x78>
    73d0:	0005883a 	mov	r2,zero
    73d4:	003fe406 	br	7368 <__b2d+0xd8>

000073d8 <__d2b>:
    73d8:	defff804 	addi	sp,sp,-32
    73dc:	dc400315 	stw	r17,12(sp)
    73e0:	3023883a 	mov	r17,r6
    73e4:	dc800415 	stw	r18,16(sp)
    73e8:	8824907a 	slli	r18,r17,1
    73ec:	dcc00515 	stw	r19,20(sp)
    73f0:	2827883a 	mov	r19,r5
    73f4:	9024d57a 	srli	r18,r18,21
    73f8:	01400044 	movi	r5,1
    73fc:	dd000615 	stw	r20,24(sp)
    7400:	dc000215 	stw	r16,8(sp)
    7404:	dfc00715 	stw	ra,28(sp)
    7408:	3829883a 	mov	r20,r7
    740c:	00066e40 	call	66e4 <_Balloc>
    7410:	1021883a 	mov	r16,r2
    7414:	00800434 	movhi	r2,16
    7418:	10bfffc4 	addi	r2,r2,-1
    741c:	88a2703a 	and	r17,r17,r2
    7420:	90000126 	beq	r18,zero,7428 <__d2b+0x50>
    7424:	8c400434 	orhi	r17,r17,16
    7428:	dc400015 	stw	r17,0(sp)
    742c:	98002226 	beq	r19,zero,74b8 <__d2b+0xe0>
    7430:	d9000104 	addi	r4,sp,4
    7434:	dcc00115 	stw	r19,4(sp)
    7438:	0006a640 	call	6a64 <__lo0bits>
    743c:	d8c00017 	ldw	r3,0(sp)
    7440:	10002d1e 	bne	r2,zero,74f8 <__d2b+0x120>
    7444:	d9000117 	ldw	r4,4(sp)
    7448:	81000515 	stw	r4,20(r16)
    744c:	1823003a 	cmpeq	r17,r3,zero
    7450:	01000084 	movi	r4,2
    7454:	2463c83a 	sub	r17,r4,r17
    7458:	80c00615 	stw	r3,24(r16)
    745c:	84400415 	stw	r17,16(r16)
    7460:	90001d1e 	bne	r18,zero,74d8 <__d2b+0x100>
    7464:	88c00104 	addi	r3,r17,4
    7468:	18c7883a 	add	r3,r3,r3
    746c:	18c7883a 	add	r3,r3,r3
    7470:	80c7883a 	add	r3,r16,r3
    7474:	19000017 	ldw	r4,0(r3)
    7478:	10bef384 	addi	r2,r2,-1074
    747c:	a0800015 	stw	r2,0(r20)
    7480:	00069fc0 	call	69fc <__hi0bits>
    7484:	8822917a 	slli	r17,r17,5
    7488:	d8c00817 	ldw	r3,32(sp)
    748c:	8885c83a 	sub	r2,r17,r2
    7490:	18800015 	stw	r2,0(r3)
    7494:	8005883a 	mov	r2,r16
    7498:	dfc00717 	ldw	ra,28(sp)
    749c:	dd000617 	ldw	r20,24(sp)
    74a0:	dcc00517 	ldw	r19,20(sp)
    74a4:	dc800417 	ldw	r18,16(sp)
    74a8:	dc400317 	ldw	r17,12(sp)
    74ac:	dc000217 	ldw	r16,8(sp)
    74b0:	dec00804 	addi	sp,sp,32
    74b4:	f800283a 	ret
    74b8:	d809883a 	mov	r4,sp
    74bc:	0006a640 	call	6a64 <__lo0bits>
    74c0:	d8c00017 	ldw	r3,0(sp)
    74c4:	04400044 	movi	r17,1
    74c8:	84400415 	stw	r17,16(r16)
    74cc:	80c00515 	stw	r3,20(r16)
    74d0:	10800804 	addi	r2,r2,32
    74d4:	903fe326 	beq	r18,zero,7464 <__d2b+0x8c>
    74d8:	00c00d44 	movi	r3,53
    74dc:	94bef344 	addi	r18,r18,-1075
    74e0:	90a5883a 	add	r18,r18,r2
    74e4:	1885c83a 	sub	r2,r3,r2
    74e8:	d8c00817 	ldw	r3,32(sp)
    74ec:	a4800015 	stw	r18,0(r20)
    74f0:	18800015 	stw	r2,0(r3)
    74f4:	003fe706 	br	7494 <__d2b+0xbc>
    74f8:	01000804 	movi	r4,32
    74fc:	2089c83a 	sub	r4,r4,r2
    7500:	1908983a 	sll	r4,r3,r4
    7504:	d9400117 	ldw	r5,4(sp)
    7508:	1886d83a 	srl	r3,r3,r2
    750c:	2148b03a 	or	r4,r4,r5
    7510:	81000515 	stw	r4,20(r16)
    7514:	d8c00015 	stw	r3,0(sp)
    7518:	003fcc06 	br	744c <__d2b+0x74>

0000751c <__ratio>:
    751c:	defff904 	addi	sp,sp,-28
    7520:	dc400315 	stw	r17,12(sp)
    7524:	2823883a 	mov	r17,r5
    7528:	d9400104 	addi	r5,sp,4
    752c:	dfc00615 	stw	ra,24(sp)
    7530:	dcc00515 	stw	r19,20(sp)
    7534:	dc800415 	stw	r18,16(sp)
    7538:	2027883a 	mov	r19,r4
    753c:	dc000215 	stw	r16,8(sp)
    7540:	00072900 	call	7290 <__b2d>
    7544:	8809883a 	mov	r4,r17
    7548:	d80b883a 	mov	r5,sp
    754c:	1025883a 	mov	r18,r2
    7550:	1821883a 	mov	r16,r3
    7554:	00072900 	call	7290 <__b2d>
    7558:	99400417 	ldw	r5,16(r19)
    755c:	89000417 	ldw	r4,16(r17)
    7560:	d9800117 	ldw	r6,4(sp)
    7564:	2909c83a 	sub	r4,r5,r4
    7568:	d9400017 	ldw	r5,0(sp)
    756c:	2008917a 	slli	r4,r4,5
    7570:	314bc83a 	sub	r5,r6,r5
    7574:	290b883a 	add	r5,r5,r4
    7578:	01400e0e 	bge	zero,r5,75b4 <__ratio+0x98>
    757c:	280a953a 	slli	r5,r5,20
    7580:	2c21883a 	add	r16,r5,r16
    7584:	9009883a 	mov	r4,r18
    7588:	800b883a 	mov	r5,r16
    758c:	100d883a 	mov	r6,r2
    7590:	180f883a 	mov	r7,r3
    7594:	000972c0 	call	972c <__divdf3>
    7598:	dfc00617 	ldw	ra,24(sp)
    759c:	dcc00517 	ldw	r19,20(sp)
    75a0:	dc800417 	ldw	r18,16(sp)
    75a4:	dc400317 	ldw	r17,12(sp)
    75a8:	dc000217 	ldw	r16,8(sp)
    75ac:	dec00704 	addi	sp,sp,28
    75b0:	f800283a 	ret
    75b4:	280a953a 	slli	r5,r5,20
    75b8:	1947c83a 	sub	r3,r3,r5
    75bc:	003ff106 	br	7584 <__ratio+0x68>

000075c0 <_mprec_log10>:
    75c0:	defffe04 	addi	sp,sp,-8
    75c4:	dc000015 	stw	r16,0(sp)
    75c8:	dfc00115 	stw	ra,4(sp)
    75cc:	008005c4 	movi	r2,23
    75d0:	2021883a 	mov	r16,r4
    75d4:	11000d0e 	bge	r2,r4,760c <_mprec_log10+0x4c>
    75d8:	0005883a 	mov	r2,zero
    75dc:	00cffc34 	movhi	r3,16368
    75e0:	843fffc4 	addi	r16,r16,-1
    75e4:	1009883a 	mov	r4,r2
    75e8:	180b883a 	mov	r5,r3
    75ec:	000d883a 	mov	r6,zero
    75f0:	01d00934 	movhi	r7,16420
    75f4:	00094480 	call	9448 <__muldf3>
    75f8:	803ff91e 	bne	r16,zero,75e0 <_mprec_log10+0x20>
    75fc:	dfc00117 	ldw	ra,4(sp)
    7600:	dc000017 	ldw	r16,0(sp)
    7604:	dec00204 	addi	sp,sp,8
    7608:	f800283a 	ret
    760c:	202090fa 	slli	r16,r4,3
    7610:	00800074 	movhi	r2,1
    7614:	10b4c304 	addi	r2,r2,-11508
    7618:	1421883a 	add	r16,r2,r16
    761c:	80800017 	ldw	r2,0(r16)
    7620:	80c00117 	ldw	r3,4(r16)
    7624:	dfc00117 	ldw	ra,4(sp)
    7628:	dc000017 	ldw	r16,0(sp)
    762c:	dec00204 	addi	sp,sp,8
    7630:	f800283a 	ret

00007634 <__copybits>:
    7634:	297fffc4 	addi	r5,r5,-1
    7638:	31c00417 	ldw	r7,16(r6)
    763c:	2811d17a 	srai	r8,r5,5
    7640:	30800504 	addi	r2,r6,20
    7644:	39c00144 	addi	r7,r7,5
    7648:	42000044 	addi	r8,r8,1
    764c:	39cf883a 	add	r7,r7,r7
    7650:	4211883a 	add	r8,r8,r8
    7654:	39cf883a 	add	r7,r7,r7
    7658:	4211883a 	add	r8,r8,r8
    765c:	31cf883a 	add	r7,r6,r7
    7660:	2211883a 	add	r8,r4,r8
    7664:	11c00d2e 	bgeu	r2,r7,769c <__copybits+0x68>
    7668:	2007883a 	mov	r3,r4
    766c:	11400017 	ldw	r5,0(r2)
    7670:	18c00104 	addi	r3,r3,4
    7674:	10800104 	addi	r2,r2,4
    7678:	197fff15 	stw	r5,-4(r3)
    767c:	11fffb36 	bltu	r2,r7,766c <__copybits+0x38>
    7680:	3985c83a 	sub	r2,r7,r6
    7684:	10bffac4 	addi	r2,r2,-21
    7688:	1004d0ba 	srli	r2,r2,2
    768c:	10800044 	addi	r2,r2,1
    7690:	1085883a 	add	r2,r2,r2
    7694:	1085883a 	add	r2,r2,r2
    7698:	2089883a 	add	r4,r4,r2
    769c:	2200032e 	bgeu	r4,r8,76ac <__copybits+0x78>
    76a0:	20000015 	stw	zero,0(r4)
    76a4:	21000104 	addi	r4,r4,4
    76a8:	223ffd36 	bltu	r4,r8,76a0 <__copybits+0x6c>
    76ac:	f800283a 	ret

000076b0 <__any_on>:
    76b0:	21800417 	ldw	r6,16(r4)
    76b4:	2805d17a 	srai	r2,r5,5
    76b8:	20c00504 	addi	r3,r4,20
    76bc:	30800f0e 	bge	r6,r2,76fc <__any_on+0x4c>
    76c0:	3005883a 	mov	r2,r6
    76c4:	10800144 	addi	r2,r2,5
    76c8:	1085883a 	add	r2,r2,r2
    76cc:	1085883a 	add	r2,r2,r2
    76d0:	2089883a 	add	r4,r4,r2
    76d4:	1900152e 	bgeu	r3,r4,772c <__any_on+0x7c>
    76d8:	20bfff17 	ldw	r2,-4(r4)
    76dc:	213fff04 	addi	r4,r4,-4
    76e0:	1000041e 	bne	r2,zero,76f4 <__any_on+0x44>
    76e4:	1900112e 	bgeu	r3,r4,772c <__any_on+0x7c>
    76e8:	213fff04 	addi	r4,r4,-4
    76ec:	20800017 	ldw	r2,0(r4)
    76f0:	103ffc26 	beq	r2,zero,76e4 <__any_on+0x34>
    76f4:	00800044 	movi	r2,1
    76f8:	f800283a 	ret
    76fc:	11bff10e 	bge	r2,r6,76c4 <__any_on+0x14>
    7700:	294007cc 	andi	r5,r5,31
    7704:	283fef26 	beq	r5,zero,76c4 <__any_on+0x14>
    7708:	11800144 	addi	r6,r2,5
    770c:	318d883a 	add	r6,r6,r6
    7710:	318d883a 	add	r6,r6,r6
    7714:	218d883a 	add	r6,r4,r6
    7718:	31800017 	ldw	r6,0(r6)
    771c:	314ed83a 	srl	r7,r6,r5
    7720:	394a983a 	sll	r5,r7,r5
    7724:	29bff31e 	bne	r5,r6,76f4 <__any_on+0x44>
    7728:	003fe606 	br	76c4 <__any_on+0x14>
    772c:	0005883a 	mov	r2,zero
    7730:	f800283a 	ret

00007734 <_realloc_r>:
    7734:	defff504 	addi	sp,sp,-44
    7738:	dd400615 	stw	r21,24(sp)
    773c:	dc800315 	stw	r18,12(sp)
    7740:	dc000115 	stw	r16,4(sp)
    7744:	dfc00a15 	stw	ra,40(sp)
    7748:	df000915 	stw	fp,36(sp)
    774c:	ddc00815 	stw	r23,32(sp)
    7750:	dd800715 	stw	r22,28(sp)
    7754:	dd000515 	stw	r20,20(sp)
    7758:	dcc00415 	stw	r19,16(sp)
    775c:	dc400215 	stw	r17,8(sp)
    7760:	2821883a 	mov	r16,r5
    7764:	202b883a 	mov	r21,r4
    7768:	3025883a 	mov	r18,r6
    776c:	28009626 	beq	r5,zero,79c8 <_realloc_r+0x294>
    7770:	000aac00 	call	aac0 <__malloc_lock>
    7774:	80bfff17 	ldw	r2,-4(r16)
    7778:	04ffff04 	movi	r19,-4
    777c:	90c002c4 	addi	r3,r18,11
    7780:	01000584 	movi	r4,22
    7784:	85bffe04 	addi	r22,r16,-8
    7788:	14e6703a 	and	r19,r2,r19
    778c:	20c0372e 	bgeu	r4,r3,786c <_realloc_r+0x138>
    7790:	047ffe04 	movi	r17,-8
    7794:	1c62703a 	and	r17,r3,r17
    7798:	8807883a 	mov	r3,r17
    779c:	88005a16 	blt	r17,zero,7908 <_realloc_r+0x1d4>
    77a0:	8c805936 	bltu	r17,r18,7908 <_realloc_r+0x1d4>
    77a4:	98c0340e 	bge	r19,r3,7878 <_realloc_r+0x144>
    77a8:	07000074 	movhi	fp,1
    77ac:	e7364804 	addi	fp,fp,-9952
    77b0:	e1400217 	ldw	r5,8(fp)
    77b4:	b4c9883a 	add	r4,r22,r19
    77b8:	29009026 	beq	r5,r4,79fc <_realloc_r+0x2c8>
    77bc:	21800117 	ldw	r6,4(r4)
    77c0:	01ffff84 	movi	r7,-2
    77c4:	31ce703a 	and	r7,r6,r7
    77c8:	21cf883a 	add	r7,r4,r7
    77cc:	39c00117 	ldw	r7,4(r7)
    77d0:	39c0004c 	andi	r7,r7,1
    77d4:	38004326 	beq	r7,zero,78e4 <_realloc_r+0x1b0>
    77d8:	000d883a 	mov	r6,zero
    77dc:	0009883a 	mov	r4,zero
    77e0:	1080004c 	andi	r2,r2,1
    77e4:	10005a1e 	bne	r2,zero,7950 <_realloc_r+0x21c>
    77e8:	85fffe17 	ldw	r23,-8(r16)
    77ec:	00bfff04 	movi	r2,-4
    77f0:	b5efc83a 	sub	r23,r22,r23
    77f4:	b9c00117 	ldw	r7,4(r23)
    77f8:	388e703a 	and	r7,r7,r2
    77fc:	3ccf883a 	add	r7,r7,r19
    7800:	20005226 	beq	r4,zero,794c <_realloc_r+0x218>
    7804:	31e9883a 	add	r20,r6,r7
    7808:	2140c726 	beq	r4,r5,7b28 <_realloc_r+0x3f4>
    780c:	a0c04f16 	blt	r20,r3,794c <_realloc_r+0x218>
    7810:	20800317 	ldw	r2,12(r4)
    7814:	20c00217 	ldw	r3,8(r4)
    7818:	99bfff04 	addi	r6,r19,-4
    781c:	01000904 	movi	r4,36
    7820:	18800315 	stw	r2,12(r3)
    7824:	10c00215 	stw	r3,8(r2)
    7828:	b8c00217 	ldw	r3,8(r23)
    782c:	b8800317 	ldw	r2,12(r23)
    7830:	bc800204 	addi	r18,r23,8
    7834:	18800315 	stw	r2,12(r3)
    7838:	10c00215 	stw	r3,8(r2)
    783c:	2180ed36 	bltu	r4,r6,7bf4 <_realloc_r+0x4c0>
    7840:	008004c4 	movi	r2,19
    7844:	11809b2e 	bgeu	r2,r6,7ab4 <_realloc_r+0x380>
    7848:	80800017 	ldw	r2,0(r16)
    784c:	b8800215 	stw	r2,8(r23)
    7850:	80800117 	ldw	r2,4(r16)
    7854:	b8800315 	stw	r2,12(r23)
    7858:	008006c4 	movi	r2,27
    785c:	1180f936 	bltu	r2,r6,7c44 <_realloc_r+0x510>
    7860:	b8800404 	addi	r2,r23,16
    7864:	80c00204 	addi	r3,r16,8
    7868:	00009406 	br	7abc <_realloc_r+0x388>
    786c:	00c00404 	movi	r3,16
    7870:	1823883a 	mov	r17,r3
    7874:	003fca06 	br	77a0 <_realloc_r+0x6c>
    7878:	9829883a 	mov	r20,r19
    787c:	a447c83a 	sub	r3,r20,r17
    7880:	010003c4 	movi	r4,15
    7884:	1080004c 	andi	r2,r2,1
    7888:	20c02336 	bltu	r4,r3,7918 <_realloc_r+0x1e4>
    788c:	1504b03a 	or	r2,r2,r20
    7890:	b0800115 	stw	r2,4(r22)
    7894:	b52d883a 	add	r22,r22,r20
    7898:	b0800117 	ldw	r2,4(r22)
    789c:	10800054 	ori	r2,r2,1
    78a0:	b0800115 	stw	r2,4(r22)
    78a4:	a809883a 	mov	r4,r21
    78a8:	000aae00 	call	aae0 <__malloc_unlock>
    78ac:	8025883a 	mov	r18,r16
    78b0:	9005883a 	mov	r2,r18
    78b4:	dfc00a17 	ldw	ra,40(sp)
    78b8:	df000917 	ldw	fp,36(sp)
    78bc:	ddc00817 	ldw	r23,32(sp)
    78c0:	dd800717 	ldw	r22,28(sp)
    78c4:	dd400617 	ldw	r21,24(sp)
    78c8:	dd000517 	ldw	r20,20(sp)
    78cc:	dcc00417 	ldw	r19,16(sp)
    78d0:	dc800317 	ldw	r18,12(sp)
    78d4:	dc400217 	ldw	r17,8(sp)
    78d8:	dc000117 	ldw	r16,4(sp)
    78dc:	dec00b04 	addi	sp,sp,44
    78e0:	f800283a 	ret
    78e4:	01ffff04 	movi	r7,-4
    78e8:	31cc703a 	and	r6,r6,r7
    78ec:	34e9883a 	add	r20,r6,r19
    78f0:	a0ffbb16 	blt	r20,r3,77e0 <_realloc_r+0xac>
    78f4:	20c00317 	ldw	r3,12(r4)
    78f8:	21000217 	ldw	r4,8(r4)
    78fc:	20c00315 	stw	r3,12(r4)
    7900:	19000215 	stw	r4,8(r3)
    7904:	003fdd06 	br	787c <_realloc_r+0x148>
    7908:	00800304 	movi	r2,12
    790c:	a8800015 	stw	r2,0(r21)
    7910:	0025883a 	mov	r18,zero
    7914:	003fe606 	br	78b0 <_realloc_r+0x17c>
    7918:	1444b03a 	or	r2,r2,r17
    791c:	b0800115 	stw	r2,4(r22)
    7920:	b44b883a 	add	r5,r22,r17
    7924:	18800054 	ori	r2,r3,1
    7928:	28800115 	stw	r2,4(r5)
    792c:	28c7883a 	add	r3,r5,r3
    7930:	18800117 	ldw	r2,4(r3)
    7934:	a809883a 	mov	r4,r21
    7938:	29400204 	addi	r5,r5,8
    793c:	10800054 	ori	r2,r2,1
    7940:	18800115 	stw	r2,4(r3)
    7944:	00058c80 	call	58c8 <_free_r>
    7948:	003fd606 	br	78a4 <_realloc_r+0x170>
    794c:	38c0330e 	bge	r7,r3,7a1c <_realloc_r+0x2e8>
    7950:	900b883a 	mov	r5,r18
    7954:	a809883a 	mov	r4,r21
    7958:	0000f7c0 	call	f7c <_malloc_r>
    795c:	1025883a 	mov	r18,r2
    7960:	10001626 	beq	r2,zero,79bc <_realloc_r+0x288>
    7964:	80bfff17 	ldw	r2,-4(r16)
    7968:	00ffff84 	movi	r3,-2
    796c:	913ffe04 	addi	r4,r18,-8
    7970:	10c6703a 	and	r3,r2,r3
    7974:	b0c7883a 	add	r3,r22,r3
    7978:	20c09926 	beq	r4,r3,7be0 <_realloc_r+0x4ac>
    797c:	99bfff04 	addi	r6,r19,-4
    7980:	00800904 	movi	r2,36
    7984:	11806436 	bltu	r2,r6,7b18 <_realloc_r+0x3e4>
    7988:	00c004c4 	movi	r3,19
    798c:	19804036 	bltu	r3,r6,7a90 <_realloc_r+0x35c>
    7990:	9005883a 	mov	r2,r18
    7994:	8007883a 	mov	r3,r16
    7998:	19000017 	ldw	r4,0(r3)
    799c:	11000015 	stw	r4,0(r2)
    79a0:	19000117 	ldw	r4,4(r3)
    79a4:	11000115 	stw	r4,4(r2)
    79a8:	18c00217 	ldw	r3,8(r3)
    79ac:	10c00215 	stw	r3,8(r2)
    79b0:	a809883a 	mov	r4,r21
    79b4:	800b883a 	mov	r5,r16
    79b8:	00058c80 	call	58c8 <_free_r>
    79bc:	a809883a 	mov	r4,r21
    79c0:	000aae00 	call	aae0 <__malloc_unlock>
    79c4:	003fba06 	br	78b0 <_realloc_r+0x17c>
    79c8:	300b883a 	mov	r5,r6
    79cc:	dfc00a17 	ldw	ra,40(sp)
    79d0:	df000917 	ldw	fp,36(sp)
    79d4:	ddc00817 	ldw	r23,32(sp)
    79d8:	dd800717 	ldw	r22,28(sp)
    79dc:	dd400617 	ldw	r21,24(sp)
    79e0:	dd000517 	ldw	r20,20(sp)
    79e4:	dcc00417 	ldw	r19,16(sp)
    79e8:	dc800317 	ldw	r18,12(sp)
    79ec:	dc400217 	ldw	r17,8(sp)
    79f0:	dc000117 	ldw	r16,4(sp)
    79f4:	dec00b04 	addi	sp,sp,44
    79f8:	0000f7c1 	jmpi	f7c <_malloc_r>
    79fc:	29800117 	ldw	r6,4(r5)
    7a00:	013fff04 	movi	r4,-4
    7a04:	89c00404 	addi	r7,r17,16
    7a08:	310c703a 	and	r6,r6,r4
    7a0c:	34c9883a 	add	r4,r6,r19
    7a10:	21c0340e 	bge	r4,r7,7ae4 <_realloc_r+0x3b0>
    7a14:	2809883a 	mov	r4,r5
    7a18:	003f7106 	br	77e0 <_realloc_r+0xac>
    7a1c:	b8800317 	ldw	r2,12(r23)
    7a20:	b8c00217 	ldw	r3,8(r23)
    7a24:	99bfff04 	addi	r6,r19,-4
    7a28:	01000904 	movi	r4,36
    7a2c:	18800315 	stw	r2,12(r3)
    7a30:	10c00215 	stw	r3,8(r2)
    7a34:	bc800204 	addi	r18,r23,8
    7a38:	21807836 	bltu	r4,r6,7c1c <_realloc_r+0x4e8>
    7a3c:	008004c4 	movi	r2,19
    7a40:	1180732e 	bgeu	r2,r6,7c10 <_realloc_r+0x4dc>
    7a44:	80800017 	ldw	r2,0(r16)
    7a48:	b8800215 	stw	r2,8(r23)
    7a4c:	80800117 	ldw	r2,4(r16)
    7a50:	b8800315 	stw	r2,12(r23)
    7a54:	008006c4 	movi	r2,27
    7a58:	11808936 	bltu	r2,r6,7c80 <_realloc_r+0x54c>
    7a5c:	b8800404 	addi	r2,r23,16
    7a60:	80c00204 	addi	r3,r16,8
    7a64:	19000017 	ldw	r4,0(r3)
    7a68:	9021883a 	mov	r16,r18
    7a6c:	3829883a 	mov	r20,r7
    7a70:	11000015 	stw	r4,0(r2)
    7a74:	19000117 	ldw	r4,4(r3)
    7a78:	b82d883a 	mov	r22,r23
    7a7c:	11000115 	stw	r4,4(r2)
    7a80:	18c00217 	ldw	r3,8(r3)
    7a84:	10c00215 	stw	r3,8(r2)
    7a88:	b8800117 	ldw	r2,4(r23)
    7a8c:	003f7b06 	br	787c <_realloc_r+0x148>
    7a90:	80c00017 	ldw	r3,0(r16)
    7a94:	90c00015 	stw	r3,0(r18)
    7a98:	80c00117 	ldw	r3,4(r16)
    7a9c:	90c00115 	stw	r3,4(r18)
    7aa0:	00c006c4 	movi	r3,27
    7aa4:	19804636 	bltu	r3,r6,7bc0 <_realloc_r+0x48c>
    7aa8:	90800204 	addi	r2,r18,8
    7aac:	80c00204 	addi	r3,r16,8
    7ab0:	003fb906 	br	7998 <_realloc_r+0x264>
    7ab4:	9005883a 	mov	r2,r18
    7ab8:	8007883a 	mov	r3,r16
    7abc:	19000017 	ldw	r4,0(r3)
    7ac0:	9021883a 	mov	r16,r18
    7ac4:	b82d883a 	mov	r22,r23
    7ac8:	11000015 	stw	r4,0(r2)
    7acc:	19000117 	ldw	r4,4(r3)
    7ad0:	11000115 	stw	r4,4(r2)
    7ad4:	18c00217 	ldw	r3,8(r3)
    7ad8:	10c00215 	stw	r3,8(r2)
    7adc:	b8800117 	ldw	r2,4(r23)
    7ae0:	003f6606 	br	787c <_realloc_r+0x148>
    7ae4:	2445c83a 	sub	r2,r4,r17
    7ae8:	b46d883a 	add	r22,r22,r17
    7aec:	10800054 	ori	r2,r2,1
    7af0:	b0800115 	stw	r2,4(r22)
    7af4:	80bfff17 	ldw	r2,-4(r16)
    7af8:	a809883a 	mov	r4,r21
    7afc:	e5800215 	stw	r22,8(fp)
    7b00:	1080004c 	andi	r2,r2,1
    7b04:	88a2b03a 	or	r17,r17,r2
    7b08:	847fff15 	stw	r17,-4(r16)
    7b0c:	000aae00 	call	aae0 <__malloc_unlock>
    7b10:	8025883a 	mov	r18,r16
    7b14:	003f6606 	br	78b0 <_realloc_r+0x17c>
    7b18:	9009883a 	mov	r4,r18
    7b1c:	800b883a 	mov	r5,r16
    7b20:	00065580 	call	6558 <memmove>
    7b24:	003fa206 	br	79b0 <_realloc_r+0x27c>
    7b28:	88800404 	addi	r2,r17,16
    7b2c:	a0bf8716 	blt	r20,r2,794c <_realloc_r+0x218>
    7b30:	b8800317 	ldw	r2,12(r23)
    7b34:	b8c00217 	ldw	r3,8(r23)
    7b38:	99bfff04 	addi	r6,r19,-4
    7b3c:	01000904 	movi	r4,36
    7b40:	18800315 	stw	r2,12(r3)
    7b44:	10c00215 	stw	r3,8(r2)
    7b48:	bc800204 	addi	r18,r23,8
    7b4c:	21806536 	bltu	r4,r6,7ce4 <_realloc_r+0x5b0>
    7b50:	008004c4 	movi	r2,19
    7b54:	1180592e 	bgeu	r2,r6,7cbc <_realloc_r+0x588>
    7b58:	80800017 	ldw	r2,0(r16)
    7b5c:	b8800215 	stw	r2,8(r23)
    7b60:	80800117 	ldw	r2,4(r16)
    7b64:	b8800315 	stw	r2,12(r23)
    7b68:	008006c4 	movi	r2,27
    7b6c:	11806136 	bltu	r2,r6,7cf4 <_realloc_r+0x5c0>
    7b70:	b8800404 	addi	r2,r23,16
    7b74:	80c00204 	addi	r3,r16,8
    7b78:	19000017 	ldw	r4,0(r3)
    7b7c:	11000015 	stw	r4,0(r2)
    7b80:	19000117 	ldw	r4,4(r3)
    7b84:	11000115 	stw	r4,4(r2)
    7b88:	18c00217 	ldw	r3,8(r3)
    7b8c:	10c00215 	stw	r3,8(r2)
    7b90:	a447c83a 	sub	r3,r20,r17
    7b94:	bc45883a 	add	r2,r23,r17
    7b98:	18c00054 	ori	r3,r3,1
    7b9c:	10c00115 	stw	r3,4(r2)
    7ba0:	b8c00117 	ldw	r3,4(r23)
    7ba4:	e0800215 	stw	r2,8(fp)
    7ba8:	a809883a 	mov	r4,r21
    7bac:	1880004c 	andi	r2,r3,1
    7bb0:	88a2b03a 	or	r17,r17,r2
    7bb4:	bc400115 	stw	r17,4(r23)
    7bb8:	000aae00 	call	aae0 <__malloc_unlock>
    7bbc:	003f3c06 	br	78b0 <_realloc_r+0x17c>
    7bc0:	80c00217 	ldw	r3,8(r16)
    7bc4:	90c00215 	stw	r3,8(r18)
    7bc8:	80c00317 	ldw	r3,12(r16)
    7bcc:	90c00315 	stw	r3,12(r18)
    7bd0:	30802426 	beq	r6,r2,7c64 <_realloc_r+0x530>
    7bd4:	90800404 	addi	r2,r18,16
    7bd8:	80c00404 	addi	r3,r16,16
    7bdc:	003f6e06 	br	7998 <_realloc_r+0x264>
    7be0:	953fff17 	ldw	r20,-4(r18)
    7be4:	00ffff04 	movi	r3,-4
    7be8:	a0e8703a 	and	r20,r20,r3
    7bec:	a4e9883a 	add	r20,r20,r19
    7bf0:	003f2206 	br	787c <_realloc_r+0x148>
    7bf4:	800b883a 	mov	r5,r16
    7bf8:	9009883a 	mov	r4,r18
    7bfc:	00065580 	call	6558 <memmove>
    7c00:	9021883a 	mov	r16,r18
    7c04:	b8800117 	ldw	r2,4(r23)
    7c08:	b82d883a 	mov	r22,r23
    7c0c:	003f1b06 	br	787c <_realloc_r+0x148>
    7c10:	9005883a 	mov	r2,r18
    7c14:	8007883a 	mov	r3,r16
    7c18:	003f9206 	br	7a64 <_realloc_r+0x330>
    7c1c:	800b883a 	mov	r5,r16
    7c20:	9009883a 	mov	r4,r18
    7c24:	d9c00015 	stw	r7,0(sp)
    7c28:	00065580 	call	6558 <memmove>
    7c2c:	d9c00017 	ldw	r7,0(sp)
    7c30:	9021883a 	mov	r16,r18
    7c34:	b8800117 	ldw	r2,4(r23)
    7c38:	3829883a 	mov	r20,r7
    7c3c:	b82d883a 	mov	r22,r23
    7c40:	003f0e06 	br	787c <_realloc_r+0x148>
    7c44:	80800217 	ldw	r2,8(r16)
    7c48:	b8800415 	stw	r2,16(r23)
    7c4c:	80800317 	ldw	r2,12(r16)
    7c50:	b8800515 	stw	r2,20(r23)
    7c54:	31001226 	beq	r6,r4,7ca0 <_realloc_r+0x56c>
    7c58:	b8800604 	addi	r2,r23,24
    7c5c:	80c00404 	addi	r3,r16,16
    7c60:	003f9606 	br	7abc <_realloc_r+0x388>
    7c64:	81000417 	ldw	r4,16(r16)
    7c68:	90800604 	addi	r2,r18,24
    7c6c:	80c00604 	addi	r3,r16,24
    7c70:	91000415 	stw	r4,16(r18)
    7c74:	81000517 	ldw	r4,20(r16)
    7c78:	91000515 	stw	r4,20(r18)
    7c7c:	003f4606 	br	7998 <_realloc_r+0x264>
    7c80:	80800217 	ldw	r2,8(r16)
    7c84:	b8800415 	stw	r2,16(r23)
    7c88:	80800317 	ldw	r2,12(r16)
    7c8c:	b8800515 	stw	r2,20(r23)
    7c90:	31000d26 	beq	r6,r4,7cc8 <_realloc_r+0x594>
    7c94:	b8800604 	addi	r2,r23,24
    7c98:	80c00404 	addi	r3,r16,16
    7c9c:	003f7106 	br	7a64 <_realloc_r+0x330>
    7ca0:	81000417 	ldw	r4,16(r16)
    7ca4:	b8800804 	addi	r2,r23,32
    7ca8:	80c00604 	addi	r3,r16,24
    7cac:	b9000615 	stw	r4,24(r23)
    7cb0:	81000517 	ldw	r4,20(r16)
    7cb4:	b9000715 	stw	r4,28(r23)
    7cb8:	003f8006 	br	7abc <_realloc_r+0x388>
    7cbc:	9005883a 	mov	r2,r18
    7cc0:	8007883a 	mov	r3,r16
    7cc4:	003fac06 	br	7b78 <_realloc_r+0x444>
    7cc8:	81000417 	ldw	r4,16(r16)
    7ccc:	b8800804 	addi	r2,r23,32
    7cd0:	80c00604 	addi	r3,r16,24
    7cd4:	b9000615 	stw	r4,24(r23)
    7cd8:	81000517 	ldw	r4,20(r16)
    7cdc:	b9000715 	stw	r4,28(r23)
    7ce0:	003f6006 	br	7a64 <_realloc_r+0x330>
    7ce4:	9009883a 	mov	r4,r18
    7ce8:	800b883a 	mov	r5,r16
    7cec:	00065580 	call	6558 <memmove>
    7cf0:	003fa706 	br	7b90 <_realloc_r+0x45c>
    7cf4:	80800217 	ldw	r2,8(r16)
    7cf8:	b8800415 	stw	r2,16(r23)
    7cfc:	80800317 	ldw	r2,12(r16)
    7d00:	b8800515 	stw	r2,20(r23)
    7d04:	31000326 	beq	r6,r4,7d14 <_realloc_r+0x5e0>
    7d08:	b8800604 	addi	r2,r23,24
    7d0c:	80c00404 	addi	r3,r16,16
    7d10:	003f9906 	br	7b78 <_realloc_r+0x444>
    7d14:	81000417 	ldw	r4,16(r16)
    7d18:	b8800804 	addi	r2,r23,32
    7d1c:	80c00604 	addi	r3,r16,24
    7d20:	b9000615 	stw	r4,24(r23)
    7d24:	81000517 	ldw	r4,20(r16)
    7d28:	b9000715 	stw	r4,28(r23)
    7d2c:	003f9206 	br	7b78 <_realloc_r+0x444>

00007d30 <__isinfd>:
    7d30:	0105c83a 	sub	r2,zero,r4
    7d34:	1108b03a 	or	r4,r2,r4
    7d38:	2004d7fa 	srli	r2,r4,31
    7d3c:	00e00034 	movhi	r3,32768
    7d40:	18ffffc4 	addi	r3,r3,-1
    7d44:	28ca703a 	and	r5,r5,r3
    7d48:	1144b03a 	or	r2,r2,r5
    7d4c:	00dffc34 	movhi	r3,32752
    7d50:	1885c83a 	sub	r2,r3,r2
    7d54:	0087c83a 	sub	r3,zero,r2
    7d58:	1884b03a 	or	r2,r3,r2
    7d5c:	1005d7fa 	srai	r2,r2,31
    7d60:	10800044 	addi	r2,r2,1
    7d64:	f800283a 	ret

00007d68 <__isnand>:
    7d68:	0105c83a 	sub	r2,zero,r4
    7d6c:	1108b03a 	or	r4,r2,r4
    7d70:	2004d7fa 	srli	r2,r4,31
    7d74:	00e00034 	movhi	r3,32768
    7d78:	18ffffc4 	addi	r3,r3,-1
    7d7c:	28ca703a 	and	r5,r5,r3
    7d80:	1144b03a 	or	r2,r2,r5
    7d84:	00dffc34 	movhi	r3,32752
    7d88:	1885c83a 	sub	r2,r3,r2
    7d8c:	1004d7fa 	srli	r2,r2,31
    7d90:	f800283a 	ret

00007d94 <__sread>:
    7d94:	defffe04 	addi	sp,sp,-8
    7d98:	dc000015 	stw	r16,0(sp)
    7d9c:	2821883a 	mov	r16,r5
    7da0:	2940038f 	ldh	r5,14(r5)
    7da4:	dfc00115 	stw	ra,4(sp)
    7da8:	000835c0 	call	835c <_read_r>
    7dac:	10000716 	blt	r2,zero,7dcc <__sread+0x38>
    7db0:	80c01417 	ldw	r3,80(r16)
    7db4:	1887883a 	add	r3,r3,r2
    7db8:	80c01415 	stw	r3,80(r16)
    7dbc:	dfc00117 	ldw	ra,4(sp)
    7dc0:	dc000017 	ldw	r16,0(sp)
    7dc4:	dec00204 	addi	sp,sp,8
    7dc8:	f800283a 	ret
    7dcc:	80c0030b 	ldhu	r3,12(r16)
    7dd0:	18fbffcc 	andi	r3,r3,61439
    7dd4:	80c0030d 	sth	r3,12(r16)
    7dd8:	dfc00117 	ldw	ra,4(sp)
    7ddc:	dc000017 	ldw	r16,0(sp)
    7de0:	dec00204 	addi	sp,sp,8
    7de4:	f800283a 	ret

00007de8 <__swrite>:
    7de8:	2880030b 	ldhu	r2,12(r5)
    7dec:	defffb04 	addi	sp,sp,-20
    7df0:	dcc00315 	stw	r19,12(sp)
    7df4:	10c0400c 	andi	r3,r2,256
    7df8:	18ffffcc 	andi	r3,r3,65535
    7dfc:	18e0001c 	xori	r3,r3,32768
    7e00:	dc800215 	stw	r18,8(sp)
    7e04:	dc400115 	stw	r17,4(sp)
    7e08:	dc000015 	stw	r16,0(sp)
    7e0c:	dfc00415 	stw	ra,16(sp)
    7e10:	18e00004 	addi	r3,r3,-32768
    7e14:	2821883a 	mov	r16,r5
    7e18:	2027883a 	mov	r19,r4
    7e1c:	3025883a 	mov	r18,r6
    7e20:	3823883a 	mov	r17,r7
    7e24:	18000526 	beq	r3,zero,7e3c <__swrite+0x54>
    7e28:	2940038f 	ldh	r5,14(r5)
    7e2c:	000d883a 	mov	r6,zero
    7e30:	01c00084 	movi	r7,2
    7e34:	00082f00 	call	82f0 <_lseek_r>
    7e38:	8080030b 	ldhu	r2,12(r16)
    7e3c:	8140038f 	ldh	r5,14(r16)
    7e40:	10bbffcc 	andi	r2,r2,61439
    7e44:	9809883a 	mov	r4,r19
    7e48:	900d883a 	mov	r6,r18
    7e4c:	880f883a 	mov	r7,r17
    7e50:	8080030d 	sth	r2,12(r16)
    7e54:	dfc00417 	ldw	ra,16(sp)
    7e58:	dcc00317 	ldw	r19,12(sp)
    7e5c:	dc800217 	ldw	r18,8(sp)
    7e60:	dc400117 	ldw	r17,4(sp)
    7e64:	dc000017 	ldw	r16,0(sp)
    7e68:	dec00504 	addi	sp,sp,20
    7e6c:	00080041 	jmpi	8004 <_write_r>

00007e70 <__sseek>:
    7e70:	defffe04 	addi	sp,sp,-8
    7e74:	dc000015 	stw	r16,0(sp)
    7e78:	2821883a 	mov	r16,r5
    7e7c:	2940038f 	ldh	r5,14(r5)
    7e80:	dfc00115 	stw	ra,4(sp)
    7e84:	00082f00 	call	82f0 <_lseek_r>
    7e88:	00ffffc4 	movi	r3,-1
    7e8c:	10c00826 	beq	r2,r3,7eb0 <__sseek+0x40>
    7e90:	80c0030b 	ldhu	r3,12(r16)
    7e94:	80801415 	stw	r2,80(r16)
    7e98:	18c40014 	ori	r3,r3,4096
    7e9c:	80c0030d 	sth	r3,12(r16)
    7ea0:	dfc00117 	ldw	ra,4(sp)
    7ea4:	dc000017 	ldw	r16,0(sp)
    7ea8:	dec00204 	addi	sp,sp,8
    7eac:	f800283a 	ret
    7eb0:	80c0030b 	ldhu	r3,12(r16)
    7eb4:	18fbffcc 	andi	r3,r3,61439
    7eb8:	80c0030d 	sth	r3,12(r16)
    7ebc:	dfc00117 	ldw	ra,4(sp)
    7ec0:	dc000017 	ldw	r16,0(sp)
    7ec4:	dec00204 	addi	sp,sp,8
    7ec8:	f800283a 	ret

00007ecc <__sclose>:
    7ecc:	2940038f 	ldh	r5,14(r5)
    7ed0:	00080701 	jmpi	8070 <_close_r>

00007ed4 <strcmp>:
    7ed4:	2904b03a 	or	r2,r5,r4
    7ed8:	108000cc 	andi	r2,r2,3
    7edc:	1000171e 	bne	r2,zero,7f3c <strcmp+0x68>
    7ee0:	20800017 	ldw	r2,0(r4)
    7ee4:	28c00017 	ldw	r3,0(r5)
    7ee8:	10c0141e 	bne	r2,r3,7f3c <strcmp+0x68>
    7eec:	027fbff4 	movhi	r9,65279
    7ef0:	4a7fbfc4 	addi	r9,r9,-257
    7ef4:	1247883a 	add	r3,r2,r9
    7ef8:	0084303a 	nor	r2,zero,r2
    7efc:	1884703a 	and	r2,r3,r2
    7f00:	02202074 	movhi	r8,32897
    7f04:	42202004 	addi	r8,r8,-32640
    7f08:	1204703a 	and	r2,r2,r8
    7f0c:	10000226 	beq	r2,zero,7f18 <strcmp+0x44>
    7f10:	00001706 	br	7f70 <strcmp+0x9c>
    7f14:	3000161e 	bne	r6,zero,7f70 <strcmp+0x9c>
    7f18:	21000104 	addi	r4,r4,4
    7f1c:	20800017 	ldw	r2,0(r4)
    7f20:	29400104 	addi	r5,r5,4
    7f24:	28c00017 	ldw	r3,0(r5)
    7f28:	124f883a 	add	r7,r2,r9
    7f2c:	008c303a 	nor	r6,zero,r2
    7f30:	398c703a 	and	r6,r7,r6
    7f34:	320c703a 	and	r6,r6,r8
    7f38:	10fff626 	beq	r2,r3,7f14 <strcmp+0x40>
    7f3c:	20800007 	ldb	r2,0(r4)
    7f40:	1000051e 	bne	r2,zero,7f58 <strcmp+0x84>
    7f44:	00000606 	br	7f60 <strcmp+0x8c>
    7f48:	21000044 	addi	r4,r4,1
    7f4c:	20800007 	ldb	r2,0(r4)
    7f50:	29400044 	addi	r5,r5,1
    7f54:	10000226 	beq	r2,zero,7f60 <strcmp+0x8c>
    7f58:	28c00007 	ldb	r3,0(r5)
    7f5c:	10fffa26 	beq	r2,r3,7f48 <strcmp+0x74>
    7f60:	20c00003 	ldbu	r3,0(r4)
    7f64:	28800003 	ldbu	r2,0(r5)
    7f68:	1885c83a 	sub	r2,r3,r2
    7f6c:	f800283a 	ret
    7f70:	0005883a 	mov	r2,zero
    7f74:	f800283a 	ret

00007f78 <strlen>:
    7f78:	208000cc 	andi	r2,r4,3
    7f7c:	10001f1e 	bne	r2,zero,7ffc <strlen+0x84>
    7f80:	20800017 	ldw	r2,0(r4)
    7f84:	01ffbff4 	movhi	r7,65279
    7f88:	39ffbfc4 	addi	r7,r7,-257
    7f8c:	01a02074 	movhi	r6,32897
    7f90:	31a02004 	addi	r6,r6,-32640
    7f94:	11c7883a 	add	r3,r2,r7
    7f98:	0084303a 	nor	r2,zero,r2
    7f9c:	1886703a 	and	r3,r3,r2
    7fa0:	1986703a 	and	r3,r3,r6
    7fa4:	2005883a 	mov	r2,r4
    7fa8:	1800101e 	bne	r3,zero,7fec <strlen+0x74>
    7fac:	10800104 	addi	r2,r2,4
    7fb0:	10c00017 	ldw	r3,0(r2)
    7fb4:	19cb883a 	add	r5,r3,r7
    7fb8:	00c6303a 	nor	r3,zero,r3
    7fbc:	28c6703a 	and	r3,r5,r3
    7fc0:	1986703a 	and	r3,r3,r6
    7fc4:	1800091e 	bne	r3,zero,7fec <strlen+0x74>
    7fc8:	10800104 	addi	r2,r2,4
    7fcc:	10c00017 	ldw	r3,0(r2)
    7fd0:	19cb883a 	add	r5,r3,r7
    7fd4:	00c6303a 	nor	r3,zero,r3
    7fd8:	28c6703a 	and	r3,r5,r3
    7fdc:	1986703a 	and	r3,r3,r6
    7fe0:	183ff226 	beq	r3,zero,7fac <strlen+0x34>
    7fe4:	00000106 	br	7fec <strlen+0x74>
    7fe8:	10800044 	addi	r2,r2,1
    7fec:	10c00007 	ldb	r3,0(r2)
    7ff0:	183ffd1e 	bne	r3,zero,7fe8 <strlen+0x70>
    7ff4:	1105c83a 	sub	r2,r2,r4
    7ff8:	f800283a 	ret
    7ffc:	2005883a 	mov	r2,r4
    8000:	003ffa06 	br	7fec <strlen+0x74>

00008004 <_write_r>:
    8004:	defffd04 	addi	sp,sp,-12
    8008:	dc400115 	stw	r17,4(sp)
    800c:	dc000015 	stw	r16,0(sp)
    8010:	2023883a 	mov	r17,r4
    8014:	04000074 	movhi	r16,1
    8018:	84027904 	addi	r16,r16,2532
    801c:	2809883a 	mov	r4,r5
    8020:	300b883a 	mov	r5,r6
    8024:	380d883a 	mov	r6,r7
    8028:	dfc00215 	stw	ra,8(sp)
    802c:	80000015 	stw	zero,0(r16)
    8030:	000b1e80 	call	b1e8 <write>
    8034:	00ffffc4 	movi	r3,-1
    8038:	10c00526 	beq	r2,r3,8050 <_write_r+0x4c>
    803c:	dfc00217 	ldw	ra,8(sp)
    8040:	dc400117 	ldw	r17,4(sp)
    8044:	dc000017 	ldw	r16,0(sp)
    8048:	dec00304 	addi	sp,sp,12
    804c:	f800283a 	ret
    8050:	80c00017 	ldw	r3,0(r16)
    8054:	183ff926 	beq	r3,zero,803c <_write_r+0x38>
    8058:	88c00015 	stw	r3,0(r17)
    805c:	dfc00217 	ldw	ra,8(sp)
    8060:	dc400117 	ldw	r17,4(sp)
    8064:	dc000017 	ldw	r16,0(sp)
    8068:	dec00304 	addi	sp,sp,12
    806c:	f800283a 	ret

00008070 <_close_r>:
    8070:	defffd04 	addi	sp,sp,-12
    8074:	dc400115 	stw	r17,4(sp)
    8078:	dc000015 	stw	r16,0(sp)
    807c:	2023883a 	mov	r17,r4
    8080:	04000074 	movhi	r16,1
    8084:	84027904 	addi	r16,r16,2532
    8088:	2809883a 	mov	r4,r5
    808c:	dfc00215 	stw	ra,8(sp)
    8090:	80000015 	stw	zero,0(r16)
    8094:	000a54c0 	call	a54c <close>
    8098:	00ffffc4 	movi	r3,-1
    809c:	10c00526 	beq	r2,r3,80b4 <_close_r+0x44>
    80a0:	dfc00217 	ldw	ra,8(sp)
    80a4:	dc400117 	ldw	r17,4(sp)
    80a8:	dc000017 	ldw	r16,0(sp)
    80ac:	dec00304 	addi	sp,sp,12
    80b0:	f800283a 	ret
    80b4:	80c00017 	ldw	r3,0(r16)
    80b8:	183ff926 	beq	r3,zero,80a0 <_close_r+0x30>
    80bc:	88c00015 	stw	r3,0(r17)
    80c0:	dfc00217 	ldw	ra,8(sp)
    80c4:	dc400117 	ldw	r17,4(sp)
    80c8:	dc000017 	ldw	r16,0(sp)
    80cc:	dec00304 	addi	sp,sp,12
    80d0:	f800283a 	ret

000080d4 <_fclose_r>:
    80d4:	defffc04 	addi	sp,sp,-16
    80d8:	dc400115 	stw	r17,4(sp)
    80dc:	dc000015 	stw	r16,0(sp)
    80e0:	dfc00315 	stw	ra,12(sp)
    80e4:	dc800215 	stw	r18,8(sp)
    80e8:	2821883a 	mov	r16,r5
    80ec:	2023883a 	mov	r17,r4
    80f0:	28003426 	beq	r5,zero,81c4 <_fclose_r+0xf0>
    80f4:	000574c0 	call	574c <__sfp_lock_acquire>
    80f8:	88000226 	beq	r17,zero,8104 <_fclose_r+0x30>
    80fc:	88800e17 	ldw	r2,56(r17)
    8100:	10003826 	beq	r2,zero,81e4 <_fclose_r+0x110>
    8104:	8080030f 	ldh	r2,12(r16)
    8108:	10002526 	beq	r2,zero,81a0 <_fclose_r+0xcc>
    810c:	8809883a 	mov	r4,r17
    8110:	800b883a 	mov	r5,r16
    8114:	00052880 	call	5288 <_fflush_r>
    8118:	1025883a 	mov	r18,r2
    811c:	80800b17 	ldw	r2,44(r16)
    8120:	10000426 	beq	r2,zero,8134 <_fclose_r+0x60>
    8124:	81400717 	ldw	r5,28(r16)
    8128:	8809883a 	mov	r4,r17
    812c:	103ee83a 	callr	r2
    8130:	10003516 	blt	r2,zero,8208 <_fclose_r+0x134>
    8134:	8080030b 	ldhu	r2,12(r16)
    8138:	1080200c 	andi	r2,r2,128
    813c:	10bfffcc 	andi	r2,r2,65535
    8140:	10a0001c 	xori	r2,r2,32768
    8144:	10a00004 	addi	r2,r2,-32768
    8148:	10002b1e 	bne	r2,zero,81f8 <_fclose_r+0x124>
    814c:	81400c17 	ldw	r5,48(r16)
    8150:	28000526 	beq	r5,zero,8168 <_fclose_r+0x94>
    8154:	80801004 	addi	r2,r16,64
    8158:	28800226 	beq	r5,r2,8164 <_fclose_r+0x90>
    815c:	8809883a 	mov	r4,r17
    8160:	00058c80 	call	58c8 <_free_r>
    8164:	80000c15 	stw	zero,48(r16)
    8168:	81401117 	ldw	r5,68(r16)
    816c:	28000326 	beq	r5,zero,817c <_fclose_r+0xa8>
    8170:	8809883a 	mov	r4,r17
    8174:	00058c80 	call	58c8 <_free_r>
    8178:	80001115 	stw	zero,68(r16)
    817c:	8000030d 	sth	zero,12(r16)
    8180:	00057500 	call	5750 <__sfp_lock_release>
    8184:	9005883a 	mov	r2,r18
    8188:	dfc00317 	ldw	ra,12(sp)
    818c:	dc800217 	ldw	r18,8(sp)
    8190:	dc400117 	ldw	r17,4(sp)
    8194:	dc000017 	ldw	r16,0(sp)
    8198:	dec00404 	addi	sp,sp,16
    819c:	f800283a 	ret
    81a0:	00057500 	call	5750 <__sfp_lock_release>
    81a4:	0025883a 	mov	r18,zero
    81a8:	9005883a 	mov	r2,r18
    81ac:	dfc00317 	ldw	ra,12(sp)
    81b0:	dc800217 	ldw	r18,8(sp)
    81b4:	dc400117 	ldw	r17,4(sp)
    81b8:	dc000017 	ldw	r16,0(sp)
    81bc:	dec00404 	addi	sp,sp,16
    81c0:	f800283a 	ret
    81c4:	0025883a 	mov	r18,zero
    81c8:	9005883a 	mov	r2,r18
    81cc:	dfc00317 	ldw	ra,12(sp)
    81d0:	dc800217 	ldw	r18,8(sp)
    81d4:	dc400117 	ldw	r17,4(sp)
    81d8:	dc000017 	ldw	r16,0(sp)
    81dc:	dec00404 	addi	sp,sp,16
    81e0:	f800283a 	ret
    81e4:	8809883a 	mov	r4,r17
    81e8:	00055440 	call	5544 <__sinit>
    81ec:	8080030f 	ldh	r2,12(r16)
    81f0:	103fc61e 	bne	r2,zero,810c <_fclose_r+0x38>
    81f4:	003fea06 	br	81a0 <_fclose_r+0xcc>
    81f8:	81400417 	ldw	r5,16(r16)
    81fc:	8809883a 	mov	r4,r17
    8200:	00058c80 	call	58c8 <_free_r>
    8204:	003fd106 	br	814c <_fclose_r+0x78>
    8208:	04bfffc4 	movi	r18,-1
    820c:	003fc906 	br	8134 <_fclose_r+0x60>

00008210 <fclose>:
    8210:	00800074 	movhi	r2,1
    8214:	10bbd004 	addi	r2,r2,-4288
    8218:	200b883a 	mov	r5,r4
    821c:	11000017 	ldw	r4,0(r2)
    8220:	00080d41 	jmpi	80d4 <_fclose_r>

00008224 <_fstat_r>:
    8224:	defffd04 	addi	sp,sp,-12
    8228:	dc400115 	stw	r17,4(sp)
    822c:	dc000015 	stw	r16,0(sp)
    8230:	2023883a 	mov	r17,r4
    8234:	04000074 	movhi	r16,1
    8238:	84027904 	addi	r16,r16,2532
    823c:	2809883a 	mov	r4,r5
    8240:	300b883a 	mov	r5,r6
    8244:	dfc00215 	stw	ra,8(sp)
    8248:	80000015 	stw	zero,0(r16)
    824c:	000a6940 	call	a694 <fstat>
    8250:	00ffffc4 	movi	r3,-1
    8254:	10c00526 	beq	r2,r3,826c <_fstat_r+0x48>
    8258:	dfc00217 	ldw	ra,8(sp)
    825c:	dc400117 	ldw	r17,4(sp)
    8260:	dc000017 	ldw	r16,0(sp)
    8264:	dec00304 	addi	sp,sp,12
    8268:	f800283a 	ret
    826c:	80c00017 	ldw	r3,0(r16)
    8270:	183ff926 	beq	r3,zero,8258 <_fstat_r+0x34>
    8274:	88c00015 	stw	r3,0(r17)
    8278:	dfc00217 	ldw	ra,8(sp)
    827c:	dc400117 	ldw	r17,4(sp)
    8280:	dc000017 	ldw	r16,0(sp)
    8284:	dec00304 	addi	sp,sp,12
    8288:	f800283a 	ret

0000828c <_isatty_r>:
    828c:	defffd04 	addi	sp,sp,-12
    8290:	dc400115 	stw	r17,4(sp)
    8294:	dc000015 	stw	r16,0(sp)
    8298:	2023883a 	mov	r17,r4
    829c:	04000074 	movhi	r16,1
    82a0:	84027904 	addi	r16,r16,2532
    82a4:	2809883a 	mov	r4,r5
    82a8:	dfc00215 	stw	ra,8(sp)
    82ac:	80000015 	stw	zero,0(r16)
    82b0:	000a7940 	call	a794 <isatty>
    82b4:	00ffffc4 	movi	r3,-1
    82b8:	10c00526 	beq	r2,r3,82d0 <_isatty_r+0x44>
    82bc:	dfc00217 	ldw	ra,8(sp)
    82c0:	dc400117 	ldw	r17,4(sp)
    82c4:	dc000017 	ldw	r16,0(sp)
    82c8:	dec00304 	addi	sp,sp,12
    82cc:	f800283a 	ret
    82d0:	80c00017 	ldw	r3,0(r16)
    82d4:	183ff926 	beq	r3,zero,82bc <_isatty_r+0x30>
    82d8:	88c00015 	stw	r3,0(r17)
    82dc:	dfc00217 	ldw	ra,8(sp)
    82e0:	dc400117 	ldw	r17,4(sp)
    82e4:	dc000017 	ldw	r16,0(sp)
    82e8:	dec00304 	addi	sp,sp,12
    82ec:	f800283a 	ret

000082f0 <_lseek_r>:
    82f0:	defffd04 	addi	sp,sp,-12
    82f4:	dc400115 	stw	r17,4(sp)
    82f8:	dc000015 	stw	r16,0(sp)
    82fc:	2023883a 	mov	r17,r4
    8300:	04000074 	movhi	r16,1
    8304:	84027904 	addi	r16,r16,2532
    8308:	2809883a 	mov	r4,r5
    830c:	300b883a 	mov	r5,r6
    8310:	380d883a 	mov	r6,r7
    8314:	dfc00215 	stw	ra,8(sp)
    8318:	80000015 	stw	zero,0(r16)
    831c:	000a9740 	call	a974 <lseek>
    8320:	00ffffc4 	movi	r3,-1
    8324:	10c00526 	beq	r2,r3,833c <_lseek_r+0x4c>
    8328:	dfc00217 	ldw	ra,8(sp)
    832c:	dc400117 	ldw	r17,4(sp)
    8330:	dc000017 	ldw	r16,0(sp)
    8334:	dec00304 	addi	sp,sp,12
    8338:	f800283a 	ret
    833c:	80c00017 	ldw	r3,0(r16)
    8340:	183ff926 	beq	r3,zero,8328 <_lseek_r+0x38>
    8344:	88c00015 	stw	r3,0(r17)
    8348:	dfc00217 	ldw	ra,8(sp)
    834c:	dc400117 	ldw	r17,4(sp)
    8350:	dc000017 	ldw	r16,0(sp)
    8354:	dec00304 	addi	sp,sp,12
    8358:	f800283a 	ret

0000835c <_read_r>:
    835c:	defffd04 	addi	sp,sp,-12
    8360:	dc400115 	stw	r17,4(sp)
    8364:	dc000015 	stw	r16,0(sp)
    8368:	2023883a 	mov	r17,r4
    836c:	04000074 	movhi	r16,1
    8370:	84027904 	addi	r16,r16,2532
    8374:	2809883a 	mov	r4,r5
    8378:	300b883a 	mov	r5,r6
    837c:	380d883a 	mov	r6,r7
    8380:	dfc00215 	stw	ra,8(sp)
    8384:	80000015 	stw	zero,0(r16)
    8388:	000add80 	call	add8 <read>
    838c:	00ffffc4 	movi	r3,-1
    8390:	10c00526 	beq	r2,r3,83a8 <_read_r+0x4c>
    8394:	dfc00217 	ldw	ra,8(sp)
    8398:	dc400117 	ldw	r17,4(sp)
    839c:	dc000017 	ldw	r16,0(sp)
    83a0:	dec00304 	addi	sp,sp,12
    83a4:	f800283a 	ret
    83a8:	80c00017 	ldw	r3,0(r16)
    83ac:	183ff926 	beq	r3,zero,8394 <_read_r+0x38>
    83b0:	88c00015 	stw	r3,0(r17)
    83b4:	dfc00217 	ldw	ra,8(sp)
    83b8:	dc400117 	ldw	r17,4(sp)
    83bc:	dc000017 	ldw	r16,0(sp)
    83c0:	dec00304 	addi	sp,sp,12
    83c4:	f800283a 	ret

000083c8 <__udivdi3>:
    83c8:	defff504 	addi	sp,sp,-44
    83cc:	dd000515 	stw	r20,20(sp)
    83d0:	dcc00415 	stw	r19,16(sp)
    83d4:	dc800315 	stw	r18,12(sp)
    83d8:	dc400215 	stw	r17,8(sp)
    83dc:	dc000115 	stw	r16,4(sp)
    83e0:	dfc00a15 	stw	ra,40(sp)
    83e4:	df000915 	stw	fp,36(sp)
    83e8:	ddc00815 	stw	r23,32(sp)
    83ec:	dd800715 	stw	r22,28(sp)
    83f0:	dd400615 	stw	r21,24(sp)
    83f4:	2025883a 	mov	r18,r4
    83f8:	2823883a 	mov	r17,r5
    83fc:	3021883a 	mov	r16,r6
    8400:	2027883a 	mov	r19,r4
    8404:	2829883a 	mov	r20,r5
    8408:	3800451e 	bne	r7,zero,8520 <__udivdi3+0x158>
    840c:	2980652e 	bgeu	r5,r6,85a4 <__udivdi3+0x1dc>
    8410:	00bfffd4 	movui	r2,65535
    8414:	1180b436 	bltu	r2,r6,86e8 <__udivdi3+0x320>
    8418:	00803fc4 	movi	r2,255
    841c:	11816636 	bltu	r2,r6,89b8 <__udivdi3+0x5f0>
    8420:	0005883a 	mov	r2,zero
    8424:	0007883a 	mov	r3,zero
    8428:	3084d83a 	srl	r2,r6,r2
    842c:	01000074 	movhi	r4,1
    8430:	2134fd04 	addi	r4,r4,-11276
    8434:	2085883a 	add	r2,r4,r2
    8438:	10800003 	ldbu	r2,0(r2)
    843c:	10c7883a 	add	r3,r2,r3
    8440:	00800804 	movi	r2,32
    8444:	10c5c83a 	sub	r2,r2,r3
    8448:	10000526 	beq	r2,zero,8460 <__udivdi3+0x98>
    844c:	88a2983a 	sll	r17,r17,r2
    8450:	90c6d83a 	srl	r3,r18,r3
    8454:	30a0983a 	sll	r16,r6,r2
    8458:	90a6983a 	sll	r19,r18,r2
    845c:	88e8b03a 	or	r20,r17,r3
    8460:	8022d43a 	srli	r17,r16,16
    8464:	a009883a 	mov	r4,r20
    8468:	857fffcc 	andi	r21,r16,65535
    846c:	880b883a 	mov	r5,r17
    8470:	0000e3c0 	call	e3c <__umodsi3>
    8474:	a009883a 	mov	r4,r20
    8478:	880b883a 	mov	r5,r17
    847c:	102d883a 	mov	r22,r2
    8480:	0000e340 	call	e34 <__udivsi3>
    8484:	1009883a 	mov	r4,r2
    8488:	a80b883a 	mov	r5,r21
    848c:	1025883a 	mov	r18,r2
    8490:	0000e440 	call	e44 <__mulsi3>
    8494:	1009883a 	mov	r4,r2
    8498:	b006943a 	slli	r3,r22,16
    849c:	9804d43a 	srli	r2,r19,16
    84a0:	1886b03a 	or	r3,r3,r2
    84a4:	1900052e 	bgeu	r3,r4,84bc <__udivdi3+0xf4>
    84a8:	1c07883a 	add	r3,r3,r16
    84ac:	90bfffc4 	addi	r2,r18,-1
    84b0:	1c000136 	bltu	r3,r16,84b8 <__udivdi3+0xf0>
    84b4:	19015536 	bltu	r3,r4,8a0c <__udivdi3+0x644>
    84b8:	1025883a 	mov	r18,r2
    84bc:	1929c83a 	sub	r20,r3,r4
    84c0:	880b883a 	mov	r5,r17
    84c4:	a009883a 	mov	r4,r20
    84c8:	0000e3c0 	call	e3c <__umodsi3>
    84cc:	102d883a 	mov	r22,r2
    84d0:	880b883a 	mov	r5,r17
    84d4:	a009883a 	mov	r4,r20
    84d8:	b02c943a 	slli	r22,r22,16
    84dc:	0000e340 	call	e34 <__udivsi3>
    84e0:	1009883a 	mov	r4,r2
    84e4:	a80b883a 	mov	r5,r21
    84e8:	9cffffcc 	andi	r19,r19,65535
    84ec:	1023883a 	mov	r17,r2
    84f0:	b4e6b03a 	or	r19,r22,r19
    84f4:	0000e440 	call	e44 <__mulsi3>
    84f8:	9880052e 	bgeu	r19,r2,8510 <__udivdi3+0x148>
    84fc:	9c27883a 	add	r19,r19,r16
    8500:	88ffffc4 	addi	r3,r17,-1
    8504:	9c011436 	bltu	r19,r16,8958 <__udivdi3+0x590>
    8508:	9881132e 	bgeu	r19,r2,8958 <__udivdi3+0x590>
    850c:	8c7fff84 	addi	r17,r17,-2
    8510:	9004943a 	slli	r2,r18,16
    8514:	0007883a 	mov	r3,zero
    8518:	8884b03a 	or	r2,r17,r2
    851c:	00001506 	br	8574 <__udivdi3+0x1ac>
    8520:	29c06a36 	bltu	r5,r7,86cc <__udivdi3+0x304>
    8524:	00bfffd4 	movui	r2,65535
    8528:	11c06a2e 	bgeu	r2,r7,86d4 <__udivdi3+0x30c>
    852c:	00804034 	movhi	r2,256
    8530:	10bfffc4 	addi	r2,r2,-1
    8534:	11c11436 	bltu	r2,r7,8988 <__udivdi3+0x5c0>
    8538:	00c00404 	movi	r3,16
    853c:	180b883a 	mov	r5,r3
    8540:	38c6d83a 	srl	r3,r7,r3
    8544:	01000074 	movhi	r4,1
    8548:	2134fd04 	addi	r4,r4,-11276
    854c:	04000804 	movi	r16,32
    8550:	20c7883a 	add	r3,r4,r3
    8554:	18800003 	ldbu	r2,0(r3)
    8558:	1145883a 	add	r2,r2,r5
    855c:	80a1c83a 	sub	r16,r16,r2
    8560:	80006e1e 	bne	r16,zero,871c <__udivdi3+0x354>
    8564:	0007883a 	mov	r3,zero
    8568:	3c406a36 	bltu	r7,r17,8714 <__udivdi3+0x34c>
    856c:	9180692e 	bgeu	r18,r6,8714 <__udivdi3+0x34c>
    8570:	0005883a 	mov	r2,zero
    8574:	dfc00a17 	ldw	ra,40(sp)
    8578:	df000917 	ldw	fp,36(sp)
    857c:	ddc00817 	ldw	r23,32(sp)
    8580:	dd800717 	ldw	r22,28(sp)
    8584:	dd400617 	ldw	r21,24(sp)
    8588:	dd000517 	ldw	r20,20(sp)
    858c:	dcc00417 	ldw	r19,16(sp)
    8590:	dc800317 	ldw	r18,12(sp)
    8594:	dc400217 	ldw	r17,8(sp)
    8598:	dc000117 	ldw	r16,4(sp)
    859c:	dec00b04 	addi	sp,sp,44
    85a0:	f800283a 	ret
    85a4:	3000041e 	bne	r6,zero,85b8 <__udivdi3+0x1f0>
    85a8:	01000044 	movi	r4,1
    85ac:	000b883a 	mov	r5,zero
    85b0:	0000e340 	call	e34 <__udivsi3>
    85b4:	1021883a 	mov	r16,r2
    85b8:	00bfffd4 	movui	r2,65535
    85bc:	1400502e 	bgeu	r2,r16,8700 <__udivdi3+0x338>
    85c0:	00804034 	movhi	r2,256
    85c4:	10bfffc4 	addi	r2,r2,-1
    85c8:	1400f536 	bltu	r2,r16,89a0 <__udivdi3+0x5d8>
    85cc:	00800404 	movi	r2,16
    85d0:	1007883a 	mov	r3,r2
    85d4:	8084d83a 	srl	r2,r16,r2
    85d8:	01000074 	movhi	r4,1
    85dc:	2134fd04 	addi	r4,r4,-11276
    85e0:	2085883a 	add	r2,r4,r2
    85e4:	10800003 	ldbu	r2,0(r2)
    85e8:	10c7883a 	add	r3,r2,r3
    85ec:	00800804 	movi	r2,32
    85f0:	10c5c83a 	sub	r2,r2,r3
    85f4:	1000a01e 	bne	r2,zero,8878 <__udivdi3+0x4b0>
    85f8:	8028d43a 	srli	r20,r16,16
    85fc:	8c23c83a 	sub	r17,r17,r16
    8600:	857fffcc 	andi	r21,r16,65535
    8604:	00c00044 	movi	r3,1
    8608:	8809883a 	mov	r4,r17
    860c:	a00b883a 	mov	r5,r20
    8610:	d8c00015 	stw	r3,0(sp)
    8614:	0000e3c0 	call	e3c <__umodsi3>
    8618:	8809883a 	mov	r4,r17
    861c:	a00b883a 	mov	r5,r20
    8620:	102d883a 	mov	r22,r2
    8624:	0000e340 	call	e34 <__udivsi3>
    8628:	1009883a 	mov	r4,r2
    862c:	a80b883a 	mov	r5,r21
    8630:	1025883a 	mov	r18,r2
    8634:	0000e440 	call	e44 <__mulsi3>
    8638:	1009883a 	mov	r4,r2
    863c:	b00c943a 	slli	r6,r22,16
    8640:	9804d43a 	srli	r2,r19,16
    8644:	d8c00017 	ldw	r3,0(sp)
    8648:	308cb03a 	or	r6,r6,r2
    864c:	3100052e 	bgeu	r6,r4,8664 <__udivdi3+0x29c>
    8650:	340d883a 	add	r6,r6,r16
    8654:	90bfffc4 	addi	r2,r18,-1
    8658:	34000136 	bltu	r6,r16,8660 <__udivdi3+0x298>
    865c:	3100e836 	bltu	r6,r4,8a00 <__udivdi3+0x638>
    8660:	1025883a 	mov	r18,r2
    8664:	3123c83a 	sub	r17,r6,r4
    8668:	8809883a 	mov	r4,r17
    866c:	a00b883a 	mov	r5,r20
    8670:	d8c00015 	stw	r3,0(sp)
    8674:	0000e3c0 	call	e3c <__umodsi3>
    8678:	102d883a 	mov	r22,r2
    867c:	8809883a 	mov	r4,r17
    8680:	a00b883a 	mov	r5,r20
    8684:	b02c943a 	slli	r22,r22,16
    8688:	0000e340 	call	e34 <__udivsi3>
    868c:	1009883a 	mov	r4,r2
    8690:	a80b883a 	mov	r5,r21
    8694:	9cffffcc 	andi	r19,r19,65535
    8698:	1023883a 	mov	r17,r2
    869c:	b4e6b03a 	or	r19,r22,r19
    86a0:	0000e440 	call	e44 <__mulsi3>
    86a4:	d8c00017 	ldw	r3,0(sp)
    86a8:	9880052e 	bgeu	r19,r2,86c0 <__udivdi3+0x2f8>
    86ac:	9c27883a 	add	r19,r19,r16
    86b0:	893fffc4 	addi	r4,r17,-1
    86b4:	9c00aa36 	bltu	r19,r16,8960 <__udivdi3+0x598>
    86b8:	9880a92e 	bgeu	r19,r2,8960 <__udivdi3+0x598>
    86bc:	8c7fff84 	addi	r17,r17,-2
    86c0:	9004943a 	slli	r2,r18,16
    86c4:	8884b03a 	or	r2,r17,r2
    86c8:	003faa06 	br	8574 <__udivdi3+0x1ac>
    86cc:	0007883a 	mov	r3,zero
    86d0:	003fa706 	br	8570 <__udivdi3+0x1a8>
    86d4:	00803fc4 	movi	r2,255
    86d8:	11c0ae36 	bltu	r2,r7,8994 <__udivdi3+0x5cc>
    86dc:	0007883a 	mov	r3,zero
    86e0:	000b883a 	mov	r5,zero
    86e4:	003f9606 	br	8540 <__udivdi3+0x178>
    86e8:	00804034 	movhi	r2,256
    86ec:	10bfffc4 	addi	r2,r2,-1
    86f0:	1180ae36 	bltu	r2,r6,89ac <__udivdi3+0x5e4>
    86f4:	00800404 	movi	r2,16
    86f8:	1007883a 	mov	r3,r2
    86fc:	003f4a06 	br	8428 <__udivdi3+0x60>
    8700:	00803fc4 	movi	r2,255
    8704:	1400af36 	bltu	r2,r16,89c4 <__udivdi3+0x5fc>
    8708:	0005883a 	mov	r2,zero
    870c:	0007883a 	mov	r3,zero
    8710:	003fb006 	br	85d4 <__udivdi3+0x20c>
    8714:	00800044 	movi	r2,1
    8718:	003f9606 	br	8574 <__udivdi3+0x1ac>
    871c:	3c0e983a 	sll	r7,r7,r16
    8720:	3086d83a 	srl	r3,r6,r2
    8724:	88aed83a 	srl	r23,r17,r2
    8728:	9084d83a 	srl	r2,r18,r2
    872c:	38e6b03a 	or	r19,r7,r3
    8730:	9828d43a 	srli	r20,r19,16
    8734:	8c22983a 	sll	r17,r17,r16
    8738:	b809883a 	mov	r4,r23
    873c:	a00b883a 	mov	r5,r20
    8740:	342a983a 	sll	r21,r6,r16
    8744:	88a2b03a 	or	r17,r17,r2
    8748:	0000e3c0 	call	e3c <__umodsi3>
    874c:	b809883a 	mov	r4,r23
    8750:	a00b883a 	mov	r5,r20
    8754:	1039883a 	mov	fp,r2
    8758:	9dbfffcc 	andi	r22,r19,65535
    875c:	0000e340 	call	e34 <__udivsi3>
    8760:	1009883a 	mov	r4,r2
    8764:	b00b883a 	mov	r5,r22
    8768:	102f883a 	mov	r23,r2
    876c:	0000e440 	call	e44 <__mulsi3>
    8770:	1009883a 	mov	r4,r2
    8774:	e00e943a 	slli	r7,fp,16
    8778:	8804d43a 	srli	r2,r17,16
    877c:	388eb03a 	or	r7,r7,r2
    8780:	3900042e 	bgeu	r7,r4,8794 <__udivdi3+0x3cc>
    8784:	3ccf883a 	add	r7,r7,r19
    8788:	b8bfffc4 	addi	r2,r23,-1
    878c:	3cc0942e 	bgeu	r7,r19,89e0 <__udivdi3+0x618>
    8790:	102f883a 	mov	r23,r2
    8794:	3939c83a 	sub	fp,r7,r4
    8798:	a00b883a 	mov	r5,r20
    879c:	e009883a 	mov	r4,fp
    87a0:	0000e3c0 	call	e3c <__umodsi3>
    87a4:	a00b883a 	mov	r5,r20
    87a8:	e009883a 	mov	r4,fp
    87ac:	d8800015 	stw	r2,0(sp)
    87b0:	0000e340 	call	e34 <__udivsi3>
    87b4:	1009883a 	mov	r4,r2
    87b8:	b00b883a 	mov	r5,r22
    87bc:	1029883a 	mov	r20,r2
    87c0:	0000e440 	call	e44 <__mulsi3>
    87c4:	d8c00017 	ldw	r3,0(sp)
    87c8:	8c7fffcc 	andi	r17,r17,65535
    87cc:	1806943a 	slli	r3,r3,16
    87d0:	1c46b03a 	or	r3,r3,r17
    87d4:	1880042e 	bgeu	r3,r2,87e8 <__udivdi3+0x420>
    87d8:	1cc7883a 	add	r3,r3,r19
    87dc:	a13fffc4 	addi	r4,r20,-1
    87e0:	1cc07b2e 	bgeu	r3,r19,89d0 <__udivdi3+0x608>
    87e4:	2029883a 	mov	r20,r4
    87e8:	b82e943a 	slli	r23,r23,16
    87ec:	a822d43a 	srli	r17,r21,16
    87f0:	ad7fffcc 	andi	r21,r21,65535
    87f4:	a5e8b03a 	or	r20,r20,r23
    87f8:	a5bfffcc 	andi	r22,r20,65535
    87fc:	b009883a 	mov	r4,r22
    8800:	a80b883a 	mov	r5,r21
    8804:	18afc83a 	sub	r23,r3,r2
    8808:	a026d43a 	srli	r19,r20,16
    880c:	0000e440 	call	e44 <__mulsi3>
    8810:	b009883a 	mov	r4,r22
    8814:	880b883a 	mov	r5,r17
    8818:	1039883a 	mov	fp,r2
    881c:	0000e440 	call	e44 <__mulsi3>
    8820:	a80b883a 	mov	r5,r21
    8824:	9809883a 	mov	r4,r19
    8828:	102d883a 	mov	r22,r2
    882c:	0000e440 	call	e44 <__mulsi3>
    8830:	9809883a 	mov	r4,r19
    8834:	880b883a 	mov	r5,r17
    8838:	102b883a 	mov	r21,r2
    883c:	0000e440 	call	e44 <__mulsi3>
    8840:	100b883a 	mov	r5,r2
    8844:	e004d43a 	srli	r2,fp,16
    8848:	ad89883a 	add	r4,r21,r22
    884c:	2089883a 	add	r4,r4,r2
    8850:	2540022e 	bgeu	r4,r21,885c <__udivdi3+0x494>
    8854:	00800074 	movhi	r2,1
    8858:	288b883a 	add	r5,r5,r2
    885c:	2004d43a 	srli	r2,r4,16
    8860:	288b883a 	add	r5,r5,r2
    8864:	b9404536 	bltu	r23,r5,897c <__udivdi3+0x5b4>
    8868:	b9403f26 	beq	r23,r5,8968 <__udivdi3+0x5a0>
    886c:	a005883a 	mov	r2,r20
    8870:	0007883a 	mov	r3,zero
    8874:	003f3f06 	br	8574 <__udivdi3+0x1ac>
    8878:	80a0983a 	sll	r16,r16,r2
    887c:	88eed83a 	srl	r23,r17,r3
    8880:	90c6d83a 	srl	r3,r18,r3
    8884:	8028d43a 	srli	r20,r16,16
    8888:	88a2983a 	sll	r17,r17,r2
    888c:	b809883a 	mov	r4,r23
    8890:	a00b883a 	mov	r5,r20
    8894:	88ecb03a 	or	r22,r17,r3
    8898:	90a6983a 	sll	r19,r18,r2
    889c:	0000e3c0 	call	e3c <__umodsi3>
    88a0:	b809883a 	mov	r4,r23
    88a4:	a00b883a 	mov	r5,r20
    88a8:	1023883a 	mov	r17,r2
    88ac:	857fffcc 	andi	r21,r16,65535
    88b0:	0000e340 	call	e34 <__udivsi3>
    88b4:	1009883a 	mov	r4,r2
    88b8:	a80b883a 	mov	r5,r21
    88bc:	102f883a 	mov	r23,r2
    88c0:	0000e440 	call	e44 <__mulsi3>
    88c4:	1009883a 	mov	r4,r2
    88c8:	880a943a 	slli	r5,r17,16
    88cc:	b004d43a 	srli	r2,r22,16
    88d0:	288ab03a 	or	r5,r5,r2
    88d4:	2900062e 	bgeu	r5,r4,88f0 <__udivdi3+0x528>
    88d8:	2c0b883a 	add	r5,r5,r16
    88dc:	b8bfffc4 	addi	r2,r23,-1
    88e0:	2c004536 	bltu	r5,r16,89f8 <__udivdi3+0x630>
    88e4:	2900442e 	bgeu	r5,r4,89f8 <__udivdi3+0x630>
    88e8:	bdffff84 	addi	r23,r23,-2
    88ec:	2c0b883a 	add	r5,r5,r16
    88f0:	2925c83a 	sub	r18,r5,r4
    88f4:	9009883a 	mov	r4,r18
    88f8:	a00b883a 	mov	r5,r20
    88fc:	0000e3c0 	call	e3c <__umodsi3>
    8900:	1023883a 	mov	r17,r2
    8904:	9009883a 	mov	r4,r18
    8908:	a00b883a 	mov	r5,r20
    890c:	8822943a 	slli	r17,r17,16
    8910:	0000e340 	call	e34 <__udivsi3>
    8914:	1009883a 	mov	r4,r2
    8918:	a80b883a 	mov	r5,r21
    891c:	b5bfffcc 	andi	r22,r22,65535
    8920:	1025883a 	mov	r18,r2
    8924:	8da2b03a 	or	r17,r17,r22
    8928:	0000e440 	call	e44 <__mulsi3>
    892c:	8880062e 	bgeu	r17,r2,8948 <__udivdi3+0x580>
    8930:	8c23883a 	add	r17,r17,r16
    8934:	90ffffc4 	addi	r3,r18,-1
    8938:	8c002d36 	bltu	r17,r16,89f0 <__udivdi3+0x628>
    893c:	88802c2e 	bgeu	r17,r2,89f0 <__udivdi3+0x628>
    8940:	94bfff84 	addi	r18,r18,-2
    8944:	8c23883a 	add	r17,r17,r16
    8948:	b806943a 	slli	r3,r23,16
    894c:	88a3c83a 	sub	r17,r17,r2
    8950:	90c6b03a 	or	r3,r18,r3
    8954:	003f2c06 	br	8608 <__udivdi3+0x240>
    8958:	1823883a 	mov	r17,r3
    895c:	003eec06 	br	8510 <__udivdi3+0x148>
    8960:	2023883a 	mov	r17,r4
    8964:	003f5606 	br	86c0 <__udivdi3+0x2f8>
    8968:	2008943a 	slli	r4,r4,16
    896c:	9420983a 	sll	r16,r18,r16
    8970:	e73fffcc 	andi	fp,fp,65535
    8974:	2709883a 	add	r4,r4,fp
    8978:	813fbc2e 	bgeu	r16,r4,886c <__udivdi3+0x4a4>
    897c:	a0bfffc4 	addi	r2,r20,-1
    8980:	0007883a 	mov	r3,zero
    8984:	003efb06 	br	8574 <__udivdi3+0x1ac>
    8988:	00c00604 	movi	r3,24
    898c:	180b883a 	mov	r5,r3
    8990:	003eeb06 	br	8540 <__udivdi3+0x178>
    8994:	00c00204 	movi	r3,8
    8998:	180b883a 	mov	r5,r3
    899c:	003ee806 	br	8540 <__udivdi3+0x178>
    89a0:	00800604 	movi	r2,24
    89a4:	1007883a 	mov	r3,r2
    89a8:	003f0a06 	br	85d4 <__udivdi3+0x20c>
    89ac:	00800604 	movi	r2,24
    89b0:	1007883a 	mov	r3,r2
    89b4:	003e9c06 	br	8428 <__udivdi3+0x60>
    89b8:	00800204 	movi	r2,8
    89bc:	1007883a 	mov	r3,r2
    89c0:	003e9906 	br	8428 <__udivdi3+0x60>
    89c4:	00800204 	movi	r2,8
    89c8:	1007883a 	mov	r3,r2
    89cc:	003f0106 	br	85d4 <__udivdi3+0x20c>
    89d0:	18bf842e 	bgeu	r3,r2,87e4 <__udivdi3+0x41c>
    89d4:	a53fff84 	addi	r20,r20,-2
    89d8:	1cc7883a 	add	r3,r3,r19
    89dc:	003f8206 	br	87e8 <__udivdi3+0x420>
    89e0:	393f6b2e 	bgeu	r7,r4,8790 <__udivdi3+0x3c8>
    89e4:	bdffff84 	addi	r23,r23,-2
    89e8:	3ccf883a 	add	r7,r7,r19
    89ec:	003f6906 	br	8794 <__udivdi3+0x3cc>
    89f0:	1825883a 	mov	r18,r3
    89f4:	003fd406 	br	8948 <__udivdi3+0x580>
    89f8:	102f883a 	mov	r23,r2
    89fc:	003fbc06 	br	88f0 <__udivdi3+0x528>
    8a00:	94bfff84 	addi	r18,r18,-2
    8a04:	340d883a 	add	r6,r6,r16
    8a08:	003f1606 	br	8664 <__udivdi3+0x29c>
    8a0c:	94bfff84 	addi	r18,r18,-2
    8a10:	1c07883a 	add	r3,r3,r16
    8a14:	003ea906 	br	84bc <__udivdi3+0xf4>

00008a18 <__umoddi3>:
    8a18:	defff304 	addi	sp,sp,-52
    8a1c:	dd000715 	stw	r20,28(sp)
    8a20:	dcc00615 	stw	r19,24(sp)
    8a24:	dc800515 	stw	r18,20(sp)
    8a28:	dc400415 	stw	r17,16(sp)
    8a2c:	dc000315 	stw	r16,12(sp)
    8a30:	dfc00c15 	stw	ra,48(sp)
    8a34:	df000b15 	stw	fp,44(sp)
    8a38:	ddc00a15 	stw	r23,40(sp)
    8a3c:	dd800915 	stw	r22,36(sp)
    8a40:	dd400815 	stw	r21,32(sp)
    8a44:	2025883a 	mov	r18,r4
    8a48:	2823883a 	mov	r17,r5
    8a4c:	3021883a 	mov	r16,r6
    8a50:	2027883a 	mov	r19,r4
    8a54:	2829883a 	mov	r20,r5
    8a58:	38003a1e 	bne	r7,zero,8b44 <__umoddi3+0x12c>
    8a5c:	2980522e 	bgeu	r5,r6,8ba8 <__umoddi3+0x190>
    8a60:	00bfffd4 	movui	r2,65535
    8a64:	1180a436 	bltu	r2,r6,8cf8 <__umoddi3+0x2e0>
    8a68:	00803fc4 	movi	r2,255
    8a6c:	11816036 	bltu	r2,r6,8ff0 <__umoddi3+0x5d8>
    8a70:	0005883a 	mov	r2,zero
    8a74:	0009883a 	mov	r4,zero
    8a78:	3084d83a 	srl	r2,r6,r2
    8a7c:	00c00074 	movhi	r3,1
    8a80:	18f4fd04 	addi	r3,r3,-11276
    8a84:	05400804 	movi	r21,32
    8a88:	1885883a 	add	r2,r3,r2
    8a8c:	10800003 	ldbu	r2,0(r2)
    8a90:	1109883a 	add	r4,r2,r4
    8a94:	a92bc83a 	sub	r21,r21,r4
    8a98:	a8010e26 	beq	r21,zero,8ed4 <__umoddi3+0x4bc>
    8a9c:	8d62983a 	sll	r17,r17,r21
    8aa0:	9108d83a 	srl	r4,r18,r4
    8aa4:	3560983a 	sll	r16,r6,r21
    8aa8:	9566983a 	sll	r19,r18,r21
    8aac:	8928b03a 	or	r20,r17,r4
    8ab0:	8022d43a 	srli	r17,r16,16
    8ab4:	a009883a 	mov	r4,r20
    8ab8:	84bfffcc 	andi	r18,r16,65535
    8abc:	880b883a 	mov	r5,r17
    8ac0:	0000e3c0 	call	e3c <__umodsi3>
    8ac4:	a009883a 	mov	r4,r20
    8ac8:	880b883a 	mov	r5,r17
    8acc:	102d883a 	mov	r22,r2
    8ad0:	0000e340 	call	e34 <__udivsi3>
    8ad4:	1009883a 	mov	r4,r2
    8ad8:	900b883a 	mov	r5,r18
    8adc:	0000e440 	call	e44 <__mulsi3>
    8ae0:	1009883a 	mov	r4,r2
    8ae4:	b006943a 	slli	r3,r22,16
    8ae8:	9804d43a 	srli	r2,r19,16
    8aec:	1886b03a 	or	r3,r3,r2
    8af0:	1900042e 	bgeu	r3,r4,8b04 <__umoddi3+0xec>
    8af4:	1c07883a 	add	r3,r3,r16
    8af8:	1c000236 	bltu	r3,r16,8b04 <__umoddi3+0xec>
    8afc:	1900012e 	bgeu	r3,r4,8b04 <__umoddi3+0xec>
    8b00:	1c07883a 	add	r3,r3,r16
    8b04:	1929c83a 	sub	r20,r3,r4
    8b08:	a009883a 	mov	r4,r20
    8b0c:	880b883a 	mov	r5,r17
    8b10:	0000e3c0 	call	e3c <__umodsi3>
    8b14:	102d883a 	mov	r22,r2
    8b18:	a009883a 	mov	r4,r20
    8b1c:	880b883a 	mov	r5,r17
    8b20:	b02c943a 	slli	r22,r22,16
    8b24:	0000e340 	call	e34 <__udivsi3>
    8b28:	1009883a 	mov	r4,r2
    8b2c:	900b883a 	mov	r5,r18
    8b30:	9cffffcc 	andi	r19,r19,65535
    8b34:	0000e440 	call	e44 <__mulsi3>
    8b38:	b4e6b03a 	or	r19,r22,r19
    8b3c:	9880572e 	bgeu	r19,r2,8c9c <__umoddi3+0x284>
    8b40:	00005206 	br	8c8c <__umoddi3+0x274>
    8b44:	29c05936 	bltu	r5,r7,8cac <__umoddi3+0x294>
    8b48:	00bfffd4 	movui	r2,65535
    8b4c:	11c0652e 	bgeu	r2,r7,8ce4 <__umoddi3+0x2cc>
    8b50:	00804034 	movhi	r2,256
    8b54:	10bfffc4 	addi	r2,r2,-1
    8b58:	11c11936 	bltu	r2,r7,8fc0 <__umoddi3+0x5a8>
    8b5c:	00c00404 	movi	r3,16
    8b60:	1827883a 	mov	r19,r3
    8b64:	38c6d83a 	srl	r3,r7,r3
    8b68:	01000074 	movhi	r4,1
    8b6c:	2134fd04 	addi	r4,r4,-11276
    8b70:	04000804 	movi	r16,32
    8b74:	20c7883a 	add	r3,r4,r3
    8b78:	18800003 	ldbu	r2,0(r3)
    8b7c:	14e7883a 	add	r19,r2,r19
    8b80:	84e1c83a 	sub	r16,r16,r19
    8b84:	8000671e 	bne	r16,zero,8d24 <__umoddi3+0x30c>
    8b88:	3c400136 	bltu	r7,r17,8b90 <__umoddi3+0x178>
    8b8c:	91812536 	bltu	r18,r6,9024 <__umoddi3+0x60c>
    8b90:	9185c83a 	sub	r2,r18,r6
    8b94:	89e3c83a 	sub	r17,r17,r7
    8b98:	90a5803a 	cmpltu	r18,r18,r2
    8b9c:	8ca9c83a 	sub	r20,r17,r18
    8ba0:	a007883a 	mov	r3,r20
    8ba4:	00004306 	br	8cb4 <__umoddi3+0x29c>
    8ba8:	3000041e 	bne	r6,zero,8bbc <__umoddi3+0x1a4>
    8bac:	01000044 	movi	r4,1
    8bb0:	000b883a 	mov	r5,zero
    8bb4:	0000e340 	call	e34 <__udivsi3>
    8bb8:	1021883a 	mov	r16,r2
    8bbc:	00bfffd4 	movui	r2,65535
    8bc0:	1400532e 	bgeu	r2,r16,8d10 <__umoddi3+0x2f8>
    8bc4:	00804034 	movhi	r2,256
    8bc8:	10bfffc4 	addi	r2,r2,-1
    8bcc:	14010536 	bltu	r2,r16,8fe4 <__umoddi3+0x5cc>
    8bd0:	00800404 	movi	r2,16
    8bd4:	1007883a 	mov	r3,r2
    8bd8:	8084d83a 	srl	r2,r16,r2
    8bdc:	01000074 	movhi	r4,1
    8be0:	2134fd04 	addi	r4,r4,-11276
    8be4:	05400804 	movi	r21,32
    8be8:	2085883a 	add	r2,r4,r2
    8bec:	10800003 	ldbu	r2,0(r2)
    8bf0:	10c7883a 	add	r3,r2,r3
    8bf4:	a8ebc83a 	sub	r21,r21,r3
    8bf8:	a800b81e 	bne	r21,zero,8edc <__umoddi3+0x4c4>
    8bfc:	8028d43a 	srli	r20,r16,16
    8c00:	8c23c83a 	sub	r17,r17,r16
    8c04:	85bfffcc 	andi	r22,r16,65535
    8c08:	8809883a 	mov	r4,r17
    8c0c:	a00b883a 	mov	r5,r20
    8c10:	0000e3c0 	call	e3c <__umodsi3>
    8c14:	8809883a 	mov	r4,r17
    8c18:	a00b883a 	mov	r5,r20
    8c1c:	1025883a 	mov	r18,r2
    8c20:	0000e340 	call	e34 <__udivsi3>
    8c24:	1009883a 	mov	r4,r2
    8c28:	b00b883a 	mov	r5,r22
    8c2c:	0000e440 	call	e44 <__mulsi3>
    8c30:	1009883a 	mov	r4,r2
    8c34:	9006943a 	slli	r3,r18,16
    8c38:	9804d43a 	srli	r2,r19,16
    8c3c:	1886b03a 	or	r3,r3,r2
    8c40:	1900032e 	bgeu	r3,r4,8c50 <__umoddi3+0x238>
    8c44:	1c07883a 	add	r3,r3,r16
    8c48:	1c000136 	bltu	r3,r16,8c50 <__umoddi3+0x238>
    8c4c:	1900f336 	bltu	r3,r4,901c <__umoddi3+0x604>
    8c50:	1923c83a 	sub	r17,r3,r4
    8c54:	8809883a 	mov	r4,r17
    8c58:	a00b883a 	mov	r5,r20
    8c5c:	0000e3c0 	call	e3c <__umodsi3>
    8c60:	102f883a 	mov	r23,r2
    8c64:	8809883a 	mov	r4,r17
    8c68:	a00b883a 	mov	r5,r20
    8c6c:	b82e943a 	slli	r23,r23,16
    8c70:	0000e340 	call	e34 <__udivsi3>
    8c74:	1009883a 	mov	r4,r2
    8c78:	b00b883a 	mov	r5,r22
    8c7c:	9cffffcc 	andi	r19,r19,65535
    8c80:	0000e440 	call	e44 <__mulsi3>
    8c84:	bce6b03a 	or	r19,r23,r19
    8c88:	9880042e 	bgeu	r19,r2,8c9c <__umoddi3+0x284>
    8c8c:	9c27883a 	add	r19,r19,r16
    8c90:	9c000236 	bltu	r19,r16,8c9c <__umoddi3+0x284>
    8c94:	9880012e 	bgeu	r19,r2,8c9c <__umoddi3+0x284>
    8c98:	9c27883a 	add	r19,r19,r16
    8c9c:	9885c83a 	sub	r2,r19,r2
    8ca0:	1544d83a 	srl	r2,r2,r21
    8ca4:	0007883a 	mov	r3,zero
    8ca8:	00000206 	br	8cb4 <__umoddi3+0x29c>
    8cac:	2005883a 	mov	r2,r4
    8cb0:	2807883a 	mov	r3,r5
    8cb4:	dfc00c17 	ldw	ra,48(sp)
    8cb8:	df000b17 	ldw	fp,44(sp)
    8cbc:	ddc00a17 	ldw	r23,40(sp)
    8cc0:	dd800917 	ldw	r22,36(sp)
    8cc4:	dd400817 	ldw	r21,32(sp)
    8cc8:	dd000717 	ldw	r20,28(sp)
    8ccc:	dcc00617 	ldw	r19,24(sp)
    8cd0:	dc800517 	ldw	r18,20(sp)
    8cd4:	dc400417 	ldw	r17,16(sp)
    8cd8:	dc000317 	ldw	r16,12(sp)
    8cdc:	dec00d04 	addi	sp,sp,52
    8ce0:	f800283a 	ret
    8ce4:	00803fc4 	movi	r2,255
    8ce8:	11c0b236 	bltu	r2,r7,8fb4 <__umoddi3+0x59c>
    8cec:	0007883a 	mov	r3,zero
    8cf0:	0027883a 	mov	r19,zero
    8cf4:	003f9b06 	br	8b64 <__umoddi3+0x14c>
    8cf8:	00804034 	movhi	r2,256
    8cfc:	10bfffc4 	addi	r2,r2,-1
    8d00:	1180b236 	bltu	r2,r6,8fcc <__umoddi3+0x5b4>
    8d04:	00800404 	movi	r2,16
    8d08:	1009883a 	mov	r4,r2
    8d0c:	003f5a06 	br	8a78 <__umoddi3+0x60>
    8d10:	00803fc4 	movi	r2,255
    8d14:	1400b036 	bltu	r2,r16,8fd8 <__umoddi3+0x5c0>
    8d18:	0005883a 	mov	r2,zero
    8d1c:	0007883a 	mov	r3,zero
    8d20:	003fad06 	br	8bd8 <__umoddi3+0x1c0>
    8d24:	34c4d83a 	srl	r2,r6,r19
    8d28:	3c0e983a 	sll	r7,r7,r16
    8d2c:	8cf8d83a 	srl	fp,r17,r19
    8d30:	8c22983a 	sll	r17,r17,r16
    8d34:	38a8b03a 	or	r20,r7,r2
    8d38:	a02ad43a 	srli	r21,r20,16
    8d3c:	94c4d83a 	srl	r2,r18,r19
    8d40:	e009883a 	mov	r4,fp
    8d44:	a80b883a 	mov	r5,r21
    8d48:	342c983a 	sll	r22,r6,r16
    8d4c:	88a2b03a 	or	r17,r17,r2
    8d50:	0000e3c0 	call	e3c <__umodsi3>
    8d54:	e009883a 	mov	r4,fp
    8d58:	a80b883a 	mov	r5,r21
    8d5c:	a5ffffcc 	andi	r23,r20,65535
    8d60:	d8800215 	stw	r2,8(sp)
    8d64:	0000e340 	call	e34 <__udivsi3>
    8d68:	1009883a 	mov	r4,r2
    8d6c:	b80b883a 	mov	r5,r23
    8d70:	1039883a 	mov	fp,r2
    8d74:	0000e440 	call	e44 <__mulsi3>
    8d78:	d8c00217 	ldw	r3,8(sp)
    8d7c:	1009883a 	mov	r4,r2
    8d80:	8804d43a 	srli	r2,r17,16
    8d84:	1806943a 	slli	r3,r3,16
    8d88:	9424983a 	sll	r18,r18,r16
    8d8c:	1886b03a 	or	r3,r3,r2
    8d90:	1900042e 	bgeu	r3,r4,8da4 <__umoddi3+0x38c>
    8d94:	1d07883a 	add	r3,r3,r20
    8d98:	e0bfffc4 	addi	r2,fp,-1
    8d9c:	1d009b2e 	bgeu	r3,r20,900c <__umoddi3+0x5f4>
    8da0:	1039883a 	mov	fp,r2
    8da4:	1907c83a 	sub	r3,r3,r4
    8da8:	1809883a 	mov	r4,r3
    8dac:	a80b883a 	mov	r5,r21
    8db0:	d8c00215 	stw	r3,8(sp)
    8db4:	0000e3c0 	call	e3c <__umodsi3>
    8db8:	d8c00217 	ldw	r3,8(sp)
    8dbc:	a80b883a 	mov	r5,r21
    8dc0:	d8800015 	stw	r2,0(sp)
    8dc4:	1809883a 	mov	r4,r3
    8dc8:	0000e340 	call	e34 <__udivsi3>
    8dcc:	1009883a 	mov	r4,r2
    8dd0:	b80b883a 	mov	r5,r23
    8dd4:	102b883a 	mov	r21,r2
    8dd8:	0000e440 	call	e44 <__mulsi3>
    8ddc:	d9c00017 	ldw	r7,0(sp)
    8de0:	8c7fffcc 	andi	r17,r17,65535
    8de4:	380e943a 	slli	r7,r7,16
    8de8:	3c4eb03a 	or	r7,r7,r17
    8dec:	3880042e 	bgeu	r7,r2,8e00 <__umoddi3+0x3e8>
    8df0:	3d0f883a 	add	r7,r7,r20
    8df4:	a8ffffc4 	addi	r3,r21,-1
    8df8:	3d00802e 	bgeu	r7,r20,8ffc <__umoddi3+0x5e4>
    8dfc:	182b883a 	mov	r21,r3
    8e00:	e038943a 	slli	fp,fp,16
    8e04:	b010d43a 	srli	r8,r22,16
    8e08:	b1bfffcc 	andi	r6,r22,65535
    8e0c:	af2ab03a 	or	r21,r21,fp
    8e10:	a82ed43a 	srli	r23,r21,16
    8e14:	ad7fffcc 	andi	r21,r21,65535
    8e18:	300b883a 	mov	r5,r6
    8e1c:	a809883a 	mov	r4,r21
    8e20:	38a3c83a 	sub	r17,r7,r2
    8e24:	d9800115 	stw	r6,4(sp)
    8e28:	da000015 	stw	r8,0(sp)
    8e2c:	0000e440 	call	e44 <__mulsi3>
    8e30:	da000017 	ldw	r8,0(sp)
    8e34:	a809883a 	mov	r4,r21
    8e38:	1039883a 	mov	fp,r2
    8e3c:	400b883a 	mov	r5,r8
    8e40:	da000215 	stw	r8,8(sp)
    8e44:	0000e440 	call	e44 <__mulsi3>
    8e48:	d9800117 	ldw	r6,4(sp)
    8e4c:	b809883a 	mov	r4,r23
    8e50:	d8800015 	stw	r2,0(sp)
    8e54:	300b883a 	mov	r5,r6
    8e58:	0000e440 	call	e44 <__mulsi3>
    8e5c:	d8c00217 	ldw	r3,8(sp)
    8e60:	b809883a 	mov	r4,r23
    8e64:	102b883a 	mov	r21,r2
    8e68:	180b883a 	mov	r5,r3
    8e6c:	0000e440 	call	e44 <__mulsi3>
    8e70:	d9c00017 	ldw	r7,0(sp)
    8e74:	1007883a 	mov	r3,r2
    8e78:	e004d43a 	srli	r2,fp,16
    8e7c:	a9c9883a 	add	r4,r21,r7
    8e80:	2089883a 	add	r4,r4,r2
    8e84:	2540022e 	bgeu	r4,r21,8e90 <__umoddi3+0x478>
    8e88:	00800074 	movhi	r2,1
    8e8c:	1887883a 	add	r3,r3,r2
    8e90:	2004d43a 	srli	r2,r4,16
    8e94:	2008943a 	slli	r4,r4,16
    8e98:	e73fffcc 	andi	fp,fp,65535
    8e9c:	1887883a 	add	r3,r3,r2
    8ea0:	2709883a 	add	r4,r4,fp
    8ea4:	88c03d36 	bltu	r17,r3,8f9c <__umoddi3+0x584>
    8ea8:	88c06126 	beq	r17,r3,9030 <__umoddi3+0x618>
    8eac:	88c7c83a 	sub	r3,r17,r3
    8eb0:	202d883a 	mov	r22,r4
    8eb4:	95adc83a 	sub	r22,r18,r22
    8eb8:	95a5803a 	cmpltu	r18,r18,r22
    8ebc:	1c87c83a 	sub	r3,r3,r18
    8ec0:	1cc4983a 	sll	r2,r3,r19
    8ec4:	b42cd83a 	srl	r22,r22,r16
    8ec8:	1c06d83a 	srl	r3,r3,r16
    8ecc:	1584b03a 	or	r2,r2,r22
    8ed0:	003f7806 	br	8cb4 <__umoddi3+0x29c>
    8ed4:	002b883a 	mov	r21,zero
    8ed8:	003ef506 	br	8ab0 <__umoddi3+0x98>
    8edc:	8560983a 	sll	r16,r16,r21
    8ee0:	88e6d83a 	srl	r19,r17,r3
    8ee4:	90c6d83a 	srl	r3,r18,r3
    8ee8:	8028d43a 	srli	r20,r16,16
    8eec:	8d62983a 	sll	r17,r17,r21
    8ef0:	9809883a 	mov	r4,r19
    8ef4:	a00b883a 	mov	r5,r20
    8ef8:	88eeb03a 	or	r23,r17,r3
    8efc:	0000e3c0 	call	e3c <__umodsi3>
    8f00:	9809883a 	mov	r4,r19
    8f04:	a00b883a 	mov	r5,r20
    8f08:	1023883a 	mov	r17,r2
    8f0c:	85bfffcc 	andi	r22,r16,65535
    8f10:	0000e340 	call	e34 <__udivsi3>
    8f14:	1009883a 	mov	r4,r2
    8f18:	b00b883a 	mov	r5,r22
    8f1c:	0000e440 	call	e44 <__mulsi3>
    8f20:	1007883a 	mov	r3,r2
    8f24:	8808943a 	slli	r4,r17,16
    8f28:	b804d43a 	srli	r2,r23,16
    8f2c:	9566983a 	sll	r19,r18,r21
    8f30:	2088b03a 	or	r4,r4,r2
    8f34:	20c0042e 	bgeu	r4,r3,8f48 <__umoddi3+0x530>
    8f38:	2409883a 	add	r4,r4,r16
    8f3c:	24000236 	bltu	r4,r16,8f48 <__umoddi3+0x530>
    8f40:	20c0012e 	bgeu	r4,r3,8f48 <__umoddi3+0x530>
    8f44:	2409883a 	add	r4,r4,r16
    8f48:	20e5c83a 	sub	r18,r4,r3
    8f4c:	9009883a 	mov	r4,r18
    8f50:	a00b883a 	mov	r5,r20
    8f54:	0000e3c0 	call	e3c <__umodsi3>
    8f58:	1023883a 	mov	r17,r2
    8f5c:	9009883a 	mov	r4,r18
    8f60:	a00b883a 	mov	r5,r20
    8f64:	8822943a 	slli	r17,r17,16
    8f68:	0000e340 	call	e34 <__udivsi3>
    8f6c:	1009883a 	mov	r4,r2
    8f70:	b00b883a 	mov	r5,r22
    8f74:	bdffffcc 	andi	r23,r23,65535
    8f78:	0000e440 	call	e44 <__mulsi3>
    8f7c:	8de2b03a 	or	r17,r17,r23
    8f80:	8880042e 	bgeu	r17,r2,8f94 <__umoddi3+0x57c>
    8f84:	8c23883a 	add	r17,r17,r16
    8f88:	8c000236 	bltu	r17,r16,8f94 <__umoddi3+0x57c>
    8f8c:	8880012e 	bgeu	r17,r2,8f94 <__umoddi3+0x57c>
    8f90:	8c23883a 	add	r17,r17,r16
    8f94:	88a3c83a 	sub	r17,r17,r2
    8f98:	003f1b06 	br	8c08 <__umoddi3+0x1f0>
    8f9c:	25adc83a 	sub	r22,r4,r22
    8fa0:	1d07c83a 	sub	r3,r3,r20
    8fa4:	2589803a 	cmpltu	r4,r4,r22
    8fa8:	1907c83a 	sub	r3,r3,r4
    8fac:	88c7c83a 	sub	r3,r17,r3
    8fb0:	003fc006 	br	8eb4 <__umoddi3+0x49c>
    8fb4:	00c00204 	movi	r3,8
    8fb8:	1827883a 	mov	r19,r3
    8fbc:	003ee906 	br	8b64 <__umoddi3+0x14c>
    8fc0:	00c00604 	movi	r3,24
    8fc4:	1827883a 	mov	r19,r3
    8fc8:	003ee606 	br	8b64 <__umoddi3+0x14c>
    8fcc:	00800604 	movi	r2,24
    8fd0:	1009883a 	mov	r4,r2
    8fd4:	003ea806 	br	8a78 <__umoddi3+0x60>
    8fd8:	00800204 	movi	r2,8
    8fdc:	1007883a 	mov	r3,r2
    8fe0:	003efd06 	br	8bd8 <__umoddi3+0x1c0>
    8fe4:	00800604 	movi	r2,24
    8fe8:	1007883a 	mov	r3,r2
    8fec:	003efa06 	br	8bd8 <__umoddi3+0x1c0>
    8ff0:	00800204 	movi	r2,8
    8ff4:	1009883a 	mov	r4,r2
    8ff8:	003e9f06 	br	8a78 <__umoddi3+0x60>
    8ffc:	38bf7f2e 	bgeu	r7,r2,8dfc <__umoddi3+0x3e4>
    9000:	ad7fff84 	addi	r21,r21,-2
    9004:	3d0f883a 	add	r7,r7,r20
    9008:	003f7d06 	br	8e00 <__umoddi3+0x3e8>
    900c:	193f642e 	bgeu	r3,r4,8da0 <__umoddi3+0x388>
    9010:	e73fff84 	addi	fp,fp,-2
    9014:	1d07883a 	add	r3,r3,r20
    9018:	003f6206 	br	8da4 <__umoddi3+0x38c>
    901c:	1c07883a 	add	r3,r3,r16
    9020:	003f0b06 	br	8c50 <__umoddi3+0x238>
    9024:	9005883a 	mov	r2,r18
    9028:	a007883a 	mov	r3,r20
    902c:	003f2106 	br	8cb4 <__umoddi3+0x29c>
    9030:	913fda36 	bltu	r18,r4,8f9c <__umoddi3+0x584>
    9034:	202d883a 	mov	r22,r4
    9038:	0007883a 	mov	r3,zero
    903c:	003f9d06 	br	8eb4 <__umoddi3+0x49c>

00009040 <_fpadd_parts>:
    9040:	2005883a 	mov	r2,r4
    9044:	21000017 	ldw	r4,0(r4)
    9048:	01c00044 	movi	r7,1
    904c:	3900622e 	bgeu	r7,r4,91d8 <_fpadd_parts+0x198>
    9050:	28c00017 	ldw	r3,0(r5)
    9054:	38c05f2e 	bgeu	r7,r3,91d4 <_fpadd_parts+0x194>
    9058:	01c00104 	movi	r7,4
    905c:	21c0c626 	beq	r4,r7,9378 <_fpadd_parts+0x338>
    9060:	19c05c26 	beq	r3,r7,91d4 <_fpadd_parts+0x194>
    9064:	01c00084 	movi	r7,2
    9068:	19c06b26 	beq	r3,r7,9218 <_fpadd_parts+0x1d8>
    906c:	21c05926 	beq	r4,r7,91d4 <_fpadd_parts+0x194>
    9070:	11c00217 	ldw	r7,8(r2)
    9074:	2ac00217 	ldw	r11,8(r5)
    9078:	13000317 	ldw	r12,12(r2)
    907c:	13400417 	ldw	r13,16(r2)
    9080:	3ac9c83a 	sub	r4,r7,r11
    9084:	2a000317 	ldw	r8,12(r5)
    9088:	2a400417 	ldw	r9,16(r5)
    908c:	2015883a 	mov	r10,r4
    9090:	20007516 	blt	r4,zero,9268 <_fpadd_parts+0x228>
    9094:	00c00fc4 	movi	r3,63
    9098:	1a805016 	blt	r3,r10,91dc <_fpadd_parts+0x19c>
    909c:	0100870e 	bge	zero,r4,92bc <_fpadd_parts+0x27c>
    90a0:	50fff804 	addi	r3,r10,-32
    90a4:	18009916 	blt	r3,zero,930c <_fpadd_parts+0x2cc>
    90a8:	48d6d83a 	srl	r11,r9,r3
    90ac:	001d883a 	mov	r14,zero
    90b0:	18009e16 	blt	r3,zero,932c <_fpadd_parts+0x2ec>
    90b4:	01000044 	movi	r4,1
    90b8:	20c6983a 	sll	r3,r4,r3
    90bc:	0015883a 	mov	r10,zero
    90c0:	513fffc4 	addi	r4,r10,-1
    90c4:	2295403a 	cmpgeu	r10,r4,r10
    90c8:	1a87c83a 	sub	r3,r3,r10
    90cc:	1a52703a 	and	r9,r3,r9
    90d0:	2210703a 	and	r8,r4,r8
    90d4:	4250b03a 	or	r8,r8,r9
    90d8:	4010c03a 	cmpne	r8,r8,zero
    90dc:	42d0b03a 	or	r8,r8,r11
    90e0:	7013883a 	mov	r9,r14
    90e4:	11000117 	ldw	r4,4(r2)
    90e8:	28800117 	ldw	r2,4(r5)
    90ec:	20804126 	beq	r4,r2,91f4 <_fpadd_parts+0x1b4>
    90f0:	20006326 	beq	r4,zero,9280 <_fpadd_parts+0x240>
    90f4:	4305c83a 	sub	r2,r8,r12
    90f8:	4091803a 	cmpltu	r8,r8,r2
    90fc:	4b47c83a 	sub	r3,r9,r13
    9100:	1a07c83a 	sub	r3,r3,r8
    9104:	18006316 	blt	r3,zero,9294 <_fpadd_parts+0x254>
    9108:	30000115 	stw	zero,4(r6)
    910c:	31c00215 	stw	r7,8(r6)
    9110:	30800315 	stw	r2,12(r6)
    9114:	30c00415 	stw	r3,16(r6)
    9118:	11ffffc4 	addi	r7,r2,-1
    911c:	388b403a 	cmpgeu	r5,r7,r2
    9120:	194bc83a 	sub	r5,r3,r5
    9124:	01040034 	movhi	r4,4096
    9128:	213fffc4 	addi	r4,r4,-1
    912c:	21401736 	bltu	r4,r5,918c <_fpadd_parts+0x14c>
    9130:	29008226 	beq	r5,r4,933c <_fpadd_parts+0x2fc>
    9134:	31400217 	ldw	r5,8(r6)
    9138:	02840034 	movhi	r10,4096
    913c:	52bfffc4 	addi	r10,r10,-1
    9140:	033fff84 	movi	r12,-2
    9144:	297fffc4 	addi	r5,r5,-1
    9148:	00000106 	br	9150 <_fpadd_parts+0x110>
    914c:	3a804a26 	beq	r7,r10,9278 <_fpadd_parts+0x238>
    9150:	1089883a 	add	r4,r2,r2
    9154:	2091803a 	cmpltu	r8,r4,r2
    9158:	18c7883a 	add	r3,r3,r3
    915c:	227fffc4 	addi	r9,r4,-1
    9160:	40d1883a 	add	r8,r8,r3
    9164:	490f403a 	cmpgeu	r7,r9,r4
    9168:	41cfc83a 	sub	r7,r8,r7
    916c:	2817883a 	mov	r11,r5
    9170:	2005883a 	mov	r2,r4
    9174:	4007883a 	mov	r3,r8
    9178:	297fffc4 	addi	r5,r5,-1
    917c:	51fff32e 	bgeu	r10,r7,914c <_fpadd_parts+0x10c>
    9180:	31000315 	stw	r4,12(r6)
    9184:	32000415 	stw	r8,16(r6)
    9188:	32c00215 	stw	r11,8(r6)
    918c:	010000c4 	movi	r4,3
    9190:	31000015 	stw	r4,0(r6)
    9194:	01080034 	movhi	r4,8192
    9198:	213fffc4 	addi	r4,r4,-1
    919c:	20c00b2e 	bgeu	r4,r3,91cc <_fpadd_parts+0x18c>
    91a0:	180e97fa 	slli	r7,r3,31
    91a4:	1008d07a 	srli	r4,r2,1
    91a8:	31400217 	ldw	r5,8(r6)
    91ac:	1806d07a 	srli	r3,r3,1
    91b0:	1080004c 	andi	r2,r2,1
    91b4:	3908b03a 	or	r4,r7,r4
    91b8:	1108b03a 	or	r4,r2,r4
    91bc:	29400044 	addi	r5,r5,1
    91c0:	31000315 	stw	r4,12(r6)
    91c4:	30c00415 	stw	r3,16(r6)
    91c8:	31400215 	stw	r5,8(r6)
    91cc:	3005883a 	mov	r2,r6
    91d0:	f800283a 	ret
    91d4:	2805883a 	mov	r2,r5
    91d8:	f800283a 	ret
    91dc:	59c01e0e 	bge	r11,r7,9258 <_fpadd_parts+0x218>
    91e0:	11000117 	ldw	r4,4(r2)
    91e4:	28800117 	ldw	r2,4(r5)
    91e8:	0011883a 	mov	r8,zero
    91ec:	0013883a 	mov	r9,zero
    91f0:	20bfbf1e 	bne	r4,r2,90f0 <_fpadd_parts+0xb0>
    91f4:	4305883a 	add	r2,r8,r12
    91f8:	1207803a 	cmpltu	r3,r2,r8
    91fc:	4b53883a 	add	r9,r9,r13
    9200:	1a47883a 	add	r3,r3,r9
    9204:	31000115 	stw	r4,4(r6)
    9208:	31c00215 	stw	r7,8(r6)
    920c:	30800315 	stw	r2,12(r6)
    9210:	30c00415 	stw	r3,16(r6)
    9214:	003fdd06 	br	918c <_fpadd_parts+0x14c>
    9218:	20ffef1e 	bne	r4,r3,91d8 <_fpadd_parts+0x198>
    921c:	31000015 	stw	r4,0(r6)
    9220:	10c00117 	ldw	r3,4(r2)
    9224:	30c00115 	stw	r3,4(r6)
    9228:	10c00217 	ldw	r3,8(r2)
    922c:	11000117 	ldw	r4,4(r2)
    9230:	29400117 	ldw	r5,4(r5)
    9234:	30c00215 	stw	r3,8(r6)
    9238:	10c00317 	ldw	r3,12(r2)
    923c:	2908703a 	and	r4,r5,r4
    9240:	30c00315 	stw	r3,12(r6)
    9244:	10c00417 	ldw	r3,16(r2)
    9248:	31000115 	stw	r4,4(r6)
    924c:	3005883a 	mov	r2,r6
    9250:	30c00415 	stw	r3,16(r6)
    9254:	f800283a 	ret
    9258:	580f883a 	mov	r7,r11
    925c:	0019883a 	mov	r12,zero
    9260:	001b883a 	mov	r13,zero
    9264:	003f9f06 	br	90e4 <_fpadd_parts+0xa4>
    9268:	0115c83a 	sub	r10,zero,r4
    926c:	00c00fc4 	movi	r3,63
    9270:	1abfda16 	blt	r3,r10,91dc <_fpadd_parts+0x19c>
    9274:	003f8906 	br	909c <_fpadd_parts+0x5c>
    9278:	627fb52e 	bgeu	r12,r9,9150 <_fpadd_parts+0x110>
    927c:	003fc006 	br	9180 <_fpadd_parts+0x140>
    9280:	6205c83a 	sub	r2,r12,r8
    9284:	6099803a 	cmpltu	r12,r12,r2
    9288:	6a47c83a 	sub	r3,r13,r9
    928c:	1b07c83a 	sub	r3,r3,r12
    9290:	183f9d0e 	bge	r3,zero,9108 <_fpadd_parts+0xc8>
    9294:	0085c83a 	sub	r2,zero,r2
    9298:	1008c03a 	cmpne	r4,r2,zero
    929c:	00c7c83a 	sub	r3,zero,r3
    92a0:	1907c83a 	sub	r3,r3,r4
    92a4:	01000044 	movi	r4,1
    92a8:	31000115 	stw	r4,4(r6)
    92ac:	31c00215 	stw	r7,8(r6)
    92b0:	30800315 	stw	r2,12(r6)
    92b4:	30c00415 	stw	r3,16(r6)
    92b8:	003f9706 	br	9118 <_fpadd_parts+0xd8>
    92bc:	203f8926 	beq	r4,zero,90e4 <_fpadd_parts+0xa4>
    92c0:	50fff804 	addi	r3,r10,-32
    92c4:	3a8f883a 	add	r7,r7,r10
    92c8:	18002316 	blt	r3,zero,9358 <_fpadd_parts+0x318>
    92cc:	68d6d83a 	srl	r11,r13,r3
    92d0:	001d883a 	mov	r14,zero
    92d4:	18001c16 	blt	r3,zero,9348 <_fpadd_parts+0x308>
    92d8:	01000044 	movi	r4,1
    92dc:	20c6983a 	sll	r3,r4,r3
    92e0:	0015883a 	mov	r10,zero
    92e4:	513fffc4 	addi	r4,r10,-1
    92e8:	2295403a 	cmpgeu	r10,r4,r10
    92ec:	1a87c83a 	sub	r3,r3,r10
    92f0:	1b5a703a 	and	r13,r3,r13
    92f4:	2318703a 	and	r12,r4,r12
    92f8:	6358b03a 	or	r12,r12,r13
    92fc:	6018c03a 	cmpne	r12,r12,zero
    9300:	62d8b03a 	or	r12,r12,r11
    9304:	701b883a 	mov	r13,r14
    9308:	003f7606 	br	90e4 <_fpadd_parts+0xa4>
    930c:	4808907a 	slli	r4,r9,1
    9310:	02c007c4 	movi	r11,31
    9314:	5a97c83a 	sub	r11,r11,r10
    9318:	22c8983a 	sll	r4,r4,r11
    931c:	4296d83a 	srl	r11,r8,r10
    9320:	4a9cd83a 	srl	r14,r9,r10
    9324:	22d6b03a 	or	r11,r4,r11
    9328:	003f6106 	br	90b0 <_fpadd_parts+0x70>
    932c:	00c00044 	movi	r3,1
    9330:	1a94983a 	sll	r10,r3,r10
    9334:	0007883a 	mov	r3,zero
    9338:	003f6106 	br	90c0 <_fpadd_parts+0x80>
    933c:	013fff84 	movi	r4,-2
    9340:	21ff7c2e 	bgeu	r4,r7,9134 <_fpadd_parts+0xf4>
    9344:	003f9106 	br	918c <_fpadd_parts+0x14c>
    9348:	00c00044 	movi	r3,1
    934c:	1a94983a 	sll	r10,r3,r10
    9350:	0007883a 	mov	r3,zero
    9354:	003fe306 	br	92e4 <_fpadd_parts+0x2a4>
    9358:	6816907a 	slli	r11,r13,1
    935c:	010007c4 	movi	r4,31
    9360:	2289c83a 	sub	r4,r4,r10
    9364:	5908983a 	sll	r4,r11,r4
    9368:	6296d83a 	srl	r11,r12,r10
    936c:	6a9cd83a 	srl	r14,r13,r10
    9370:	22d6b03a 	or	r11,r4,r11
    9374:	003fd706 	br	92d4 <_fpadd_parts+0x294>
    9378:	193f971e 	bne	r3,r4,91d8 <_fpadd_parts+0x198>
    937c:	11000117 	ldw	r4,4(r2)
    9380:	28c00117 	ldw	r3,4(r5)
    9384:	20ff9426 	beq	r4,r3,91d8 <_fpadd_parts+0x198>
    9388:	00800074 	movhi	r2,1
    938c:	10b4f804 	addi	r2,r2,-11296
    9390:	f800283a 	ret

00009394 <__adddf3>:
    9394:	deffec04 	addi	sp,sp,-80
    9398:	d9001115 	stw	r4,68(sp)
    939c:	d9401215 	stw	r5,72(sp)
    93a0:	d9001104 	addi	r4,sp,68
    93a4:	d9400a04 	addi	r5,sp,40
    93a8:	dfc01315 	stw	ra,76(sp)
    93ac:	d9c01015 	stw	r7,64(sp)
    93b0:	d9800f15 	stw	r6,60(sp)
    93b4:	000a1600 	call	a160 <__unpack_d>
    93b8:	d9000f04 	addi	r4,sp,60
    93bc:	d9400504 	addi	r5,sp,20
    93c0:	000a1600 	call	a160 <__unpack_d>
    93c4:	d9000a04 	addi	r4,sp,40
    93c8:	d9400504 	addi	r5,sp,20
    93cc:	d80d883a 	mov	r6,sp
    93d0:	00090400 	call	9040 <_fpadd_parts>
    93d4:	1009883a 	mov	r4,r2
    93d8:	0009f3c0 	call	9f3c <__pack_d>
    93dc:	dfc01317 	ldw	ra,76(sp)
    93e0:	dec01404 	addi	sp,sp,80
    93e4:	f800283a 	ret

000093e8 <__subdf3>:
    93e8:	deffec04 	addi	sp,sp,-80
    93ec:	d9001115 	stw	r4,68(sp)
    93f0:	d9401215 	stw	r5,72(sp)
    93f4:	d9001104 	addi	r4,sp,68
    93f8:	d9400a04 	addi	r5,sp,40
    93fc:	dfc01315 	stw	ra,76(sp)
    9400:	d9c01015 	stw	r7,64(sp)
    9404:	d9800f15 	stw	r6,60(sp)
    9408:	000a1600 	call	a160 <__unpack_d>
    940c:	d9000f04 	addi	r4,sp,60
    9410:	d9400504 	addi	r5,sp,20
    9414:	000a1600 	call	a160 <__unpack_d>
    9418:	d8800617 	ldw	r2,24(sp)
    941c:	d9000a04 	addi	r4,sp,40
    9420:	d9400504 	addi	r5,sp,20
    9424:	d80d883a 	mov	r6,sp
    9428:	1080005c 	xori	r2,r2,1
    942c:	d8800615 	stw	r2,24(sp)
    9430:	00090400 	call	9040 <_fpadd_parts>
    9434:	1009883a 	mov	r4,r2
    9438:	0009f3c0 	call	9f3c <__pack_d>
    943c:	dfc01317 	ldw	ra,76(sp)
    9440:	dec01404 	addi	sp,sp,80
    9444:	f800283a 	ret

00009448 <__muldf3>:
    9448:	deffe404 	addi	sp,sp,-112
    944c:	d9001115 	stw	r4,68(sp)
    9450:	d9401215 	stw	r5,72(sp)
    9454:	d9001104 	addi	r4,sp,68
    9458:	d9400a04 	addi	r5,sp,40
    945c:	dfc01b15 	stw	ra,108(sp)
    9460:	d9800f15 	stw	r6,60(sp)
    9464:	d9c01015 	stw	r7,64(sp)
    9468:	ddc01a15 	stw	r23,104(sp)
    946c:	dd801915 	stw	r22,100(sp)
    9470:	dd401815 	stw	r21,96(sp)
    9474:	dd001715 	stw	r20,92(sp)
    9478:	dcc01615 	stw	r19,88(sp)
    947c:	dc801515 	stw	r18,84(sp)
    9480:	dc401415 	stw	r17,80(sp)
    9484:	dc001315 	stw	r16,76(sp)
    9488:	000a1600 	call	a160 <__unpack_d>
    948c:	d9000f04 	addi	r4,sp,60
    9490:	d9400504 	addi	r5,sp,20
    9494:	000a1600 	call	a160 <__unpack_d>
    9498:	d8c00a17 	ldw	r3,40(sp)
    949c:	00800044 	movi	r2,1
    94a0:	10c01136 	bltu	r2,r3,94e8 <__muldf3+0xa0>
    94a4:	d8c00b17 	ldw	r3,44(sp)
    94a8:	d8800617 	ldw	r2,24(sp)
    94ac:	d9000a04 	addi	r4,sp,40
    94b0:	1884c03a 	cmpne	r2,r3,r2
    94b4:	d8800b15 	stw	r2,44(sp)
    94b8:	0009f3c0 	call	9f3c <__pack_d>
    94bc:	dfc01b17 	ldw	ra,108(sp)
    94c0:	ddc01a17 	ldw	r23,104(sp)
    94c4:	dd801917 	ldw	r22,100(sp)
    94c8:	dd401817 	ldw	r21,96(sp)
    94cc:	dd001717 	ldw	r20,92(sp)
    94d0:	dcc01617 	ldw	r19,88(sp)
    94d4:	dc801517 	ldw	r18,84(sp)
    94d8:	dc401417 	ldw	r17,80(sp)
    94dc:	dc001317 	ldw	r16,76(sp)
    94e0:	dec01c04 	addi	sp,sp,112
    94e4:	f800283a 	ret
    94e8:	d9000517 	ldw	r4,20(sp)
    94ec:	11000636 	bltu	r2,r4,9508 <__muldf3+0xc0>
    94f0:	d8800617 	ldw	r2,24(sp)
    94f4:	d8c00b17 	ldw	r3,44(sp)
    94f8:	d9000504 	addi	r4,sp,20
    94fc:	1884c03a 	cmpne	r2,r3,r2
    9500:	d8800615 	stw	r2,24(sp)
    9504:	003fec06 	br	94b8 <__muldf3+0x70>
    9508:	00800104 	movi	r2,4
    950c:	1880051e 	bne	r3,r2,9524 <__muldf3+0xdc>
    9510:	00800084 	movi	r2,2
    9514:	20bfe31e 	bne	r4,r2,94a4 <__muldf3+0x5c>
    9518:	01000074 	movhi	r4,1
    951c:	2134f804 	addi	r4,r4,-11296
    9520:	003fe506 	br	94b8 <__muldf3+0x70>
    9524:	2080031e 	bne	r4,r2,9534 <__muldf3+0xec>
    9528:	00800084 	movi	r2,2
    952c:	18bffa26 	beq	r3,r2,9518 <__muldf3+0xd0>
    9530:	003fef06 	br	94f0 <__muldf3+0xa8>
    9534:	00800084 	movi	r2,2
    9538:	18bfda26 	beq	r3,r2,94a4 <__muldf3+0x5c>
    953c:	20bfec26 	beq	r4,r2,94f0 <__muldf3+0xa8>
    9540:	dc000d17 	ldw	r16,52(sp)
    9544:	dd000817 	ldw	r20,32(sp)
    9548:	dc800917 	ldw	r18,36(sp)
    954c:	8009883a 	mov	r4,r16
    9550:	000b883a 	mov	r5,zero
    9554:	a00d883a 	mov	r6,r20
    9558:	000f883a 	mov	r7,zero
    955c:	0009d800 	call	9d80 <__muldi3>
    9560:	dc400e17 	ldw	r17,56(sp)
    9564:	9009883a 	mov	r4,r18
    9568:	800d883a 	mov	r6,r16
    956c:	000b883a 	mov	r5,zero
    9570:	000f883a 	mov	r7,zero
    9574:	102f883a 	mov	r23,r2
    9578:	1827883a 	mov	r19,r3
    957c:	0009d800 	call	9d80 <__muldi3>
    9580:	900d883a 	mov	r6,r18
    9584:	8809883a 	mov	r4,r17
    9588:	000b883a 	mov	r5,zero
    958c:	000f883a 	mov	r7,zero
    9590:	102b883a 	mov	r21,r2
    9594:	1821883a 	mov	r16,r3
    9598:	0009d800 	call	9d80 <__muldi3>
    959c:	8809883a 	mov	r4,r17
    95a0:	000b883a 	mov	r5,zero
    95a4:	a00d883a 	mov	r6,r20
    95a8:	000f883a 	mov	r7,zero
    95ac:	102d883a 	mov	r22,r2
    95b0:	1825883a 	mov	r18,r3
    95b4:	0009d800 	call	9d80 <__muldi3>
    95b8:	154b883a 	add	r5,r2,r21
    95bc:	2889803a 	cmpltu	r4,r5,r2
    95c0:	1c07883a 	add	r3,r3,r16
    95c4:	20c9883a 	add	r4,r4,r3
    95c8:	24004b36 	bltu	r4,r16,96f8 <__muldf3+0x2b0>
    95cc:	8100011e 	bne	r16,r4,95d4 <__muldf3+0x18c>
    95d0:	2d404936 	bltu	r5,r21,96f8 <__muldf3+0x2b0>
    95d4:	0011883a 	mov	r8,zero
    95d8:	0007883a 	mov	r3,zero
    95dc:	2ccb883a 	add	r5,r5,r19
    95e0:	b80d883a 	mov	r6,r23
    95e4:	2cc0012e 	bgeu	r5,r19,95ec <__muldf3+0x1a4>
    95e8:	02000044 	movi	r8,1
    95ec:	258f883a 	add	r7,r4,r22
    95f0:	3909803a 	cmpltu	r4,r7,r4
    95f4:	da400c17 	ldw	r9,48(sp)
    95f8:	2489883a 	add	r4,r4,r18
    95fc:	d8800717 	ldw	r2,28(sp)
    9600:	20c9883a 	add	r4,r4,r3
    9604:	da800b17 	ldw	r10,44(sp)
    9608:	d8c00617 	ldw	r3,24(sp)
    960c:	3a11883a 	add	r8,r7,r8
    9610:	4885883a 	add	r2,r9,r2
    9614:	50c6c03a 	cmpne	r3,r10,r3
    9618:	41cf803a 	cmpltu	r7,r8,r7
    961c:	12400104 	addi	r9,r2,4
    9620:	d8c00115 	stw	r3,4(sp)
    9624:	3909883a 	add	r4,r7,r4
    9628:	da400215 	stw	r9,8(sp)
    962c:	03480034 	movhi	r13,8192
    9630:	6b7fffc4 	addi	r13,r13,-1
    9634:	4007883a 	mov	r3,r8
    9638:	6900102e 	bgeu	r13,r4,967c <__muldf3+0x234>
    963c:	10800144 	addi	r2,r2,5
    9640:	180ed07a 	srli	r7,r3,1
    9644:	18c0004c 	andi	r3,r3,1
    9648:	201097fa 	slli	r8,r4,31
    964c:	281697fa 	slli	r11,r5,31
    9650:	2008d07a 	srli	r4,r4,1
    9654:	3014d07a 	srli	r10,r6,1
    9658:	2812d07a 	srli	r9,r5,1
    965c:	1019883a 	mov	r12,r2
    9660:	18000226 	beq	r3,zero,966c <__muldf3+0x224>
    9664:	5a8cb03a 	or	r6,r11,r10
    9668:	49600034 	orhi	r5,r9,32768
    966c:	41c6b03a 	or	r3,r8,r7
    9670:	10800044 	addi	r2,r2,1
    9674:	693ff236 	bltu	r13,r4,9640 <__muldf3+0x1f8>
    9678:	db000215 	stw	r12,8(sp)
    967c:	03440034 	movhi	r13,4096
    9680:	6b7fffc4 	addi	r13,r13,-1
    9684:	69001336 	bltu	r13,r4,96d4 <__muldf3+0x28c>
    9688:	d8800217 	ldw	r2,8(sp)
    968c:	10bfffc4 	addi	r2,r2,-1
    9690:	18d3883a 	add	r9,r3,r3
    9694:	48c7803a 	cmpltu	r3,r9,r3
    9698:	2109883a 	add	r4,r4,r4
    969c:	190f883a 	add	r7,r3,r4
    96a0:	3191883a 	add	r8,r6,r6
    96a4:	4197803a 	cmpltu	r11,r8,r6
    96a8:	2955883a 	add	r10,r5,r5
    96ac:	1019883a 	mov	r12,r2
    96b0:	4807883a 	mov	r3,r9
    96b4:	3809883a 	mov	r4,r7
    96b8:	2800010e 	bge	r5,zero,96c0 <__muldf3+0x278>
    96bc:	48c00054 	ori	r3,r9,1
    96c0:	400d883a 	mov	r6,r8
    96c4:	5a8b883a 	add	r5,r11,r10
    96c8:	10bfffc4 	addi	r2,r2,-1
    96cc:	69fff02e 	bgeu	r13,r7,9690 <__muldf3+0x248>
    96d0:	db000215 	stw	r12,8(sp)
    96d4:	18803fcc 	andi	r2,r3,255
    96d8:	01c02004 	movi	r7,128
    96dc:	11c00926 	beq	r2,r7,9704 <__muldf3+0x2bc>
    96e0:	008000c4 	movi	r2,3
    96e4:	d9000415 	stw	r4,16(sp)
    96e8:	d8c00315 	stw	r3,12(sp)
    96ec:	d8800015 	stw	r2,0(sp)
    96f0:	d809883a 	mov	r4,sp
    96f4:	003f7006 	br	94b8 <__muldf3+0x70>
    96f8:	0011883a 	mov	r8,zero
    96fc:	00c00044 	movi	r3,1
    9700:	003fb606 	br	95dc <__muldf3+0x194>
    9704:	19c0400c 	andi	r7,r3,256
    9708:	383ff51e 	bne	r7,zero,96e0 <__muldf3+0x298>
    970c:	314ab03a 	or	r5,r6,r5
    9710:	283ff326 	beq	r5,zero,96e0 <__muldf3+0x298>
    9714:	1885883a 	add	r2,r3,r2
    9718:	10cb803a 	cmpltu	r5,r2,r3
    971c:	00ffc004 	movi	r3,-256
    9720:	10c6703a 	and	r3,r2,r3
    9724:	2909883a 	add	r4,r5,r4
    9728:	003fed06 	br	96e0 <__muldf3+0x298>

0000972c <__divdf3>:
    972c:	defff104 	addi	sp,sp,-60
    9730:	d9000c15 	stw	r4,48(sp)
    9734:	d9400d15 	stw	r5,52(sp)
    9738:	d9000c04 	addi	r4,sp,48
    973c:	d9400504 	addi	r5,sp,20
    9740:	dfc00e15 	stw	ra,56(sp)
    9744:	d9800a15 	stw	r6,40(sp)
    9748:	d9c00b15 	stw	r7,44(sp)
    974c:	000a1600 	call	a160 <__unpack_d>
    9750:	d9000a04 	addi	r4,sp,40
    9754:	d80b883a 	mov	r5,sp
    9758:	000a1600 	call	a160 <__unpack_d>
    975c:	d8c00517 	ldw	r3,20(sp)
    9760:	00800044 	movi	r2,1
    9764:	10c00536 	bltu	r2,r3,977c <__divdf3+0x50>
    9768:	d9000504 	addi	r4,sp,20
    976c:	0009f3c0 	call	9f3c <__pack_d>
    9770:	dfc00e17 	ldw	ra,56(sp)
    9774:	dec00f04 	addi	sp,sp,60
    9778:	f800283a 	ret
    977c:	d9000017 	ldw	r4,0(sp)
    9780:	11000536 	bltu	r2,r4,9798 <__divdf3+0x6c>
    9784:	d809883a 	mov	r4,sp
    9788:	0009f3c0 	call	9f3c <__pack_d>
    978c:	dfc00e17 	ldw	ra,56(sp)
    9790:	dec00f04 	addi	sp,sp,60
    9794:	f800283a 	ret
    9798:	d9800617 	ldw	r6,24(sp)
    979c:	d9400117 	ldw	r5,4(sp)
    97a0:	00800104 	movi	r2,4
    97a4:	314af03a 	xor	r5,r6,r5
    97a8:	d9400615 	stw	r5,24(sp)
    97ac:	18800226 	beq	r3,r2,97b8 <__divdf3+0x8c>
    97b0:	01400084 	movi	r5,2
    97b4:	1940041e 	bne	r3,r5,97c8 <__divdf3+0x9c>
    97b8:	193feb1e 	bne	r3,r4,9768 <__divdf3+0x3c>
    97bc:	01000074 	movhi	r4,1
    97c0:	2134f804 	addi	r4,r4,-11296
    97c4:	003fe906 	br	976c <__divdf3+0x40>
    97c8:	20803326 	beq	r4,r2,9898 <__divdf3+0x16c>
    97cc:	21403726 	beq	r4,r5,98ac <__divdf3+0x180>
    97d0:	d8800217 	ldw	r2,8(sp)
    97d4:	d9000717 	ldw	r4,28(sp)
    97d8:	d8c00917 	ldw	r3,36(sp)
    97dc:	da000417 	ldw	r8,16(sp)
    97e0:	2089c83a 	sub	r4,r4,r2
    97e4:	d9000715 	stw	r4,28(sp)
    97e8:	d8800817 	ldw	r2,32(sp)
    97ec:	dbc00317 	ldw	r15,12(sp)
    97f0:	1a000236 	bltu	r3,r8,97fc <__divdf3+0xd0>
    97f4:	40c0081e 	bne	r8,r3,9818 <__divdf3+0xec>
    97f8:	13c0072e 	bgeu	r2,r15,9818 <__divdf3+0xec>
    97fc:	108b883a 	add	r5,r2,r2
    9800:	288d803a 	cmpltu	r6,r5,r2
    9804:	18c7883a 	add	r3,r3,r3
    9808:	213fffc4 	addi	r4,r4,-1
    980c:	2805883a 	mov	r2,r5
    9810:	30c7883a 	add	r3,r6,r3
    9814:	d9000715 	stw	r4,28(sp)
    9818:	01400f44 	movi	r5,61
    981c:	000f883a 	mov	r7,zero
    9820:	01040034 	movhi	r4,4096
    9824:	0019883a 	mov	r12,zero
    9828:	001b883a 	mov	r13,zero
    982c:	201697fa 	slli	r11,r4,31
    9830:	3814d07a 	srli	r10,r7,1
    9834:	297fffc4 	addi	r5,r5,-1
    9838:	1a000936 	bltu	r3,r8,9860 <__divdf3+0x134>
    983c:	13cdc83a 	sub	r6,r2,r15
    9840:	1193803a 	cmpltu	r9,r2,r6
    9844:	1a1dc83a 	sub	r14,r3,r8
    9848:	40c0011e 	bne	r8,r3,9850 <__divdf3+0x124>
    984c:	13c00436 	bltu	r2,r15,9860 <__divdf3+0x134>
    9850:	3005883a 	mov	r2,r6
    9854:	7247c83a 	sub	r3,r14,r9
    9858:	61d8b03a 	or	r12,r12,r7
    985c:	691ab03a 	or	r13,r13,r4
    9860:	108d883a 	add	r6,r2,r2
    9864:	3093803a 	cmpltu	r9,r6,r2
    9868:	18c7883a 	add	r3,r3,r3
    986c:	5a8eb03a 	or	r7,r11,r10
    9870:	2008d07a 	srli	r4,r4,1
    9874:	3005883a 	mov	r2,r6
    9878:	48c7883a 	add	r3,r9,r3
    987c:	283feb1e 	bne	r5,zero,982c <__divdf3+0x100>
    9880:	61003fcc 	andi	r4,r12,255
    9884:	01402004 	movi	r5,128
    9888:	21400b26 	beq	r4,r5,98b8 <__divdf3+0x18c>
    988c:	db000815 	stw	r12,32(sp)
    9890:	db400915 	stw	r13,36(sp)
    9894:	003fb406 	br	9768 <__divdf3+0x3c>
    9898:	d8000815 	stw	zero,32(sp)
    989c:	d8000915 	stw	zero,36(sp)
    98a0:	d8000715 	stw	zero,28(sp)
    98a4:	d9000504 	addi	r4,sp,20
    98a8:	003fb006 	br	976c <__divdf3+0x40>
    98ac:	d8800515 	stw	r2,20(sp)
    98b0:	d9000504 	addi	r4,sp,20
    98b4:	003fad06 	br	976c <__divdf3+0x40>
    98b8:	6140400c 	andi	r5,r12,256
    98bc:	283ff31e 	bne	r5,zero,988c <__divdf3+0x160>
    98c0:	30c4b03a 	or	r2,r6,r3
    98c4:	103ff126 	beq	r2,zero,988c <__divdf3+0x160>
    98c8:	6109883a 	add	r4,r12,r4
    98cc:	2305803a 	cmpltu	r2,r4,r12
    98d0:	033fc004 	movi	r12,-256
    98d4:	2318703a 	and	r12,r4,r12
    98d8:	135b883a 	add	r13,r2,r13
    98dc:	003feb06 	br	988c <__divdf3+0x160>

000098e0 <__eqdf2>:
    98e0:	defff104 	addi	sp,sp,-60
    98e4:	d9000c15 	stw	r4,48(sp)
    98e8:	d9400d15 	stw	r5,52(sp)
    98ec:	d9000c04 	addi	r4,sp,48
    98f0:	d9400504 	addi	r5,sp,20
    98f4:	dfc00e15 	stw	ra,56(sp)
    98f8:	d9800a15 	stw	r6,40(sp)
    98fc:	d9c00b15 	stw	r7,44(sp)
    9900:	000a1600 	call	a160 <__unpack_d>
    9904:	d9000a04 	addi	r4,sp,40
    9908:	d80b883a 	mov	r5,sp
    990c:	000a1600 	call	a160 <__unpack_d>
    9910:	d8c00517 	ldw	r3,20(sp)
    9914:	00800044 	movi	r2,1
    9918:	10c0052e 	bgeu	r2,r3,9930 <__eqdf2+0x50>
    991c:	d8c00017 	ldw	r3,0(sp)
    9920:	10c0032e 	bgeu	r2,r3,9930 <__eqdf2+0x50>
    9924:	d9000504 	addi	r4,sp,20
    9928:	d80b883a 	mov	r5,sp
    992c:	000a2640 	call	a264 <__fpcmp_parts_d>
    9930:	dfc00e17 	ldw	ra,56(sp)
    9934:	dec00f04 	addi	sp,sp,60
    9938:	f800283a 	ret

0000993c <__nedf2>:
    993c:	defff104 	addi	sp,sp,-60
    9940:	d9000c15 	stw	r4,48(sp)
    9944:	d9400d15 	stw	r5,52(sp)
    9948:	d9000c04 	addi	r4,sp,48
    994c:	d9400504 	addi	r5,sp,20
    9950:	dfc00e15 	stw	ra,56(sp)
    9954:	d9800a15 	stw	r6,40(sp)
    9958:	d9c00b15 	stw	r7,44(sp)
    995c:	000a1600 	call	a160 <__unpack_d>
    9960:	d9000a04 	addi	r4,sp,40
    9964:	d80b883a 	mov	r5,sp
    9968:	000a1600 	call	a160 <__unpack_d>
    996c:	d8c00517 	ldw	r3,20(sp)
    9970:	00800044 	movi	r2,1
    9974:	10c0052e 	bgeu	r2,r3,998c <__nedf2+0x50>
    9978:	d8c00017 	ldw	r3,0(sp)
    997c:	10c0032e 	bgeu	r2,r3,998c <__nedf2+0x50>
    9980:	d9000504 	addi	r4,sp,20
    9984:	d80b883a 	mov	r5,sp
    9988:	000a2640 	call	a264 <__fpcmp_parts_d>
    998c:	dfc00e17 	ldw	ra,56(sp)
    9990:	dec00f04 	addi	sp,sp,60
    9994:	f800283a 	ret

00009998 <__gtdf2>:
    9998:	defff104 	addi	sp,sp,-60
    999c:	d9000c15 	stw	r4,48(sp)
    99a0:	d9400d15 	stw	r5,52(sp)
    99a4:	d9000c04 	addi	r4,sp,48
    99a8:	d9400504 	addi	r5,sp,20
    99ac:	dfc00e15 	stw	ra,56(sp)
    99b0:	d9800a15 	stw	r6,40(sp)
    99b4:	d9c00b15 	stw	r7,44(sp)
    99b8:	000a1600 	call	a160 <__unpack_d>
    99bc:	d9000a04 	addi	r4,sp,40
    99c0:	d80b883a 	mov	r5,sp
    99c4:	000a1600 	call	a160 <__unpack_d>
    99c8:	d8c00517 	ldw	r3,20(sp)
    99cc:	00800044 	movi	r2,1
    99d0:	10c0082e 	bgeu	r2,r3,99f4 <__gtdf2+0x5c>
    99d4:	d8c00017 	ldw	r3,0(sp)
    99d8:	10c0062e 	bgeu	r2,r3,99f4 <__gtdf2+0x5c>
    99dc:	d9000504 	addi	r4,sp,20
    99e0:	d80b883a 	mov	r5,sp
    99e4:	000a2640 	call	a264 <__fpcmp_parts_d>
    99e8:	dfc00e17 	ldw	ra,56(sp)
    99ec:	dec00f04 	addi	sp,sp,60
    99f0:	f800283a 	ret
    99f4:	00bfffc4 	movi	r2,-1
    99f8:	003ffb06 	br	99e8 <__gtdf2+0x50>

000099fc <__gedf2>:
    99fc:	defff104 	addi	sp,sp,-60
    9a00:	d9000c15 	stw	r4,48(sp)
    9a04:	d9400d15 	stw	r5,52(sp)
    9a08:	d9000c04 	addi	r4,sp,48
    9a0c:	d9400504 	addi	r5,sp,20
    9a10:	dfc00e15 	stw	ra,56(sp)
    9a14:	d9800a15 	stw	r6,40(sp)
    9a18:	d9c00b15 	stw	r7,44(sp)
    9a1c:	000a1600 	call	a160 <__unpack_d>
    9a20:	d9000a04 	addi	r4,sp,40
    9a24:	d80b883a 	mov	r5,sp
    9a28:	000a1600 	call	a160 <__unpack_d>
    9a2c:	d8c00517 	ldw	r3,20(sp)
    9a30:	00800044 	movi	r2,1
    9a34:	10c0082e 	bgeu	r2,r3,9a58 <__gedf2+0x5c>
    9a38:	d8c00017 	ldw	r3,0(sp)
    9a3c:	10c0062e 	bgeu	r2,r3,9a58 <__gedf2+0x5c>
    9a40:	d9000504 	addi	r4,sp,20
    9a44:	d80b883a 	mov	r5,sp
    9a48:	000a2640 	call	a264 <__fpcmp_parts_d>
    9a4c:	dfc00e17 	ldw	ra,56(sp)
    9a50:	dec00f04 	addi	sp,sp,60
    9a54:	f800283a 	ret
    9a58:	00bfffc4 	movi	r2,-1
    9a5c:	003ffb06 	br	9a4c <__gedf2+0x50>

00009a60 <__ltdf2>:
    9a60:	defff104 	addi	sp,sp,-60
    9a64:	d9000c15 	stw	r4,48(sp)
    9a68:	d9400d15 	stw	r5,52(sp)
    9a6c:	d9000c04 	addi	r4,sp,48
    9a70:	d9400504 	addi	r5,sp,20
    9a74:	dfc00e15 	stw	ra,56(sp)
    9a78:	d9800a15 	stw	r6,40(sp)
    9a7c:	d9c00b15 	stw	r7,44(sp)
    9a80:	000a1600 	call	a160 <__unpack_d>
    9a84:	d9000a04 	addi	r4,sp,40
    9a88:	d80b883a 	mov	r5,sp
    9a8c:	000a1600 	call	a160 <__unpack_d>
    9a90:	d8c00517 	ldw	r3,20(sp)
    9a94:	00800044 	movi	r2,1
    9a98:	10c0052e 	bgeu	r2,r3,9ab0 <__ltdf2+0x50>
    9a9c:	d8c00017 	ldw	r3,0(sp)
    9aa0:	10c0032e 	bgeu	r2,r3,9ab0 <__ltdf2+0x50>
    9aa4:	d9000504 	addi	r4,sp,20
    9aa8:	d80b883a 	mov	r5,sp
    9aac:	000a2640 	call	a264 <__fpcmp_parts_d>
    9ab0:	dfc00e17 	ldw	ra,56(sp)
    9ab4:	dec00f04 	addi	sp,sp,60
    9ab8:	f800283a 	ret

00009abc <__floatsidf>:
    9abc:	2004d7fa 	srli	r2,r4,31
    9ac0:	defff904 	addi	sp,sp,-28
    9ac4:	00c000c4 	movi	r3,3
    9ac8:	dfc00615 	stw	ra,24(sp)
    9acc:	dc000515 	stw	r16,20(sp)
    9ad0:	d8c00015 	stw	r3,0(sp)
    9ad4:	d8800115 	stw	r2,4(sp)
    9ad8:	2000081e 	bne	r4,zero,9afc <__floatsidf+0x40>
    9adc:	00800084 	movi	r2,2
    9ae0:	d8800015 	stw	r2,0(sp)
    9ae4:	d809883a 	mov	r4,sp
    9ae8:	0009f3c0 	call	9f3c <__pack_d>
    9aec:	dfc00617 	ldw	ra,24(sp)
    9af0:	dc000517 	ldw	r16,20(sp)
    9af4:	dec00704 	addi	sp,sp,28
    9af8:	f800283a 	ret
    9afc:	00c00f04 	movi	r3,60
    9b00:	d8c00215 	stw	r3,8(sp)
    9b04:	10000f1e 	bne	r2,zero,9b44 <__floatsidf+0x88>
    9b08:	2021883a 	mov	r16,r4
    9b0c:	8009883a 	mov	r4,r16
    9b10:	0009e900 	call	9e90 <__clzsi2>
    9b14:	11000744 	addi	r4,r2,29
    9b18:	0100110e 	bge	zero,r4,9b60 <__floatsidf+0xa4>
    9b1c:	10ffff44 	addi	r3,r2,-3
    9b20:	18001216 	blt	r3,zero,9b6c <__floatsidf+0xb0>
    9b24:	80c6983a 	sll	r3,r16,r3
    9b28:	0009883a 	mov	r4,zero
    9b2c:	014007c4 	movi	r5,31
    9b30:	2885c83a 	sub	r2,r5,r2
    9b34:	d9000315 	stw	r4,12(sp)
    9b38:	d8c00415 	stw	r3,16(sp)
    9b3c:	d8800215 	stw	r2,8(sp)
    9b40:	003fe806 	br	9ae4 <__floatsidf+0x28>
    9b44:	00a00034 	movhi	r2,32768
    9b48:	20800e26 	beq	r4,r2,9b84 <__floatsidf+0xc8>
    9b4c:	0121c83a 	sub	r16,zero,r4
    9b50:	8009883a 	mov	r4,r16
    9b54:	0009e900 	call	9e90 <__clzsi2>
    9b58:	11000744 	addi	r4,r2,29
    9b5c:	013fef16 	blt	zero,r4,9b1c <__floatsidf+0x60>
    9b60:	dc000315 	stw	r16,12(sp)
    9b64:	d8000415 	stw	zero,16(sp)
    9b68:	003fde06 	br	9ae4 <__floatsidf+0x28>
    9b6c:	800ad07a 	srli	r5,r16,1
    9b70:	00c007c4 	movi	r3,31
    9b74:	1907c83a 	sub	r3,r3,r4
    9b78:	28c6d83a 	srl	r3,r5,r3
    9b7c:	8108983a 	sll	r4,r16,r4
    9b80:	003fea06 	br	9b2c <__floatsidf+0x70>
    9b84:	0005883a 	mov	r2,zero
    9b88:	00f07834 	movhi	r3,49632
    9b8c:	003fd706 	br	9aec <__floatsidf+0x30>

00009b90 <__fixdfsi>:
    9b90:	defff804 	addi	sp,sp,-32
    9b94:	d9000515 	stw	r4,20(sp)
    9b98:	d9400615 	stw	r5,24(sp)
    9b9c:	d9000504 	addi	r4,sp,20
    9ba0:	d80b883a 	mov	r5,sp
    9ba4:	dfc00715 	stw	ra,28(sp)
    9ba8:	000a1600 	call	a160 <__unpack_d>
    9bac:	d8800017 	ldw	r2,0(sp)
    9bb0:	00c00084 	movi	r3,2
    9bb4:	10c01c26 	beq	r2,r3,9c28 <__fixdfsi+0x98>
    9bb8:	00c00044 	movi	r3,1
    9bbc:	18801a2e 	bgeu	r3,r2,9c28 <__fixdfsi+0x98>
    9bc0:	00c00104 	movi	r3,4
    9bc4:	10c01126 	beq	r2,r3,9c0c <__fixdfsi+0x7c>
    9bc8:	d8800217 	ldw	r2,8(sp)
    9bcc:	10001616 	blt	r2,zero,9c28 <__fixdfsi+0x98>
    9bd0:	00c00784 	movi	r3,30
    9bd4:	18800d16 	blt	r3,r2,9c0c <__fixdfsi+0x7c>
    9bd8:	00c00f04 	movi	r3,60
    9bdc:	1885c83a 	sub	r2,r3,r2
    9be0:	10fff804 	addi	r3,r2,-32
    9be4:	d9400317 	ldw	r5,12(sp)
    9be8:	d9000417 	ldw	r4,16(sp)
    9bec:	18001616 	blt	r3,zero,9c48 <__fixdfsi+0xb8>
    9bf0:	20c4d83a 	srl	r2,r4,r3
    9bf4:	d8c00117 	ldw	r3,4(sp)
    9bf8:	18000126 	beq	r3,zero,9c00 <__fixdfsi+0x70>
    9bfc:	0085c83a 	sub	r2,zero,r2
    9c00:	dfc00717 	ldw	ra,28(sp)
    9c04:	dec00804 	addi	sp,sp,32
    9c08:	f800283a 	ret
    9c0c:	d8800117 	ldw	r2,4(sp)
    9c10:	1000091e 	bne	r2,zero,9c38 <__fixdfsi+0xa8>
    9c14:	00a00034 	movhi	r2,32768
    9c18:	10bfffc4 	addi	r2,r2,-1
    9c1c:	dfc00717 	ldw	ra,28(sp)
    9c20:	dec00804 	addi	sp,sp,32
    9c24:	f800283a 	ret
    9c28:	0005883a 	mov	r2,zero
    9c2c:	dfc00717 	ldw	ra,28(sp)
    9c30:	dec00804 	addi	sp,sp,32
    9c34:	f800283a 	ret
    9c38:	00a00034 	movhi	r2,32768
    9c3c:	dfc00717 	ldw	ra,28(sp)
    9c40:	dec00804 	addi	sp,sp,32
    9c44:	f800283a 	ret
    9c48:	2008907a 	slli	r4,r4,1
    9c4c:	018007c4 	movi	r6,31
    9c50:	308dc83a 	sub	r6,r6,r2
    9c54:	2188983a 	sll	r4,r4,r6
    9c58:	2884d83a 	srl	r2,r5,r2
    9c5c:	2084b03a 	or	r2,r4,r2
    9c60:	003fe406 	br	9bf4 <__fixdfsi+0x64>

00009c64 <__floatunsidf>:
    9c64:	defff904 	addi	sp,sp,-28
    9c68:	dc000515 	stw	r16,20(sp)
    9c6c:	dfc00615 	stw	ra,24(sp)
    9c70:	d8000115 	stw	zero,4(sp)
    9c74:	2021883a 	mov	r16,r4
    9c78:	20001726 	beq	r4,zero,9cd8 <__floatunsidf+0x74>
    9c7c:	008000c4 	movi	r2,3
    9c80:	d8800015 	stw	r2,0(sp)
    9c84:	00800f04 	movi	r2,60
    9c88:	d8800215 	stw	r2,8(sp)
    9c8c:	0009e900 	call	9e90 <__clzsi2>
    9c90:	10c00744 	addi	r3,r2,29
    9c94:	18001816 	blt	r3,zero,9cf8 <__floatunsidf+0x94>
    9c98:	18002d26 	beq	r3,zero,9d50 <__floatunsidf+0xec>
    9c9c:	113fff44 	addi	r4,r2,-3
    9ca0:	20002e16 	blt	r4,zero,9d5c <__floatunsidf+0xf8>
    9ca4:	8108983a 	sll	r4,r16,r4
    9ca8:	0021883a 	mov	r16,zero
    9cac:	014007c4 	movi	r5,31
    9cb0:	2885c83a 	sub	r2,r5,r2
    9cb4:	dc000315 	stw	r16,12(sp)
    9cb8:	d9000415 	stw	r4,16(sp)
    9cbc:	d8800215 	stw	r2,8(sp)
    9cc0:	d809883a 	mov	r4,sp
    9cc4:	0009f3c0 	call	9f3c <__pack_d>
    9cc8:	dfc00617 	ldw	ra,24(sp)
    9ccc:	dc000517 	ldw	r16,20(sp)
    9cd0:	dec00704 	addi	sp,sp,28
    9cd4:	f800283a 	ret
    9cd8:	00800084 	movi	r2,2
    9cdc:	d809883a 	mov	r4,sp
    9ce0:	d8800015 	stw	r2,0(sp)
    9ce4:	0009f3c0 	call	9f3c <__pack_d>
    9ce8:	dfc00617 	ldw	ra,24(sp)
    9cec:	dc000517 	ldw	r16,20(sp)
    9cf0:	dec00704 	addi	sp,sp,28
    9cf4:	f800283a 	ret
    9cf8:	00c7c83a 	sub	r3,zero,r3
    9cfc:	193ff804 	addi	r4,r3,-32
    9d00:	20001c16 	blt	r4,zero,9d74 <__floatunsidf+0x110>
    9d04:	000b883a 	mov	r5,zero
    9d08:	2009d7fa 	srai	r4,r4,31
    9d0c:	80c6d83a 	srl	r3,r16,r3
    9d10:	297fffc4 	addi	r5,r5,-1
    9d14:	2c20703a 	and	r16,r5,r16
    9d18:	8020c03a 	cmpne	r16,r16,zero
    9d1c:	1906703a 	and	r3,r3,r4
    9d20:	010007c4 	movi	r4,31
    9d24:	80c6b03a 	or	r3,r16,r3
    9d28:	2085c83a 	sub	r2,r4,r2
    9d2c:	d809883a 	mov	r4,sp
    9d30:	d8c00315 	stw	r3,12(sp)
    9d34:	d8000415 	stw	zero,16(sp)
    9d38:	d8800215 	stw	r2,8(sp)
    9d3c:	0009f3c0 	call	9f3c <__pack_d>
    9d40:	dfc00617 	ldw	ra,24(sp)
    9d44:	dc000517 	ldw	r16,20(sp)
    9d48:	dec00704 	addi	sp,sp,28
    9d4c:	f800283a 	ret
    9d50:	dc000315 	stw	r16,12(sp)
    9d54:	d8000415 	stw	zero,16(sp)
    9d58:	003fd906 	br	9cc0 <__floatunsidf+0x5c>
    9d5c:	800ad07a 	srli	r5,r16,1
    9d60:	010007c4 	movi	r4,31
    9d64:	20c9c83a 	sub	r4,r4,r3
    9d68:	2908d83a 	srl	r4,r5,r4
    9d6c:	80e0983a 	sll	r16,r16,r3
    9d70:	003fce06 	br	9cac <__floatunsidf+0x48>
    9d74:	01400044 	movi	r5,1
    9d78:	28ca983a 	sll	r5,r5,r3
    9d7c:	003fe206 	br	9d08 <__floatunsidf+0xa4>

00009d80 <__muldi3>:
    9d80:	defff604 	addi	sp,sp,-40
    9d84:	dd400515 	stw	r21,20(sp)
    9d88:	dd000415 	stw	r20,16(sp)
    9d8c:	257fffcc 	andi	r21,r4,65535
    9d90:	353fffcc 	andi	r20,r6,65535
    9d94:	dcc00315 	stw	r19,12(sp)
    9d98:	3026d43a 	srli	r19,r6,16
    9d9c:	dd800615 	stw	r22,24(sp)
    9da0:	dc800215 	stw	r18,8(sp)
    9da4:	dc400115 	stw	r17,4(sp)
    9da8:	2024d43a 	srli	r18,r4,16
    9dac:	2023883a 	mov	r17,r4
    9db0:	282d883a 	mov	r22,r5
    9db4:	a009883a 	mov	r4,r20
    9db8:	a80b883a 	mov	r5,r21
    9dbc:	dfc00915 	stw	ra,36(sp)
    9dc0:	df000815 	stw	fp,32(sp)
    9dc4:	ddc00715 	stw	r23,28(sp)
    9dc8:	3839883a 	mov	fp,r7
    9dcc:	dc000015 	stw	r16,0(sp)
    9dd0:	3021883a 	mov	r16,r6
    9dd4:	0000e440 	call	e44 <__mulsi3>
    9dd8:	a80b883a 	mov	r5,r21
    9ddc:	9809883a 	mov	r4,r19
    9de0:	102f883a 	mov	r23,r2
    9de4:	0000e440 	call	e44 <__mulsi3>
    9de8:	a009883a 	mov	r4,r20
    9dec:	900b883a 	mov	r5,r18
    9df0:	102b883a 	mov	r21,r2
    9df4:	0000e440 	call	e44 <__mulsi3>
    9df8:	9809883a 	mov	r4,r19
    9dfc:	900b883a 	mov	r5,r18
    9e00:	1029883a 	mov	r20,r2
    9e04:	0000e440 	call	e44 <__mulsi3>
    9e08:	1007883a 	mov	r3,r2
    9e0c:	b804d43a 	srli	r2,r23,16
    9e10:	a549883a 	add	r4,r20,r21
    9e14:	2089883a 	add	r4,r4,r2
    9e18:	2500022e 	bgeu	r4,r20,9e24 <__muldi3+0xa4>
    9e1c:	00800074 	movhi	r2,1
    9e20:	1887883a 	add	r3,r3,r2
    9e24:	200cd43a 	srli	r6,r4,16
    9e28:	2004943a 	slli	r2,r4,16
    9e2c:	e00b883a 	mov	r5,fp
    9e30:	8809883a 	mov	r4,r17
    9e34:	bdffffcc 	andi	r23,r23,65535
    9e38:	19a3883a 	add	r17,r3,r6
    9e3c:	15ef883a 	add	r23,r2,r23
    9e40:	0000e440 	call	e44 <__mulsi3>
    9e44:	8009883a 	mov	r4,r16
    9e48:	b00b883a 	mov	r5,r22
    9e4c:	1025883a 	mov	r18,r2
    9e50:	0000e440 	call	e44 <__mulsi3>
    9e54:	9085883a 	add	r2,r18,r2
    9e58:	1447883a 	add	r3,r2,r17
    9e5c:	b805883a 	mov	r2,r23
    9e60:	dfc00917 	ldw	ra,36(sp)
    9e64:	df000817 	ldw	fp,32(sp)
    9e68:	ddc00717 	ldw	r23,28(sp)
    9e6c:	dd800617 	ldw	r22,24(sp)
    9e70:	dd400517 	ldw	r21,20(sp)
    9e74:	dd000417 	ldw	r20,16(sp)
    9e78:	dcc00317 	ldw	r19,12(sp)
    9e7c:	dc800217 	ldw	r18,8(sp)
    9e80:	dc400117 	ldw	r17,4(sp)
    9e84:	dc000017 	ldw	r16,0(sp)
    9e88:	dec00a04 	addi	sp,sp,40
    9e8c:	f800283a 	ret

00009e90 <__clzsi2>:
    9e90:	00bfffd4 	movui	r2,65535
    9e94:	11000b36 	bltu	r2,r4,9ec4 <__clzsi2+0x34>
    9e98:	00803fc4 	movi	r2,255
    9e9c:	11001e2e 	bgeu	r2,r4,9f18 <__clzsi2+0x88>
    9ea0:	00c00204 	movi	r3,8
    9ea4:	20c8d83a 	srl	r4,r4,r3
    9ea8:	00c00074 	movhi	r3,1
    9eac:	18f4fd04 	addi	r3,r3,-11276
    9eb0:	00800604 	movi	r2,24
    9eb4:	1909883a 	add	r4,r3,r4
    9eb8:	20c00003 	ldbu	r3,0(r4)
    9ebc:	10c5c83a 	sub	r2,r2,r3
    9ec0:	f800283a 	ret
    9ec4:	00804034 	movhi	r2,256
    9ec8:	10bfffc4 	addi	r2,r2,-1
    9ecc:	11000936 	bltu	r2,r4,9ef4 <__clzsi2+0x64>
    9ed0:	00800404 	movi	r2,16
    9ed4:	1007883a 	mov	r3,r2
    9ed8:	20c8d83a 	srl	r4,r4,r3
    9edc:	00c00074 	movhi	r3,1
    9ee0:	18f4fd04 	addi	r3,r3,-11276
    9ee4:	1909883a 	add	r4,r3,r4
    9ee8:	20c00003 	ldbu	r3,0(r4)
    9eec:	10c5c83a 	sub	r2,r2,r3
    9ef0:	f800283a 	ret
    9ef4:	00c00604 	movi	r3,24
    9ef8:	20c8d83a 	srl	r4,r4,r3
    9efc:	00c00074 	movhi	r3,1
    9f00:	18f4fd04 	addi	r3,r3,-11276
    9f04:	00800204 	movi	r2,8
    9f08:	1909883a 	add	r4,r3,r4
    9f0c:	20c00003 	ldbu	r3,0(r4)
    9f10:	10c5c83a 	sub	r2,r2,r3
    9f14:	f800283a 	ret
    9f18:	0007883a 	mov	r3,zero
    9f1c:	20c8d83a 	srl	r4,r4,r3
    9f20:	00c00074 	movhi	r3,1
    9f24:	18f4fd04 	addi	r3,r3,-11276
    9f28:	00800804 	movi	r2,32
    9f2c:	1909883a 	add	r4,r3,r4
    9f30:	20c00003 	ldbu	r3,0(r4)
    9f34:	10c5c83a 	sub	r2,r2,r3
    9f38:	f800283a 	ret

00009f3c <__pack_d>:
    9f3c:	20800017 	ldw	r2,0(r4)
    9f40:	defff804 	addi	sp,sp,-32
    9f44:	dcc00315 	stw	r19,12(sp)
    9f48:	dc800215 	stw	r18,8(sp)
    9f4c:	dfc00715 	stw	ra,28(sp)
    9f50:	dd800615 	stw	r22,24(sp)
    9f54:	dd400515 	stw	r21,20(sp)
    9f58:	dd000415 	stw	r20,16(sp)
    9f5c:	dc400115 	stw	r17,4(sp)
    9f60:	dc000015 	stw	r16,0(sp)
    9f64:	04800044 	movi	r18,1
    9f68:	24400317 	ldw	r17,12(r4)
    9f6c:	24000417 	ldw	r16,16(r4)
    9f70:	24c00117 	ldw	r19,4(r4)
    9f74:	9080422e 	bgeu	r18,r2,a080 <__pack_d+0x144>
    9f78:	00c00104 	movi	r3,4
    9f7c:	10c03c26 	beq	r2,r3,a070 <__pack_d+0x134>
    9f80:	00c00084 	movi	r3,2
    9f84:	10c01926 	beq	r2,r3,9fec <__pack_d+0xb0>
    9f88:	8c04b03a 	or	r2,r17,r16
    9f8c:	10001726 	beq	r2,zero,9fec <__pack_d+0xb0>
    9f90:	21000217 	ldw	r4,8(r4)
    9f94:	00bf0084 	movi	r2,-1022
    9f98:	20804016 	blt	r4,r2,a09c <__pack_d+0x160>
    9f9c:	0080ffc4 	movi	r2,1023
    9fa0:	11003316 	blt	r2,r4,a070 <__pack_d+0x134>
    9fa4:	88803fcc 	andi	r2,r17,255
    9fa8:	00c02004 	movi	r3,128
    9fac:	10c02926 	beq	r2,r3,a054 <__pack_d+0x118>
    9fb0:	88801fc4 	addi	r2,r17,127
    9fb4:	1463803a 	cmpltu	r17,r2,r17
    9fb8:	8c21883a 	add	r16,r17,r16
    9fbc:	1023883a 	mov	r17,r2
    9fc0:	00880034 	movhi	r2,8192
    9fc4:	10bfffc4 	addi	r2,r2,-1
    9fc8:	14001c36 	bltu	r2,r16,a03c <__pack_d+0x100>
    9fcc:	2100ffc4 	addi	r4,r4,1023
    9fd0:	8006963a 	slli	r3,r16,24
    9fd4:	8804d23a 	srli	r2,r17,8
    9fd8:	8020913a 	slli	r16,r16,4
    9fdc:	2101ffcc 	andi	r4,r4,2047
    9fe0:	1884b03a 	or	r2,r3,r2
    9fe4:	8020d33a 	srli	r16,r16,12
    9fe8:	00000306 	br	9ff8 <__pack_d+0xbc>
    9fec:	0009883a 	mov	r4,zero
    9ff0:	0005883a 	mov	r2,zero
    9ff4:	0021883a 	mov	r16,zero
    9ff8:	2008953a 	slli	r4,r4,20
    9ffc:	982697fa 	slli	r19,r19,31
    a000:	00c00434 	movhi	r3,16
    a004:	18ffffc4 	addi	r3,r3,-1
    a008:	80e0703a 	and	r16,r16,r3
    a00c:	8106b03a 	or	r3,r16,r4
    a010:	1cc6b03a 	or	r3,r3,r19
    a014:	dfc00717 	ldw	ra,28(sp)
    a018:	dd800617 	ldw	r22,24(sp)
    a01c:	dd400517 	ldw	r21,20(sp)
    a020:	dd000417 	ldw	r20,16(sp)
    a024:	dcc00317 	ldw	r19,12(sp)
    a028:	dc800217 	ldw	r18,8(sp)
    a02c:	dc400117 	ldw	r17,4(sp)
    a030:	dc000017 	ldw	r16,0(sp)
    a034:	dec00804 	addi	sp,sp,32
    a038:	f800283a 	ret
    a03c:	800697fa 	slli	r3,r16,31
    a040:	8804d07a 	srli	r2,r17,1
    a044:	21010004 	addi	r4,r4,1024
    a048:	8020d07a 	srli	r16,r16,1
    a04c:	18a2b03a 	or	r17,r3,r2
    a050:	003fdf06 	br	9fd0 <__pack_d+0x94>
    a054:	88c0400c 	andi	r3,r17,256
    a058:	183fd926 	beq	r3,zero,9fc0 <__pack_d+0x84>
    a05c:	8885883a 	add	r2,r17,r2
    a060:	1463803a 	cmpltu	r17,r2,r17
    a064:	8c21883a 	add	r16,r17,r16
    a068:	1023883a 	mov	r17,r2
    a06c:	003fd406 	br	9fc0 <__pack_d+0x84>
    a070:	0101ffc4 	movi	r4,2047
    a074:	0005883a 	mov	r2,zero
    a078:	0021883a 	mov	r16,zero
    a07c:	003fde06 	br	9ff8 <__pack_d+0xbc>
    a080:	84000234 	orhi	r16,r16,8
    a084:	00c00434 	movhi	r3,16
    a088:	18ffffc4 	addi	r3,r3,-1
    a08c:	8805883a 	mov	r2,r17
    a090:	80e0703a 	and	r16,r16,r3
    a094:	0101ffc4 	movi	r4,2047
    a098:	003fd706 	br	9ff8 <__pack_d+0xbc>
    a09c:	1129c83a 	sub	r20,r2,r4
    a0a0:	00800e04 	movi	r2,56
    a0a4:	15002716 	blt	r2,r20,a144 <__pack_d+0x208>
    a0a8:	800b883a 	mov	r5,r16
    a0ac:	a00d883a 	mov	r6,r20
    a0b0:	8809883a 	mov	r4,r17
    a0b4:	000a3340 	call	a334 <__lshrdi3>
    a0b8:	9009883a 	mov	r4,r18
    a0bc:	000b883a 	mov	r5,zero
    a0c0:	a00d883a 	mov	r6,r20
    a0c4:	102d883a 	mov	r22,r2
    a0c8:	182b883a 	mov	r21,r3
    a0cc:	000a3780 	call	a378 <__ashldi3>
    a0d0:	1009003a 	cmpeq	r4,r2,zero
    a0d4:	1907c83a 	sub	r3,r3,r4
    a0d8:	10bfffc4 	addi	r2,r2,-1
    a0dc:	1c20703a 	and	r16,r3,r16
    a0e0:	1444703a 	and	r2,r2,r17
    a0e4:	1404b03a 	or	r2,r2,r16
    a0e8:	1004c03a 	cmpne	r2,r2,zero
    a0ec:	1584b03a 	or	r2,r2,r22
    a0f0:	11003fcc 	andi	r4,r2,255
    a0f4:	01402004 	movi	r5,128
    a0f8:	a807883a 	mov	r3,r21
    a0fc:	2140131e 	bne	r4,r5,a14c <__pack_d+0x210>
    a100:	1140400c 	andi	r5,r2,256
    a104:	28000426 	beq	r5,zero,a118 <__pack_d+0x1dc>
    a108:	1109883a 	add	r4,r2,r4
    a10c:	2085803a 	cmpltu	r2,r4,r2
    a110:	1547883a 	add	r3,r2,r21
    a114:	2005883a 	mov	r2,r4
    a118:	1808963a 	slli	r4,r3,24
    a11c:	1004d23a 	srli	r2,r2,8
    a120:	1820913a 	slli	r16,r3,4
    a124:	01440034 	movhi	r5,4096
    a128:	297fffc4 	addi	r5,r5,-1
    a12c:	2084b03a 	or	r2,r4,r2
    a130:	8020d33a 	srli	r16,r16,12
    a134:	01000044 	movi	r4,1
    a138:	28ffaf36 	bltu	r5,r3,9ff8 <__pack_d+0xbc>
    a13c:	0009883a 	mov	r4,zero
    a140:	003fad06 	br	9ff8 <__pack_d+0xbc>
    a144:	0005883a 	mov	r2,zero
    a148:	0007883a 	mov	r3,zero
    a14c:	11001fc4 	addi	r4,r2,127
    a150:	2085803a 	cmpltu	r2,r4,r2
    a154:	10c7883a 	add	r3,r2,r3
    a158:	2005883a 	mov	r2,r4
    a15c:	003fee06 	br	a118 <__pack_d+0x1dc>

0000a160 <__unpack_d>:
    a160:	21800117 	ldw	r6,4(r4)
    a164:	20c00017 	ldw	r3,0(r4)
    a168:	3004d7fa 	srli	r2,r6,31
    a16c:	3008d53a 	srli	r4,r6,20
    a170:	28800115 	stw	r2,4(r5)
    a174:	2101ffcc 	andi	r4,r4,2047
    a178:	00800434 	movhi	r2,16
    a17c:	10bfffc4 	addi	r2,r2,-1
    a180:	3084703a 	and	r2,r6,r2
    a184:	20001a1e 	bne	r4,zero,a1f0 <__unpack_d+0x90>
    a188:	1888b03a 	or	r4,r3,r2
    a18c:	20002626 	beq	r4,zero,a228 <__unpack_d+0xc8>
    a190:	1808d63a 	srli	r4,r3,24
    a194:	1004923a 	slli	r2,r2,8
    a198:	01bf0084 	movi	r6,-1022
    a19c:	29800215 	stw	r6,8(r5)
    a1a0:	2084b03a 	or	r2,r4,r2
    a1a4:	010000c4 	movi	r4,3
    a1a8:	29000015 	stw	r4,0(r5)
    a1ac:	02040034 	movhi	r8,4096
    a1b0:	423fffc4 	addi	r8,r8,-1
    a1b4:	1806923a 	slli	r3,r3,8
    a1b8:	40801836 	bltu	r8,r2,a21c <__unpack_d+0xbc>
    a1bc:	013f0044 	movi	r4,-1023
    a1c0:	18cd883a 	add	r6,r3,r3
    a1c4:	30c7803a 	cmpltu	r3,r6,r3
    a1c8:	1085883a 	add	r2,r2,r2
    a1cc:	1885883a 	add	r2,r3,r2
    a1d0:	200f883a 	mov	r7,r4
    a1d4:	3007883a 	mov	r3,r6
    a1d8:	213fffc4 	addi	r4,r4,-1
    a1dc:	40bff82e 	bgeu	r8,r2,a1c0 <__unpack_d+0x60>
    a1e0:	29c00215 	stw	r7,8(r5)
    a1e4:	28c00315 	stw	r3,12(r5)
    a1e8:	28800415 	stw	r2,16(r5)
    a1ec:	f800283a 	ret
    a1f0:	01c1ffc4 	movi	r7,2047
    a1f4:	21c00f26 	beq	r4,r7,a234 <__unpack_d+0xd4>
    a1f8:	180cd63a 	srli	r6,r3,24
    a1fc:	1004923a 	slli	r2,r2,8
    a200:	213f0044 	addi	r4,r4,-1023
    a204:	1806923a 	slli	r3,r3,8
    a208:	3084b03a 	or	r2,r6,r2
    a20c:	29000215 	stw	r4,8(r5)
    a210:	010000c4 	movi	r4,3
    a214:	10840034 	orhi	r2,r2,4096
    a218:	29000015 	stw	r4,0(r5)
    a21c:	28c00315 	stw	r3,12(r5)
    a220:	28800415 	stw	r2,16(r5)
    a224:	f800283a 	ret
    a228:	00800084 	movi	r2,2
    a22c:	28800015 	stw	r2,0(r5)
    a230:	f800283a 	ret
    a234:	1888b03a 	or	r4,r3,r2
    a238:	20000526 	beq	r4,zero,a250 <__unpack_d+0xf0>
    a23c:	3180022c 	andhi	r6,r6,8
    a240:	30000626 	beq	r6,zero,a25c <__unpack_d+0xfc>
    a244:	01000044 	movi	r4,1
    a248:	29000015 	stw	r4,0(r5)
    a24c:	003ff306 	br	a21c <__unpack_d+0xbc>
    a250:	00800104 	movi	r2,4
    a254:	28800015 	stw	r2,0(r5)
    a258:	f800283a 	ret
    a25c:	28000015 	stw	zero,0(r5)
    a260:	003fee06 	br	a21c <__unpack_d+0xbc>

0000a264 <__fpcmp_parts_d>:
    a264:	20c00017 	ldw	r3,0(r4)
    a268:	00800044 	movi	r2,1
    a26c:	10c0142e 	bgeu	r2,r3,a2c0 <__fpcmp_parts_d+0x5c>
    a270:	29800017 	ldw	r6,0(r5)
    a274:	1180122e 	bgeu	r2,r6,a2c0 <__fpcmp_parts_d+0x5c>
    a278:	01c00104 	movi	r7,4
    a27c:	19c02826 	beq	r3,r7,a320 <__fpcmp_parts_d+0xbc>
    a280:	31c00926 	beq	r6,r7,a2a8 <__fpcmp_parts_d+0x44>
    a284:	01c00084 	movi	r7,2
    a288:	19c00626 	beq	r3,r7,a2a4 <__fpcmp_parts_d+0x40>
    a28c:	31c00a26 	beq	r6,r7,a2b8 <__fpcmp_parts_d+0x54>
    a290:	20c00117 	ldw	r3,4(r4)
    a294:	29800117 	ldw	r6,4(r5)
    a298:	19800b26 	beq	r3,r6,a2c8 <__fpcmp_parts_d+0x64>
    a29c:	1800041e 	bne	r3,zero,a2b0 <__fpcmp_parts_d+0x4c>
    a2a0:	f800283a 	ret
    a2a4:	30c01a26 	beq	r6,r3,a310 <__fpcmp_parts_d+0xac>
    a2a8:	28800117 	ldw	r2,4(r5)
    a2ac:	1000041e 	bne	r2,zero,a2c0 <__fpcmp_parts_d+0x5c>
    a2b0:	00bfffc4 	movi	r2,-1
    a2b4:	f800283a 	ret
    a2b8:	20800117 	ldw	r2,4(r4)
    a2bc:	103ffc1e 	bne	r2,zero,a2b0 <__fpcmp_parts_d+0x4c>
    a2c0:	00800044 	movi	r2,1
    a2c4:	f800283a 	ret
    a2c8:	21c00217 	ldw	r7,8(r4)
    a2cc:	29800217 	ldw	r6,8(r5)
    a2d0:	31c0020e 	bge	r6,r7,a2dc <__fpcmp_parts_d+0x78>
    a2d4:	183ff61e 	bne	r3,zero,a2b0 <__fpcmp_parts_d+0x4c>
    a2d8:	f800283a 	ret
    a2dc:	39800a16 	blt	r7,r6,a308 <__fpcmp_parts_d+0xa4>
    a2e0:	20800417 	ldw	r2,16(r4)
    a2e4:	29800417 	ldw	r6,16(r5)
    a2e8:	21c00317 	ldw	r7,12(r4)
    a2ec:	29000317 	ldw	r4,12(r5)
    a2f0:	30800936 	bltu	r6,r2,a318 <__fpcmp_parts_d+0xb4>
    a2f4:	1180011e 	bne	r2,r6,a2fc <__fpcmp_parts_d+0x98>
    a2f8:	21c00736 	bltu	r4,r7,a318 <__fpcmp_parts_d+0xb4>
    a2fc:	11800236 	bltu	r2,r6,a308 <__fpcmp_parts_d+0xa4>
    a300:	3080031e 	bne	r6,r2,a310 <__fpcmp_parts_d+0xac>
    a304:	3900022e 	bgeu	r7,r4,a310 <__fpcmp_parts_d+0xac>
    a308:	183fe926 	beq	r3,zero,a2b0 <__fpcmp_parts_d+0x4c>
    a30c:	003fec06 	br	a2c0 <__fpcmp_parts_d+0x5c>
    a310:	0005883a 	mov	r2,zero
    a314:	f800283a 	ret
    a318:	183fe926 	beq	r3,zero,a2c0 <__fpcmp_parts_d+0x5c>
    a31c:	003fe406 	br	a2b0 <__fpcmp_parts_d+0x4c>
    a320:	30ffe51e 	bne	r6,r3,a2b8 <__fpcmp_parts_d+0x54>
    a324:	28c00117 	ldw	r3,4(r5)
    a328:	20800117 	ldw	r2,4(r4)
    a32c:	1885c83a 	sub	r2,r3,r2
    a330:	f800283a 	ret

0000a334 <__lshrdi3>:
    a334:	2005883a 	mov	r2,r4
    a338:	2807883a 	mov	r3,r5
    a33c:	30000826 	beq	r6,zero,a360 <__lshrdi3+0x2c>
    a340:	01000804 	movi	r4,32
    a344:	2189c83a 	sub	r4,r4,r6
    a348:	0100060e 	bge	zero,r4,a364 <__lshrdi3+0x30>
    a34c:	1184d83a 	srl	r2,r2,r6
    a350:	2908983a 	sll	r4,r5,r4
    a354:	298cd83a 	srl	r6,r5,r6
    a358:	2084b03a 	or	r2,r4,r2
    a35c:	3007883a 	mov	r3,r6
    a360:	f800283a 	ret
    a364:	0105c83a 	sub	r2,zero,r4
    a368:	000d883a 	mov	r6,zero
    a36c:	2884d83a 	srl	r2,r5,r2
    a370:	3007883a 	mov	r3,r6
    a374:	003ffa06 	br	a360 <__lshrdi3+0x2c>

0000a378 <__ashldi3>:
    a378:	2005883a 	mov	r2,r4
    a37c:	2807883a 	mov	r3,r5
    a380:	30000826 	beq	r6,zero,a3a4 <__ashldi3+0x2c>
    a384:	01000804 	movi	r4,32
    a388:	2189c83a 	sub	r4,r4,r6
    a38c:	0100060e 	bge	zero,r4,a3a8 <__ashldi3+0x30>
    a390:	1108d83a 	srl	r4,r2,r4
    a394:	2986983a 	sll	r3,r5,r6
    a398:	118c983a 	sll	r6,r2,r6
    a39c:	20c6b03a 	or	r3,r4,r3
    a3a0:	3005883a 	mov	r2,r6
    a3a4:	f800283a 	ret
    a3a8:	0107c83a 	sub	r3,zero,r4
    a3ac:	000d883a 	mov	r6,zero
    a3b0:	10c6983a 	sll	r3,r2,r3
    a3b4:	3005883a 	mov	r2,r6
    a3b8:	003ffa06 	br	a3a4 <__ashldi3+0x2c>

0000a3bc <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
    a3bc:	defff504 	addi	sp,sp,-44
    a3c0:	df000a15 	stw	fp,40(sp)
    a3c4:	df000a04 	addi	fp,sp,40
    a3c8:	e13ffc15 	stw	r4,-16(fp)
    a3cc:	e17ffd15 	stw	r5,-12(fp)
    a3d0:	e1bffe15 	stw	r6,-8(fp)
    a3d4:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
    a3d8:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    a3dc:	00800074 	movhi	r2,1
    a3e0:	10828004 	addi	r2,r2,2560
    a3e4:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
    a3e8:	10003f26 	beq	r2,zero,a4e8 <alt_alarm_start+0x12c>
  {
    if (alarm)
    a3ec:	e0bffc17 	ldw	r2,-16(fp)
    a3f0:	10003b26 	beq	r2,zero,a4e0 <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
    a3f4:	e0bffc17 	ldw	r2,-16(fp)
    a3f8:	e0fffe17 	ldw	r3,-8(fp)
    a3fc:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
    a400:	e0bffc17 	ldw	r2,-16(fp)
    a404:	e0ffff17 	ldw	r3,-4(fp)
    a408:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    a40c:	0005303a 	rdctl	r2,status
    a410:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    a414:	e0fff817 	ldw	r3,-32(fp)
    a418:	00bfff84 	movi	r2,-2
    a41c:	1884703a 	and	r2,r3,r2
    a420:	1001703a 	wrctl	status,r2
  
  return context;
    a424:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
    a428:	e0bff715 	stw	r2,-36(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
    a42c:	00800074 	movhi	r2,1
    a430:	10828104 	addi	r2,r2,2564
    a434:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
    a438:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
    a43c:	e0fffd17 	ldw	r3,-12(fp)
    a440:	e0bff617 	ldw	r2,-40(fp)
    a444:	1885883a 	add	r2,r3,r2
    a448:	10c00044 	addi	r3,r2,1
    a44c:	e0bffc17 	ldw	r2,-16(fp)
    a450:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
    a454:	e0bffc17 	ldw	r2,-16(fp)
    a458:	10c00217 	ldw	r3,8(r2)
    a45c:	e0bff617 	ldw	r2,-40(fp)
    a460:	1880042e 	bgeu	r3,r2,a474 <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
    a464:	e0bffc17 	ldw	r2,-16(fp)
    a468:	00c00044 	movi	r3,1
    a46c:	10c00405 	stb	r3,16(r2)
    a470:	00000206 	br	a47c <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
    a474:	e0bffc17 	ldw	r2,-16(fp)
    a478:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
    a47c:	e0bffc17 	ldw	r2,-16(fp)
    a480:	00c00074 	movhi	r3,1
    a484:	18fbdb04 	addi	r3,r3,-4244
    a488:	e0fff915 	stw	r3,-28(fp)
    a48c:	e0bffa15 	stw	r2,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    a490:	e0bffa17 	ldw	r2,-24(fp)
    a494:	e0fff917 	ldw	r3,-28(fp)
    a498:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
    a49c:	e0bff917 	ldw	r2,-28(fp)
    a4a0:	10c00017 	ldw	r3,0(r2)
    a4a4:	e0bffa17 	ldw	r2,-24(fp)
    a4a8:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    a4ac:	e0bff917 	ldw	r2,-28(fp)
    a4b0:	10800017 	ldw	r2,0(r2)
    a4b4:	e0fffa17 	ldw	r3,-24(fp)
    a4b8:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
    a4bc:	e0bff917 	ldw	r2,-28(fp)
    a4c0:	e0fffa17 	ldw	r3,-24(fp)
    a4c4:	10c00015 	stw	r3,0(r2)
    a4c8:	e0bff717 	ldw	r2,-36(fp)
    a4cc:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    a4d0:	e0bffb17 	ldw	r2,-20(fp)
    a4d4:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
    a4d8:	0005883a 	mov	r2,zero
    a4dc:	00000306 	br	a4ec <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
    a4e0:	00bffa84 	movi	r2,-22
    a4e4:	00000106 	br	a4ec <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
    a4e8:	00bfde84 	movi	r2,-134
  }
}
    a4ec:	e037883a 	mov	sp,fp
    a4f0:	df000017 	ldw	fp,0(sp)
    a4f4:	dec00104 	addi	sp,sp,4
    a4f8:	f800283a 	ret

0000a4fc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    a4fc:	defffe04 	addi	sp,sp,-8
    a500:	dfc00115 	stw	ra,4(sp)
    a504:	df000015 	stw	fp,0(sp)
    a508:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    a50c:	00800074 	movhi	r2,1
    a510:	10bbd904 	addi	r2,r2,-4252
    a514:	10800017 	ldw	r2,0(r2)
    a518:	10000526 	beq	r2,zero,a530 <alt_get_errno+0x34>
    a51c:	00800074 	movhi	r2,1
    a520:	10bbd904 	addi	r2,r2,-4252
    a524:	10800017 	ldw	r2,0(r2)
    a528:	103ee83a 	callr	r2
    a52c:	00000206 	br	a538 <alt_get_errno+0x3c>
    a530:	00800074 	movhi	r2,1
    a534:	10827904 	addi	r2,r2,2532
}
    a538:	e037883a 	mov	sp,fp
    a53c:	dfc00117 	ldw	ra,4(sp)
    a540:	df000017 	ldw	fp,0(sp)
    a544:	dec00204 	addi	sp,sp,8
    a548:	f800283a 	ret

0000a54c <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    a54c:	defffb04 	addi	sp,sp,-20
    a550:	dfc00415 	stw	ra,16(sp)
    a554:	df000315 	stw	fp,12(sp)
    a558:	df000304 	addi	fp,sp,12
    a55c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    a560:	e0bfff17 	ldw	r2,-4(fp)
    a564:	10000716 	blt	r2,zero,a584 <close+0x38>
    a568:	e13fff17 	ldw	r4,-4(fp)
    a56c:	01400304 	movi	r5,12
    a570:	0000e440 	call	e44 <__mulsi3>
    a574:	00c00074 	movhi	r3,1
    a578:	18f75704 	addi	r3,r3,-8868
    a57c:	10c5883a 	add	r2,r2,r3
    a580:	00000106 	br	a588 <close+0x3c>
    a584:	0005883a 	mov	r2,zero
    a588:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
    a58c:	e0bffd17 	ldw	r2,-12(fp)
    a590:	10001826 	beq	r2,zero,a5f4 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    a594:	e0bffd17 	ldw	r2,-12(fp)
    a598:	10800017 	ldw	r2,0(r2)
    a59c:	10800417 	ldw	r2,16(r2)
    a5a0:	10000626 	beq	r2,zero,a5bc <close+0x70>
    a5a4:	e0bffd17 	ldw	r2,-12(fp)
    a5a8:	10800017 	ldw	r2,0(r2)
    a5ac:	10800417 	ldw	r2,16(r2)
    a5b0:	e13ffd17 	ldw	r4,-12(fp)
    a5b4:	103ee83a 	callr	r2
    a5b8:	00000106 	br	a5c0 <close+0x74>
    a5bc:	0005883a 	mov	r2,zero
    a5c0:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    a5c4:	e13fff17 	ldw	r4,-4(fp)
    a5c8:	000aecc0 	call	aecc <alt_release_fd>
    if (rval < 0)
    a5cc:	e0bffe17 	ldw	r2,-8(fp)
    a5d0:	1000060e 	bge	r2,zero,a5ec <close+0xa0>
    {
      ALT_ERRNO = -rval;
    a5d4:	000a4fc0 	call	a4fc <alt_get_errno>
    a5d8:	e0fffe17 	ldw	r3,-8(fp)
    a5dc:	00c7c83a 	sub	r3,zero,r3
    a5e0:	10c00015 	stw	r3,0(r2)
      return -1;
    a5e4:	00bfffc4 	movi	r2,-1
    a5e8:	00000606 	br	a604 <close+0xb8>
    }
    return 0;
    a5ec:	0005883a 	mov	r2,zero
    a5f0:	00000406 	br	a604 <close+0xb8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    a5f4:	000a4fc0 	call	a4fc <alt_get_errno>
    a5f8:	00c01444 	movi	r3,81
    a5fc:	10c00015 	stw	r3,0(r2)
    return -1;
    a600:	00bfffc4 	movi	r2,-1
  }
}
    a604:	e037883a 	mov	sp,fp
    a608:	dfc00117 	ldw	ra,4(sp)
    a60c:	df000017 	ldw	fp,0(sp)
    a610:	dec00204 	addi	sp,sp,8
    a614:	f800283a 	ret

0000a618 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    a618:	defffc04 	addi	sp,sp,-16
    a61c:	df000315 	stw	fp,12(sp)
    a620:	df000304 	addi	fp,sp,12
    a624:	e13ffd15 	stw	r4,-12(fp)
    a628:	e17ffe15 	stw	r5,-8(fp)
    a62c:	e1bfff15 	stw	r6,-4(fp)
  return len;
    a630:	e0bfff17 	ldw	r2,-4(fp)
}
    a634:	e037883a 	mov	sp,fp
    a638:	df000017 	ldw	fp,0(sp)
    a63c:	dec00104 	addi	sp,sp,4
    a640:	f800283a 	ret

0000a644 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    a644:	defffe04 	addi	sp,sp,-8
    a648:	dfc00115 	stw	ra,4(sp)
    a64c:	df000015 	stw	fp,0(sp)
    a650:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    a654:	00800074 	movhi	r2,1
    a658:	10bbd904 	addi	r2,r2,-4252
    a65c:	10800017 	ldw	r2,0(r2)
    a660:	10000526 	beq	r2,zero,a678 <alt_get_errno+0x34>
    a664:	00800074 	movhi	r2,1
    a668:	10bbd904 	addi	r2,r2,-4252
    a66c:	10800017 	ldw	r2,0(r2)
    a670:	103ee83a 	callr	r2
    a674:	00000206 	br	a680 <alt_get_errno+0x3c>
    a678:	00800074 	movhi	r2,1
    a67c:	10827904 	addi	r2,r2,2532
}
    a680:	e037883a 	mov	sp,fp
    a684:	dfc00117 	ldw	ra,4(sp)
    a688:	df000017 	ldw	fp,0(sp)
    a68c:	dec00204 	addi	sp,sp,8
    a690:	f800283a 	ret

0000a694 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
    a694:	defffb04 	addi	sp,sp,-20
    a698:	dfc00415 	stw	ra,16(sp)
    a69c:	df000315 	stw	fp,12(sp)
    a6a0:	df000304 	addi	fp,sp,12
    a6a4:	e13ffe15 	stw	r4,-8(fp)
    a6a8:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    a6ac:	e0bffe17 	ldw	r2,-8(fp)
    a6b0:	10000716 	blt	r2,zero,a6d0 <fstat+0x3c>
    a6b4:	e13ffe17 	ldw	r4,-8(fp)
    a6b8:	01400304 	movi	r5,12
    a6bc:	0000e440 	call	e44 <__mulsi3>
    a6c0:	00c00074 	movhi	r3,1
    a6c4:	18f75704 	addi	r3,r3,-8868
    a6c8:	10c5883a 	add	r2,r2,r3
    a6cc:	00000106 	br	a6d4 <fstat+0x40>
    a6d0:	0005883a 	mov	r2,zero
    a6d4:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
    a6d8:	e0bffd17 	ldw	r2,-12(fp)
    a6dc:	10001026 	beq	r2,zero,a720 <fstat+0x8c>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
    a6e0:	e0bffd17 	ldw	r2,-12(fp)
    a6e4:	10800017 	ldw	r2,0(r2)
    a6e8:	10800817 	ldw	r2,32(r2)
    a6ec:	10000726 	beq	r2,zero,a70c <fstat+0x78>
    {
      return fd->dev->fstat(fd, st);
    a6f0:	e0bffd17 	ldw	r2,-12(fp)
    a6f4:	10800017 	ldw	r2,0(r2)
    a6f8:	10800817 	ldw	r2,32(r2)
    a6fc:	e13ffd17 	ldw	r4,-12(fp)
    a700:	e17fff17 	ldw	r5,-4(fp)
    a704:	103ee83a 	callr	r2
    a708:	00000906 	br	a730 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
    a70c:	e0bfff17 	ldw	r2,-4(fp)
    a710:	00c80004 	movi	r3,8192
    a714:	10c00115 	stw	r3,4(r2)
      return 0;
    a718:	0005883a 	mov	r2,zero
    a71c:	00000406 	br	a730 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    a720:	000a6440 	call	a644 <alt_get_errno>
    a724:	00c01444 	movi	r3,81
    a728:	10c00015 	stw	r3,0(r2)
    return -1;
    a72c:	00bfffc4 	movi	r2,-1
  }
}
    a730:	e037883a 	mov	sp,fp
    a734:	dfc00117 	ldw	ra,4(sp)
    a738:	df000017 	ldw	fp,0(sp)
    a73c:	dec00204 	addi	sp,sp,8
    a740:	f800283a 	ret

0000a744 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    a744:	defffe04 	addi	sp,sp,-8
    a748:	dfc00115 	stw	ra,4(sp)
    a74c:	df000015 	stw	fp,0(sp)
    a750:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    a754:	00800074 	movhi	r2,1
    a758:	10bbd904 	addi	r2,r2,-4252
    a75c:	10800017 	ldw	r2,0(r2)
    a760:	10000526 	beq	r2,zero,a778 <alt_get_errno+0x34>
    a764:	00800074 	movhi	r2,1
    a768:	10bbd904 	addi	r2,r2,-4252
    a76c:	10800017 	ldw	r2,0(r2)
    a770:	103ee83a 	callr	r2
    a774:	00000206 	br	a780 <alt_get_errno+0x3c>
    a778:	00800074 	movhi	r2,1
    a77c:	10827904 	addi	r2,r2,2532
}
    a780:	e037883a 	mov	sp,fp
    a784:	dfc00117 	ldw	ra,4(sp)
    a788:	df000017 	ldw	fp,0(sp)
    a78c:	dec00204 	addi	sp,sp,8
    a790:	f800283a 	ret

0000a794 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
    a794:	deffed04 	addi	sp,sp,-76
    a798:	dfc01215 	stw	ra,72(sp)
    a79c:	df001115 	stw	fp,68(sp)
    a7a0:	df001104 	addi	fp,sp,68
    a7a4:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    a7a8:	e0bfff17 	ldw	r2,-4(fp)
    a7ac:	10000716 	blt	r2,zero,a7cc <isatty+0x38>
    a7b0:	e13fff17 	ldw	r4,-4(fp)
    a7b4:	01400304 	movi	r5,12
    a7b8:	0000e440 	call	e44 <__mulsi3>
    a7bc:	00c00074 	movhi	r3,1
    a7c0:	18f75704 	addi	r3,r3,-8868
    a7c4:	10c5883a 	add	r2,r2,r3
    a7c8:	00000106 	br	a7d0 <isatty+0x3c>
    a7cc:	0005883a 	mov	r2,zero
    a7d0:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
    a7d4:	e0bfef17 	ldw	r2,-68(fp)
    a7d8:	10000e26 	beq	r2,zero,a814 <isatty+0x80>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
    a7dc:	e0bfef17 	ldw	r2,-68(fp)
    a7e0:	10800017 	ldw	r2,0(r2)
    a7e4:	10800817 	ldw	r2,32(r2)
    a7e8:	1000021e 	bne	r2,zero,a7f4 <isatty+0x60>
    {
      return 1;
    a7ec:	00800044 	movi	r2,1
    a7f0:	00000c06 	br	a824 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
    a7f4:	e0bff004 	addi	r2,fp,-64
    a7f8:	e13fff17 	ldw	r4,-4(fp)
    a7fc:	100b883a 	mov	r5,r2
    a800:	000a6940 	call	a694 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
    a804:	e0bff117 	ldw	r2,-60(fp)
    a808:	10880020 	cmpeqi	r2,r2,8192
    a80c:	10803fcc 	andi	r2,r2,255
    a810:	00000406 	br	a824 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    a814:	000a7440 	call	a744 <alt_get_errno>
    a818:	00c01444 	movi	r3,81
    a81c:	10c00015 	stw	r3,0(r2)
    return 0;
    a820:	0005883a 	mov	r2,zero
  }
}
    a824:	e037883a 	mov	sp,fp
    a828:	dfc00117 	ldw	ra,4(sp)
    a82c:	df000017 	ldw	fp,0(sp)
    a830:	dec00204 	addi	sp,sp,8
    a834:	f800283a 	ret

0000a838 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
    a838:	defffc04 	addi	sp,sp,-16
    a83c:	df000315 	stw	fp,12(sp)
    a840:	df000304 	addi	fp,sp,12
    a844:	e13ffd15 	stw	r4,-12(fp)
    a848:	e17ffe15 	stw	r5,-8(fp)
    a84c:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
    a850:	e0fffe17 	ldw	r3,-8(fp)
    a854:	e0bffd17 	ldw	r2,-12(fp)
    a858:	18800e26 	beq	r3,r2,a894 <alt_load_section+0x5c>
  {
    while( to != end )
    a85c:	00000a06 	br	a888 <alt_load_section+0x50>
    {
      *to++ = *from++;
    a860:	e0bffd17 	ldw	r2,-12(fp)
    a864:	10c00017 	ldw	r3,0(r2)
    a868:	e0bffe17 	ldw	r2,-8(fp)
    a86c:	10c00015 	stw	r3,0(r2)
    a870:	e0bffe17 	ldw	r2,-8(fp)
    a874:	10800104 	addi	r2,r2,4
    a878:	e0bffe15 	stw	r2,-8(fp)
    a87c:	e0bffd17 	ldw	r2,-12(fp)
    a880:	10800104 	addi	r2,r2,4
    a884:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    a888:	e0fffe17 	ldw	r3,-8(fp)
    a88c:	e0bfff17 	ldw	r2,-4(fp)
    a890:	18bff31e 	bne	r3,r2,a860 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
    a894:	e037883a 	mov	sp,fp
    a898:	df000017 	ldw	fp,0(sp)
    a89c:	dec00104 	addi	sp,sp,4
    a8a0:	f800283a 	ret

0000a8a4 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    a8a4:	defffe04 	addi	sp,sp,-8
    a8a8:	dfc00115 	stw	ra,4(sp)
    a8ac:	df000015 	stw	fp,0(sp)
    a8b0:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    a8b4:	01000074 	movhi	r4,1
    a8b8:	213bde04 	addi	r4,r4,-4232
    a8bc:	01400074 	movhi	r5,1
    a8c0:	29754804 	addi	r5,r5,-10976
    a8c4:	01800074 	movhi	r6,1
    a8c8:	31bbde04 	addi	r6,r6,-4232
    a8cc:	000a8380 	call	a838 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    a8d0:	01000034 	movhi	r4,0
    a8d4:	21000804 	addi	r4,r4,32
    a8d8:	01400034 	movhi	r5,0
    a8dc:	29400804 	addi	r5,r5,32
    a8e0:	01800034 	movhi	r6,0
    a8e4:	31807904 	addi	r6,r6,484
    a8e8:	000a8380 	call	a838 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    a8ec:	01000074 	movhi	r4,1
    a8f0:	21344304 	addi	r4,r4,-12020
    a8f4:	01400074 	movhi	r5,1
    a8f8:	29744304 	addi	r5,r5,-12020
    a8fc:	01800074 	movhi	r6,1
    a900:	31b54804 	addi	r6,r6,-10976
    a904:	000a8380 	call	a838 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    a908:	000bf040 	call	bf04 <alt_dcache_flush_all>
  alt_icache_flush_all();
    a90c:	000c0c80 	call	c0c8 <alt_icache_flush_all>
}
    a910:	e037883a 	mov	sp,fp
    a914:	dfc00117 	ldw	ra,4(sp)
    a918:	df000017 	ldw	fp,0(sp)
    a91c:	dec00204 	addi	sp,sp,8
    a920:	f800283a 	ret

0000a924 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    a924:	defffe04 	addi	sp,sp,-8
    a928:	dfc00115 	stw	ra,4(sp)
    a92c:	df000015 	stw	fp,0(sp)
    a930:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    a934:	00800074 	movhi	r2,1
    a938:	10bbd904 	addi	r2,r2,-4252
    a93c:	10800017 	ldw	r2,0(r2)
    a940:	10000526 	beq	r2,zero,a958 <alt_get_errno+0x34>
    a944:	00800074 	movhi	r2,1
    a948:	10bbd904 	addi	r2,r2,-4252
    a94c:	10800017 	ldw	r2,0(r2)
    a950:	103ee83a 	callr	r2
    a954:	00000206 	br	a960 <alt_get_errno+0x3c>
    a958:	00800074 	movhi	r2,1
    a95c:	10827904 	addi	r2,r2,2532
}
    a960:	e037883a 	mov	sp,fp
    a964:	dfc00117 	ldw	ra,4(sp)
    a968:	df000017 	ldw	fp,0(sp)
    a96c:	dec00204 	addi	sp,sp,8
    a970:	f800283a 	ret

0000a974 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
    a974:	defff904 	addi	sp,sp,-28
    a978:	dfc00615 	stw	ra,24(sp)
    a97c:	df000515 	stw	fp,20(sp)
    a980:	df000504 	addi	fp,sp,20
    a984:	e13ffd15 	stw	r4,-12(fp)
    a988:	e17ffe15 	stw	r5,-8(fp)
    a98c:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
    a990:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    a994:	e0bffd17 	ldw	r2,-12(fp)
    a998:	10000716 	blt	r2,zero,a9b8 <lseek+0x44>
    a99c:	e13ffd17 	ldw	r4,-12(fp)
    a9a0:	01400304 	movi	r5,12
    a9a4:	0000e440 	call	e44 <__mulsi3>
    a9a8:	00c00074 	movhi	r3,1
    a9ac:	18f75704 	addi	r3,r3,-8868
    a9b0:	10c5883a 	add	r2,r2,r3
    a9b4:	00000106 	br	a9bc <lseek+0x48>
    a9b8:	0005883a 	mov	r2,zero
    a9bc:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
    a9c0:	e0bffc17 	ldw	r2,-16(fp)
    a9c4:	10001026 	beq	r2,zero,aa08 <lseek+0x94>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
    a9c8:	e0bffc17 	ldw	r2,-16(fp)
    a9cc:	10800017 	ldw	r2,0(r2)
    a9d0:	10800717 	ldw	r2,28(r2)
    a9d4:	10000926 	beq	r2,zero,a9fc <lseek+0x88>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
    a9d8:	e0bffc17 	ldw	r2,-16(fp)
    a9dc:	10800017 	ldw	r2,0(r2)
    a9e0:	10800717 	ldw	r2,28(r2)
    a9e4:	e13ffc17 	ldw	r4,-16(fp)
    a9e8:	e17ffe17 	ldw	r5,-8(fp)
    a9ec:	e1bfff17 	ldw	r6,-4(fp)
    a9f0:	103ee83a 	callr	r2
    a9f4:	e0bffb15 	stw	r2,-20(fp)
    a9f8:	00000506 	br	aa10 <lseek+0x9c>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
    a9fc:	00bfde84 	movi	r2,-134
    aa00:	e0bffb15 	stw	r2,-20(fp)
    aa04:	00000206 	br	aa10 <lseek+0x9c>
    }
  }
  else  
  {
    rc = -EBADFD;
    aa08:	00bfebc4 	movi	r2,-81
    aa0c:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
    aa10:	e0bffb17 	ldw	r2,-20(fp)
    aa14:	1000060e 	bge	r2,zero,aa30 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
    aa18:	000a9240 	call	a924 <alt_get_errno>
    aa1c:	e0fffb17 	ldw	r3,-20(fp)
    aa20:	00c7c83a 	sub	r3,zero,r3
    aa24:	10c00015 	stw	r3,0(r2)
    rc = -1;
    aa28:	00bfffc4 	movi	r2,-1
    aa2c:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
    aa30:	e0bffb17 	ldw	r2,-20(fp)
}
    aa34:	e037883a 	mov	sp,fp
    aa38:	dfc00117 	ldw	ra,4(sp)
    aa3c:	df000017 	ldw	fp,0(sp)
    aa40:	dec00204 	addi	sp,sp,8
    aa44:	f800283a 	ret

0000aa48 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    aa48:	defffd04 	addi	sp,sp,-12
    aa4c:	dfc00215 	stw	ra,8(sp)
    aa50:	df000115 	stw	fp,4(sp)
    aa54:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    aa58:	0009883a 	mov	r4,zero
    aa5c:	000b3100 	call	b310 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
    aa60:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    aa64:	000b3440 	call	b344 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    aa68:	01000074 	movhi	r4,1
    aa6c:	21354004 	addi	r4,r4,-11008
    aa70:	01400074 	movhi	r5,1
    aa74:	29754004 	addi	r5,r5,-11008
    aa78:	01800074 	movhi	r6,1
    aa7c:	31b54004 	addi	r6,r6,-11008
    aa80:	000c48c0 	call	c48c <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
    aa84:	000c0100 	call	c010 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
    aa88:	01000074 	movhi	r4,1
    aa8c:	21301b04 	addi	r4,r4,-16276
    aa90:	000ca340 	call	ca34 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    aa94:	d126ae17 	ldw	r4,-25928(gp)
    aa98:	d0e6af17 	ldw	r3,-25924(gp)
    aa9c:	d0a6b017 	ldw	r2,-25920(gp)
    aaa0:	180b883a 	mov	r5,r3
    aaa4:	100d883a 	mov	r6,r2
    aaa8:	0000ce80 	call	ce8 <main>
    aaac:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
    aab0:	01000044 	movi	r4,1
    aab4:	000a54c0 	call	a54c <close>
  exit (result);
    aab8:	e13fff17 	ldw	r4,-4(fp)
    aabc:	000ca480 	call	ca48 <exit>

0000aac0 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
    aac0:	defffe04 	addi	sp,sp,-8
    aac4:	df000115 	stw	fp,4(sp)
    aac8:	df000104 	addi	fp,sp,4
    aacc:	e13fff15 	stw	r4,-4(fp)
}
    aad0:	e037883a 	mov	sp,fp
    aad4:	df000017 	ldw	fp,0(sp)
    aad8:	dec00104 	addi	sp,sp,4
    aadc:	f800283a 	ret

0000aae0 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
    aae0:	defffe04 	addi	sp,sp,-8
    aae4:	df000115 	stw	fp,4(sp)
    aae8:	df000104 	addi	fp,sp,4
    aaec:	e13fff15 	stw	r4,-4(fp)
}
    aaf0:	e037883a 	mov	sp,fp
    aaf4:	df000017 	ldw	fp,0(sp)
    aaf8:	dec00104 	addi	sp,sp,4
    aafc:	f800283a 	ret

0000ab00 <alt_printf>:
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
    ab00:	defff204 	addi	sp,sp,-56
    ab04:	dfc00a15 	stw	ra,40(sp)
    ab08:	df000915 	stw	fp,36(sp)
    ab0c:	df000904 	addi	fp,sp,36
    ab10:	e1400215 	stw	r5,8(fp)
    ab14:	e1800315 	stw	r6,12(fp)
    ab18:	e1c00415 	stw	r7,16(fp)
    ab1c:	e13fff15 	stw	r4,-4(fp)
	va_list args;
	va_start(args, fmt);
    ab20:	e0800204 	addi	r2,fp,8
    ab24:	e0bffe15 	stw	r2,-8(fp)
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    ab28:	e0bfff17 	ldw	r2,-4(fp)
    ab2c:	e0bff715 	stw	r2,-36(fp)
    while ((c = *w++) != 0)
    ab30:	00007306 	br	ad00 <alt_printf+0x200>
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
    ab34:	e0bff807 	ldb	r2,-32(fp)
    ab38:	10800960 	cmpeqi	r2,r2,37
    ab3c:	1000041e 	bne	r2,zero,ab50 <alt_printf+0x50>
        {
            alt_putchar(c);
    ab40:	e0bff807 	ldb	r2,-32(fp)
    ab44:	1009883a 	mov	r4,r2
    ab48:	000ad440 	call	ad44 <alt_putchar>
    ab4c:	00006c06 	br	ad00 <alt_printf+0x200>
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
    ab50:	e0bff717 	ldw	r2,-36(fp)
    ab54:	10800003 	ldbu	r2,0(r2)
    ab58:	e0bff805 	stb	r2,-32(fp)
    ab5c:	e0bff807 	ldb	r2,-32(fp)
    ab60:	1004c03a 	cmpne	r2,r2,zero
    ab64:	e0fff717 	ldw	r3,-36(fp)
    ab68:	18c00044 	addi	r3,r3,1
    ab6c:	e0fff715 	stw	r3,-36(fp)
    ab70:	10803fcc 	andi	r2,r2,255
    ab74:	10006d26 	beq	r2,zero,ad2c <alt_printf+0x22c>
            {
                if (c == '%')
    ab78:	e0bff807 	ldb	r2,-32(fp)
    ab7c:	10800958 	cmpnei	r2,r2,37
    ab80:	1000041e 	bne	r2,zero,ab94 <alt_printf+0x94>
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
    ab84:	e0bff807 	ldb	r2,-32(fp)
    ab88:	1009883a 	mov	r4,r2
    ab8c:	000ad440 	call	ad44 <alt_putchar>
    ab90:	00005b06 	br	ad00 <alt_printf+0x200>
                } 
                else if (c == 'c')
    ab94:	e0bff807 	ldb	r2,-32(fp)
    ab98:	108018d8 	cmpnei	r2,r2,99
    ab9c:	1000081e 	bne	r2,zero,abc0 <alt_printf+0xc0>
                {
                    int v = va_arg(args, int);
    aba0:	e0bffe17 	ldw	r2,-8(fp)
    aba4:	10c00104 	addi	r3,r2,4
    aba8:	e0fffe15 	stw	r3,-8(fp)
    abac:	10800017 	ldw	r2,0(r2)
    abb0:	e0bffb15 	stw	r2,-20(fp)
                    alt_putchar(v);
    abb4:	e13ffb17 	ldw	r4,-20(fp)
    abb8:	000ad440 	call	ad44 <alt_putchar>
    abbc:	00005006 	br	ad00 <alt_printf+0x200>
                }
                else if (c == 'x')
    abc0:	e0bff807 	ldb	r2,-32(fp)
    abc4:	10801e18 	cmpnei	r2,r2,120
    abc8:	1000341e 	bne	r2,zero,ac9c <alt_printf+0x19c>
                {
                    /* Process hexadecimal number format. */
                    unsigned long v = va_arg(args, unsigned long);
    abcc:	e0bffe17 	ldw	r2,-8(fp)
    abd0:	10c00104 	addi	r3,r2,4
    abd4:	e0fffe15 	stw	r3,-8(fp)
    abd8:	10800017 	ldw	r2,0(r2)
    abdc:	e0bffc15 	stw	r2,-16(fp)
                    unsigned long digit;
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
    abe0:	e0bffc17 	ldw	r2,-16(fp)
    abe4:	1000031e 	bne	r2,zero,abf4 <alt_printf+0xf4>
                    {
                        alt_putchar('0');
    abe8:	01000c04 	movi	r4,48
    abec:	000ad440 	call	ad44 <alt_putchar>
                        continue;
    abf0:	00004306 	br	ad00 <alt_printf+0x200>
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
    abf4:	00800704 	movi	r2,28
    abf8:	e0bff915 	stw	r2,-28(fp)
                    while (!(v & (0xF << digit_shift)))
    abfc:	00000306 	br	ac0c <alt_printf+0x10c>
                        digit_shift -= 4;
    ac00:	e0bff917 	ldw	r2,-28(fp)
    ac04:	10bfff04 	addi	r2,r2,-4
    ac08:	e0bff915 	stw	r2,-28(fp)
                        continue;
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
    ac0c:	00c003c4 	movi	r3,15
    ac10:	e0bff917 	ldw	r2,-28(fp)
    ac14:	1884983a 	sll	r2,r3,r2
    ac18:	1007883a 	mov	r3,r2
    ac1c:	e0bffc17 	ldw	r2,-16(fp)
    ac20:	1884703a 	and	r2,r3,r2
    ac24:	103ff626 	beq	r2,zero,ac00 <alt_printf+0x100>
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
    ac28:	00001906 	br	ac90 <alt_printf+0x190>
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
    ac2c:	00c003c4 	movi	r3,15
    ac30:	e0bff917 	ldw	r2,-28(fp)
    ac34:	1884983a 	sll	r2,r3,r2
    ac38:	1007883a 	mov	r3,r2
    ac3c:	e0bffc17 	ldw	r2,-16(fp)
    ac40:	1886703a 	and	r3,r3,r2
    ac44:	e0bff917 	ldw	r2,-28(fp)
    ac48:	1884d83a 	srl	r2,r3,r2
    ac4c:	e0bffd15 	stw	r2,-12(fp)
                        if (digit <= 9)
    ac50:	e0bffd17 	ldw	r2,-12(fp)
    ac54:	108002a8 	cmpgeui	r2,r2,10
    ac58:	1000041e 	bne	r2,zero,ac6c <alt_printf+0x16c>
                            c = '0' + digit;
    ac5c:	e0bffd17 	ldw	r2,-12(fp)
    ac60:	10800c04 	addi	r2,r2,48
    ac64:	e0bff805 	stb	r2,-32(fp)
    ac68:	00000306 	br	ac78 <alt_printf+0x178>
                        else
                            c = 'a' + digit - 10;
    ac6c:	e0bffd17 	ldw	r2,-12(fp)
    ac70:	108015c4 	addi	r2,r2,87
    ac74:	e0bff805 	stb	r2,-32(fp)
                        alt_putchar(c);
    ac78:	e0bff807 	ldb	r2,-32(fp)
    ac7c:	1009883a 	mov	r4,r2
    ac80:	000ad440 	call	ad44 <alt_putchar>
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
    ac84:	e0bff917 	ldw	r2,-28(fp)
    ac88:	10bfff04 	addi	r2,r2,-4
    ac8c:	e0bff915 	stw	r2,-28(fp)
    ac90:	e0bff917 	ldw	r2,-28(fp)
    ac94:	103fe50e 	bge	r2,zero,ac2c <alt_printf+0x12c>
    ac98:	00001906 	br	ad00 <alt_printf+0x200>
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
    ac9c:	e0bff807 	ldb	r2,-32(fp)
    aca0:	10801cd8 	cmpnei	r2,r2,115
    aca4:	1000161e 	bne	r2,zero,ad00 <alt_printf+0x200>
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);
    aca8:	e0bffe17 	ldw	r2,-8(fp)
    acac:	10c00104 	addi	r3,r2,4
    acb0:	e0fffe15 	stw	r3,-8(fp)
    acb4:	10800017 	ldw	r2,0(r2)
    acb8:	e0bffa15 	stw	r2,-24(fp)

                    while(*s)
    acbc:	00000a06 	br	ace8 <alt_printf+0x1e8>
                      alt_putchar(*s++);
    acc0:	e0bffa17 	ldw	r2,-24(fp)
    acc4:	10800003 	ldbu	r2,0(r2)
    acc8:	10803fcc 	andi	r2,r2,255
    accc:	1080201c 	xori	r2,r2,128
    acd0:	10bfe004 	addi	r2,r2,-128
    acd4:	e0fffa17 	ldw	r3,-24(fp)
    acd8:	18c00044 	addi	r3,r3,1
    acdc:	e0fffa15 	stw	r3,-24(fp)
    ace0:	1009883a 	mov	r4,r2
    ace4:	000ad440 	call	ad44 <alt_putchar>
                else if (c == 's')
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);

                    while(*s)
    ace8:	e0bffa17 	ldw	r2,-24(fp)
    acec:	10800003 	ldbu	r2,0(r2)
    acf0:	10803fcc 	andi	r2,r2,255
    acf4:	1080201c 	xori	r2,r2,128
    acf8:	10bfe004 	addi	r2,r2,-128
    acfc:	103ff01e 	bne	r2,zero,acc0 <alt_printf+0x1c0>
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
    ad00:	e0bff717 	ldw	r2,-36(fp)
    ad04:	10800003 	ldbu	r2,0(r2)
    ad08:	e0bff805 	stb	r2,-32(fp)
    ad0c:	e0bff807 	ldb	r2,-32(fp)
    ad10:	1004c03a 	cmpne	r2,r2,zero
    ad14:	e0fff717 	ldw	r3,-36(fp)
    ad18:	18c00044 	addi	r3,r3,1
    ad1c:	e0fff715 	stw	r3,-36(fp)
    ad20:	10803fcc 	andi	r2,r2,255
    ad24:	103f831e 	bne	r2,zero,ab34 <alt_printf+0x34>
    ad28:	00000106 	br	ad30 <alt_printf+0x230>
                      alt_putchar(*s++);
                }
            }
            else
            {
                break;
    ad2c:	0001883a 	nop
            }
        }
    }
}
    ad30:	e037883a 	mov	sp,fp
    ad34:	dfc00117 	ldw	ra,4(sp)
    ad38:	df000017 	ldw	fp,0(sp)
    ad3c:	dec00504 	addi	sp,sp,20
    ad40:	f800283a 	ret

0000ad44 <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
    ad44:	defffd04 	addi	sp,sp,-12
    ad48:	dfc00215 	stw	ra,8(sp)
    ad4c:	df000115 	stw	fp,4(sp)
    ad50:	df000104 	addi	fp,sp,4
    ad54:	e13fff15 	stw	r4,-4(fp)
    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
        return -1;
    }
    return c;
#else
    return putchar(c);
    ad58:	00800074 	movhi	r2,1
    ad5c:	10bbd004 	addi	r2,r2,-4288
    ad60:	10800017 	ldw	r2,0(r2)
    ad64:	10800217 	ldw	r2,8(r2)
    ad68:	e13fff17 	ldw	r4,-4(fp)
    ad6c:	100b883a 	mov	r5,r2
    ad70:	000cbb80 	call	cbb8 <putc>
#endif
}
    ad74:	e037883a 	mov	sp,fp
    ad78:	dfc00117 	ldw	ra,4(sp)
    ad7c:	df000017 	ldw	fp,0(sp)
    ad80:	dec00204 	addi	sp,sp,8
    ad84:	f800283a 	ret

0000ad88 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    ad88:	defffe04 	addi	sp,sp,-8
    ad8c:	dfc00115 	stw	ra,4(sp)
    ad90:	df000015 	stw	fp,0(sp)
    ad94:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    ad98:	00800074 	movhi	r2,1
    ad9c:	10bbd904 	addi	r2,r2,-4252
    ada0:	10800017 	ldw	r2,0(r2)
    ada4:	10000526 	beq	r2,zero,adbc <alt_get_errno+0x34>
    ada8:	00800074 	movhi	r2,1
    adac:	10bbd904 	addi	r2,r2,-4252
    adb0:	10800017 	ldw	r2,0(r2)
    adb4:	103ee83a 	callr	r2
    adb8:	00000206 	br	adc4 <alt_get_errno+0x3c>
    adbc:	00800074 	movhi	r2,1
    adc0:	10827904 	addi	r2,r2,2532
}
    adc4:	e037883a 	mov	sp,fp
    adc8:	dfc00117 	ldw	ra,4(sp)
    adcc:	df000017 	ldw	fp,0(sp)
    add0:	dec00204 	addi	sp,sp,8
    add4:	f800283a 	ret

0000add8 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
    add8:	defff904 	addi	sp,sp,-28
    addc:	dfc00615 	stw	ra,24(sp)
    ade0:	df000515 	stw	fp,20(sp)
    ade4:	df000504 	addi	fp,sp,20
    ade8:	e13ffd15 	stw	r4,-12(fp)
    adec:	e17ffe15 	stw	r5,-8(fp)
    adf0:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    adf4:	e0bffd17 	ldw	r2,-12(fp)
    adf8:	10000716 	blt	r2,zero,ae18 <read+0x40>
    adfc:	e13ffd17 	ldw	r4,-12(fp)
    ae00:	01400304 	movi	r5,12
    ae04:	0000e440 	call	e44 <__mulsi3>
    ae08:	00c00074 	movhi	r3,1
    ae0c:	18f75704 	addi	r3,r3,-8868
    ae10:	10c5883a 	add	r2,r2,r3
    ae14:	00000106 	br	ae1c <read+0x44>
    ae18:	0005883a 	mov	r2,zero
    ae1c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    ae20:	e0bffb17 	ldw	r2,-20(fp)
    ae24:	10002026 	beq	r2,zero,aea8 <read+0xd0>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    ae28:	e0bffb17 	ldw	r2,-20(fp)
    ae2c:	10800217 	ldw	r2,8(r2)
    ae30:	108000cc 	andi	r2,r2,3
    ae34:	10800060 	cmpeqi	r2,r2,1
    ae38:	1000171e 	bne	r2,zero,ae98 <read+0xc0>
        (fd->dev->read))
    ae3c:	e0bffb17 	ldw	r2,-20(fp)
    ae40:	10800017 	ldw	r2,0(r2)
    ae44:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    ae48:	10001326 	beq	r2,zero,ae98 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
    ae4c:	e0bffb17 	ldw	r2,-20(fp)
    ae50:	10800017 	ldw	r2,0(r2)
    ae54:	10c00517 	ldw	r3,20(r2)
    ae58:	e0bfff17 	ldw	r2,-4(fp)
    ae5c:	e13ffb17 	ldw	r4,-20(fp)
    ae60:	e17ffe17 	ldw	r5,-8(fp)
    ae64:	100d883a 	mov	r6,r2
    ae68:	183ee83a 	callr	r3
    ae6c:	e0bffc15 	stw	r2,-16(fp)
    ae70:	e0bffc17 	ldw	r2,-16(fp)
    ae74:	1000060e 	bge	r2,zero,ae90 <read+0xb8>
        {
          ALT_ERRNO = -rval;
    ae78:	000ad880 	call	ad88 <alt_get_errno>
    ae7c:	e0fffc17 	ldw	r3,-16(fp)
    ae80:	00c7c83a 	sub	r3,zero,r3
    ae84:	10c00015 	stw	r3,0(r2)
          return -1;
    ae88:	00bfffc4 	movi	r2,-1
    ae8c:	00000a06 	br	aeb8 <read+0xe0>
        }
        return rval;
    ae90:	e0bffc17 	ldw	r2,-16(fp)
    ae94:	00000806 	br	aeb8 <read+0xe0>
      }
      else
      {
        ALT_ERRNO = EACCES;
    ae98:	000ad880 	call	ad88 <alt_get_errno>
    ae9c:	00c00344 	movi	r3,13
    aea0:	10c00015 	stw	r3,0(r2)
    aea4:	00000306 	br	aeb4 <read+0xdc>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
    aea8:	000ad880 	call	ad88 <alt_get_errno>
    aeac:	00c01444 	movi	r3,81
    aeb0:	10c00015 	stw	r3,0(r2)
  }
  return -1;
    aeb4:	00bfffc4 	movi	r2,-1
}
    aeb8:	e037883a 	mov	sp,fp
    aebc:	dfc00117 	ldw	ra,4(sp)
    aec0:	df000017 	ldw	fp,0(sp)
    aec4:	dec00204 	addi	sp,sp,8
    aec8:	f800283a 	ret

0000aecc <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    aecc:	defffc04 	addi	sp,sp,-16
    aed0:	dfc00315 	stw	ra,12(sp)
    aed4:	df000215 	stw	fp,8(sp)
    aed8:	dc000115 	stw	r16,4(sp)
    aedc:	df000104 	addi	fp,sp,4
    aee0:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
    aee4:	e0bfff17 	ldw	r2,-4(fp)
    aee8:	108000d0 	cmplti	r2,r2,3
    aeec:	1000111e 	bne	r2,zero,af34 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
    aef0:	04000074 	movhi	r16,1
    aef4:	84375704 	addi	r16,r16,-8868
    aef8:	e0bfff17 	ldw	r2,-4(fp)
    aefc:	1009883a 	mov	r4,r2
    af00:	01400304 	movi	r5,12
    af04:	0000e440 	call	e44 <__mulsi3>
    af08:	8085883a 	add	r2,r16,r2
    af0c:	10800204 	addi	r2,r2,8
    af10:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    af14:	04000074 	movhi	r16,1
    af18:	84375704 	addi	r16,r16,-8868
    af1c:	e0bfff17 	ldw	r2,-4(fp)
    af20:	1009883a 	mov	r4,r2
    af24:	01400304 	movi	r5,12
    af28:	0000e440 	call	e44 <__mulsi3>
    af2c:	8085883a 	add	r2,r16,r2
    af30:	10000015 	stw	zero,0(r2)
  }
}
    af34:	e037883a 	mov	sp,fp
    af38:	dfc00217 	ldw	ra,8(sp)
    af3c:	df000117 	ldw	fp,4(sp)
    af40:	dc000017 	ldw	r16,0(sp)
    af44:	dec00304 	addi	sp,sp,12
    af48:	f800283a 	ret

0000af4c <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
    af4c:	defff904 	addi	sp,sp,-28
    af50:	df000615 	stw	fp,24(sp)
    af54:	df000604 	addi	fp,sp,24
    af58:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    af5c:	0005303a 	rdctl	r2,status
    af60:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    af64:	e0fffc17 	ldw	r3,-16(fp)
    af68:	00bfff84 	movi	r2,-2
    af6c:	1884703a 	and	r2,r3,r2
    af70:	1001703a 	wrctl	status,r2
  
  return context;
    af74:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
    af78:	e0bffa15 	stw	r2,-24(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
    af7c:	d0a00b17 	ldw	r2,-32724(gp)
    af80:	10c000c4 	addi	r3,r2,3
    af84:	00bfff04 	movi	r2,-4
    af88:	1884703a 	and	r2,r3,r2
    af8c:	d0a00b15 	stw	r2,-32724(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
    af90:	d0e00b17 	ldw	r3,-32724(gp)
    af94:	e0bfff17 	ldw	r2,-4(fp)
    af98:	1885883a 	add	r2,r3,r2
    af9c:	00c02034 	movhi	r3,128
    afa0:	18c00004 	addi	r3,r3,0
    afa4:	1880062e 	bgeu	r3,r2,afc0 <sbrk+0x74>
    afa8:	e0bffa17 	ldw	r2,-24(fp)
    afac:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    afb0:	e0bffd17 	ldw	r2,-12(fp)
    afb4:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
    afb8:	00bfffc4 	movi	r2,-1
    afbc:	00000b06 	br	afec <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
    afc0:	d0a00b17 	ldw	r2,-32724(gp)
    afc4:	e0bffb15 	stw	r2,-20(fp)
  heap_end += incr; 
    afc8:	d0e00b17 	ldw	r3,-32724(gp)
    afcc:	e0bfff17 	ldw	r2,-4(fp)
    afd0:	1885883a 	add	r2,r3,r2
    afd4:	d0a00b15 	stw	r2,-32724(gp)
    afd8:	e0bffa17 	ldw	r2,-24(fp)
    afdc:	e0bffe15 	stw	r2,-8(fp)
    afe0:	e0bffe17 	ldw	r2,-8(fp)
    afe4:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
    afe8:	e0bffb17 	ldw	r2,-20(fp)
} 
    afec:	e037883a 	mov	sp,fp
    aff0:	df000017 	ldw	fp,0(sp)
    aff4:	dec00104 	addi	sp,sp,4
    aff8:	f800283a 	ret

0000affc <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
    affc:	defffa04 	addi	sp,sp,-24
    b000:	df000515 	stw	fp,20(sp)
    b004:	df000504 	addi	fp,sp,20
    b008:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    b00c:	0005303a 	rdctl	r2,status
    b010:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    b014:	e0fffc17 	ldw	r3,-16(fp)
    b018:	00bfff84 	movi	r2,-2
    b01c:	1884703a 	and	r2,r3,r2
    b020:	1001703a 	wrctl	status,r2
  
  return context;
    b024:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
    b028:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
    b02c:	e0bfff17 	ldw	r2,-4(fp)
    b030:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
    b034:	e0bffd17 	ldw	r2,-12(fp)
    b038:	10800017 	ldw	r2,0(r2)
    b03c:	e0fffd17 	ldw	r3,-12(fp)
    b040:	18c00117 	ldw	r3,4(r3)
    b044:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
    b048:	e0bffd17 	ldw	r2,-12(fp)
    b04c:	10800117 	ldw	r2,4(r2)
    b050:	e0fffd17 	ldw	r3,-12(fp)
    b054:	18c00017 	ldw	r3,0(r3)
    b058:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
    b05c:	e0bffd17 	ldw	r2,-12(fp)
    b060:	e0fffd17 	ldw	r3,-12(fp)
    b064:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
    b068:	e0bffd17 	ldw	r2,-12(fp)
    b06c:	e0fffd17 	ldw	r3,-12(fp)
    b070:	10c00015 	stw	r3,0(r2)
    b074:	e0bffb17 	ldw	r2,-20(fp)
    b078:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    b07c:	e0bffe17 	ldw	r2,-8(fp)
    b080:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
    b084:	e037883a 	mov	sp,fp
    b088:	df000017 	ldw	fp,0(sp)
    b08c:	dec00104 	addi	sp,sp,4
    b090:	f800283a 	ret

0000b094 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
    b094:	defffb04 	addi	sp,sp,-20
    b098:	dfc00415 	stw	ra,16(sp)
    b09c:	df000315 	stw	fp,12(sp)
    b0a0:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
    b0a4:	d0a00c17 	ldw	r2,-32720(gp)
    b0a8:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
    b0ac:	d0a6b217 	ldw	r2,-25912(gp)
    b0b0:	10800044 	addi	r2,r2,1
    b0b4:	d0a6b215 	stw	r2,-25912(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    b0b8:	00002e06 	br	b174 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
    b0bc:	e0bffd17 	ldw	r2,-12(fp)
    b0c0:	10800017 	ldw	r2,0(r2)
    b0c4:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
    b0c8:	e0bffd17 	ldw	r2,-12(fp)
    b0cc:	10800403 	ldbu	r2,16(r2)
    b0d0:	10803fcc 	andi	r2,r2,255
    b0d4:	10000426 	beq	r2,zero,b0e8 <alt_tick+0x54>
    b0d8:	d0a6b217 	ldw	r2,-25912(gp)
    b0dc:	1000021e 	bne	r2,zero,b0e8 <alt_tick+0x54>
    {
      alarm->rollover = 0;
    b0e0:	e0bffd17 	ldw	r2,-12(fp)
    b0e4:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
    b0e8:	e0bffd17 	ldw	r2,-12(fp)
    b0ec:	10800217 	ldw	r2,8(r2)
    b0f0:	d0e6b217 	ldw	r3,-25912(gp)
    b0f4:	18801d36 	bltu	r3,r2,b16c <alt_tick+0xd8>
    b0f8:	e0bffd17 	ldw	r2,-12(fp)
    b0fc:	10800403 	ldbu	r2,16(r2)
    b100:	10803fcc 	andi	r2,r2,255
    b104:	1000191e 	bne	r2,zero,b16c <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
    b108:	e0bffd17 	ldw	r2,-12(fp)
    b10c:	10c00317 	ldw	r3,12(r2)
    b110:	e0bffd17 	ldw	r2,-12(fp)
    b114:	10800517 	ldw	r2,20(r2)
    b118:	1009883a 	mov	r4,r2
    b11c:	183ee83a 	callr	r3
    b120:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
    b124:	e0bfff17 	ldw	r2,-4(fp)
    b128:	1000031e 	bne	r2,zero,b138 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
    b12c:	e13ffd17 	ldw	r4,-12(fp)
    b130:	000affc0 	call	affc <alt_alarm_stop>
    b134:	00000d06 	br	b16c <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
    b138:	e0bffd17 	ldw	r2,-12(fp)
    b13c:	10c00217 	ldw	r3,8(r2)
    b140:	e0bfff17 	ldw	r2,-4(fp)
    b144:	1887883a 	add	r3,r3,r2
    b148:	e0bffd17 	ldw	r2,-12(fp)
    b14c:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
    b150:	e0bffd17 	ldw	r2,-12(fp)
    b154:	10c00217 	ldw	r3,8(r2)
    b158:	d0a6b217 	ldw	r2,-25912(gp)
    b15c:	1880032e 	bgeu	r3,r2,b16c <alt_tick+0xd8>
        {
          alarm->rollover = 1;
    b160:	e0bffd17 	ldw	r2,-12(fp)
    b164:	00c00044 	movi	r3,1
    b168:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
    b16c:	e0bffe17 	ldw	r2,-8(fp)
    b170:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    b174:	e0fffd17 	ldw	r3,-12(fp)
    b178:	d0a00c04 	addi	r2,gp,-32720
    b17c:	18bfcf1e 	bne	r3,r2,b0bc <alt_tick+0x28>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
    b180:	0001883a 	nop
}
    b184:	e037883a 	mov	sp,fp
    b188:	dfc00117 	ldw	ra,4(sp)
    b18c:	df000017 	ldw	fp,0(sp)
    b190:	dec00204 	addi	sp,sp,8
    b194:	f800283a 	ret

0000b198 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    b198:	defffe04 	addi	sp,sp,-8
    b19c:	dfc00115 	stw	ra,4(sp)
    b1a0:	df000015 	stw	fp,0(sp)
    b1a4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    b1a8:	00800074 	movhi	r2,1
    b1ac:	10bbd904 	addi	r2,r2,-4252
    b1b0:	10800017 	ldw	r2,0(r2)
    b1b4:	10000526 	beq	r2,zero,b1cc <alt_get_errno+0x34>
    b1b8:	00800074 	movhi	r2,1
    b1bc:	10bbd904 	addi	r2,r2,-4252
    b1c0:	10800017 	ldw	r2,0(r2)
    b1c4:	103ee83a 	callr	r2
    b1c8:	00000206 	br	b1d4 <alt_get_errno+0x3c>
    b1cc:	00800074 	movhi	r2,1
    b1d0:	10827904 	addi	r2,r2,2532
}
    b1d4:	e037883a 	mov	sp,fp
    b1d8:	dfc00117 	ldw	ra,4(sp)
    b1dc:	df000017 	ldw	fp,0(sp)
    b1e0:	dec00204 	addi	sp,sp,8
    b1e4:	f800283a 	ret

0000b1e8 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    b1e8:	defff904 	addi	sp,sp,-28
    b1ec:	dfc00615 	stw	ra,24(sp)
    b1f0:	df000515 	stw	fp,20(sp)
    b1f4:	df000504 	addi	fp,sp,20
    b1f8:	e13ffd15 	stw	r4,-12(fp)
    b1fc:	e17ffe15 	stw	r5,-8(fp)
    b200:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    b204:	e0bffd17 	ldw	r2,-12(fp)
    b208:	10000716 	blt	r2,zero,b228 <write+0x40>
    b20c:	e13ffd17 	ldw	r4,-12(fp)
    b210:	01400304 	movi	r5,12
    b214:	0000e440 	call	e44 <__mulsi3>
    b218:	00c00074 	movhi	r3,1
    b21c:	18f75704 	addi	r3,r3,-8868
    b220:	10c5883a 	add	r2,r2,r3
    b224:	00000106 	br	b22c <write+0x44>
    b228:	0005883a 	mov	r2,zero
    b22c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    b230:	e0bffb17 	ldw	r2,-20(fp)
    b234:	10001f26 	beq	r2,zero,b2b4 <write+0xcc>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    b238:	e0bffb17 	ldw	r2,-20(fp)
    b23c:	10800217 	ldw	r2,8(r2)
    b240:	108000cc 	andi	r2,r2,3
    b244:	10001726 	beq	r2,zero,b2a4 <write+0xbc>
    b248:	e0bffb17 	ldw	r2,-20(fp)
    b24c:	10800017 	ldw	r2,0(r2)
    b250:	10800617 	ldw	r2,24(r2)
    b254:	10001326 	beq	r2,zero,b2a4 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    b258:	e0bffb17 	ldw	r2,-20(fp)
    b25c:	10800017 	ldw	r2,0(r2)
    b260:	10c00617 	ldw	r3,24(r2)
    b264:	e0bfff17 	ldw	r2,-4(fp)
    b268:	e13ffb17 	ldw	r4,-20(fp)
    b26c:	e17ffe17 	ldw	r5,-8(fp)
    b270:	100d883a 	mov	r6,r2
    b274:	183ee83a 	callr	r3
    b278:	e0bffc15 	stw	r2,-16(fp)
    b27c:	e0bffc17 	ldw	r2,-16(fp)
    b280:	1000060e 	bge	r2,zero,b29c <write+0xb4>
      {
        ALT_ERRNO = -rval;
    b284:	000b1980 	call	b198 <alt_get_errno>
    b288:	e0fffc17 	ldw	r3,-16(fp)
    b28c:	00c7c83a 	sub	r3,zero,r3
    b290:	10c00015 	stw	r3,0(r2)
        return -1;
    b294:	00bfffc4 	movi	r2,-1
    b298:	00000a06 	br	b2c4 <write+0xdc>
      }
      return rval;
    b29c:	e0bffc17 	ldw	r2,-16(fp)
    b2a0:	00000806 	br	b2c4 <write+0xdc>
    }
    else
    {
      ALT_ERRNO = EACCES;
    b2a4:	000b1980 	call	b198 <alt_get_errno>
    b2a8:	00c00344 	movi	r3,13
    b2ac:	10c00015 	stw	r3,0(r2)
    b2b0:	00000306 	br	b2c0 <write+0xd8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    b2b4:	000b1980 	call	b198 <alt_get_errno>
    b2b8:	00c01444 	movi	r3,81
    b2bc:	10c00015 	stw	r3,0(r2)
  }
  return -1;
    b2c0:	00bfffc4 	movi	r2,-1
}
    b2c4:	e037883a 	mov	sp,fp
    b2c8:	dfc00117 	ldw	ra,4(sp)
    b2cc:	df000017 	ldw	fp,0(sp)
    b2d0:	dec00204 	addi	sp,sp,8
    b2d4:	f800283a 	ret

0000b2d8 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
    b2d8:	defffd04 	addi	sp,sp,-12
    b2dc:	dfc00215 	stw	ra,8(sp)
    b2e0:	df000115 	stw	fp,4(sp)
    b2e4:	df000104 	addi	fp,sp,4
    b2e8:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    b2ec:	e13fff17 	ldw	r4,-4(fp)
    b2f0:	01400074 	movhi	r5,1
    b2f4:	297bd604 	addi	r5,r5,-4264
    b2f8:	000bf700 	call	bf70 <alt_dev_llist_insert>
}
    b2fc:	e037883a 	mov	sp,fp
    b300:	dfc00117 	ldw	ra,4(sp)
    b304:	df000017 	ldw	fp,0(sp)
    b308:	dec00204 	addi	sp,sp,8
    b30c:	f800283a 	ret

0000b310 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    b310:	defffd04 	addi	sp,sp,-12
    b314:	dfc00215 	stw	ra,8(sp)
    b318:	df000115 	stw	fp,4(sp)
    b31c:	df000104 	addi	fp,sp,4
    b320:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_IRQ_INIT ( CPU, CPU);
    b324:	000c79c0 	call	c79c <altera_nios2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    b328:	00800044 	movi	r2,1
    b32c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    b330:	e037883a 	mov	sp,fp
    b334:	dfc00117 	ldw	ra,4(sp)
    b338:	df000017 	ldw	fp,0(sp)
    b33c:	dec00204 	addi	sp,sp,8
    b340:	f800283a 	ret

0000b344 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    b344:	defffe04 	addi	sp,sp,-8
    b348:	dfc00115 	stw	ra,4(sp)
    b34c:	df000015 	stw	fp,0(sp)
    b350:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( INTERVAL_TIMER, Interval_timer);
    b354:	01040034 	movhi	r4,4096
    b358:	21080004 	addi	r4,r4,8192
    b35c:	000b883a 	mov	r5,zero
    b360:	000d883a 	mov	r6,zero
    b364:	01c00204 	movi	r7,8
    b368:	000be7c0 	call	be7c <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, JTAG_UART);
    b36c:	01000074 	movhi	r4,1
    b370:	2137c104 	addi	r4,r4,-8444
    b374:	000b883a 	mov	r5,zero
    b378:	01800204 	movi	r6,8
    b37c:	000b5080 	call	b508 <altera_avalon_jtag_uart_init>
    b380:	01000074 	movhi	r4,1
    b384:	2137b704 	addi	r4,r4,-8484
    b388:	000b2d80 	call	b2d8 <alt_dev_reg>
    ALTERA_AVALON_SYSID_INIT ( SYSID, sysid);
    b38c:	0001883a 	nop
}
    b390:	e037883a 	mov	sp,fp
    b394:	dfc00117 	ldw	ra,4(sp)
    b398:	df000017 	ldw	fp,0(sp)
    b39c:	dec00204 	addi	sp,sp,8
    b3a0:	f800283a 	ret

0000b3a4 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    b3a4:	defffa04 	addi	sp,sp,-24
    b3a8:	dfc00515 	stw	ra,20(sp)
    b3ac:	df000415 	stw	fp,16(sp)
    b3b0:	df000404 	addi	fp,sp,16
    b3b4:	e13ffd15 	stw	r4,-12(fp)
    b3b8:	e17ffe15 	stw	r5,-8(fp)
    b3bc:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    b3c0:	e0bffd17 	ldw	r2,-12(fp)
    b3c4:	10800017 	ldw	r2,0(r2)
    b3c8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    b3cc:	e0bffc17 	ldw	r2,-16(fp)
    b3d0:	10c00a04 	addi	r3,r2,40
      fd->fd_flags);
    b3d4:	e0bffd17 	ldw	r2,-12(fp)
int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    b3d8:	10800217 	ldw	r2,8(r2)
    b3dc:	1809883a 	mov	r4,r3
    b3e0:	e17ffe17 	ldw	r5,-8(fp)
    b3e4:	e1bfff17 	ldw	r6,-4(fp)
    b3e8:	100f883a 	mov	r7,r2
    b3ec:	000b9cc0 	call	b9cc <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
    b3f0:	e037883a 	mov	sp,fp
    b3f4:	dfc00117 	ldw	ra,4(sp)
    b3f8:	df000017 	ldw	fp,0(sp)
    b3fc:	dec00204 	addi	sp,sp,8
    b400:	f800283a 	ret

0000b404 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    b404:	defffa04 	addi	sp,sp,-24
    b408:	dfc00515 	stw	ra,20(sp)
    b40c:	df000415 	stw	fp,16(sp)
    b410:	df000404 	addi	fp,sp,16
    b414:	e13ffd15 	stw	r4,-12(fp)
    b418:	e17ffe15 	stw	r5,-8(fp)
    b41c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    b420:	e0bffd17 	ldw	r2,-12(fp)
    b424:	10800017 	ldw	r2,0(r2)
    b428:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    b42c:	e0bffc17 	ldw	r2,-16(fp)
    b430:	10c00a04 	addi	r3,r2,40
      fd->fd_flags);
    b434:	e0bffd17 	ldw	r2,-12(fp)
int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    b438:	10800217 	ldw	r2,8(r2)
    b43c:	1809883a 	mov	r4,r3
    b440:	e17ffe17 	ldw	r5,-8(fp)
    b444:	e1bfff17 	ldw	r6,-4(fp)
    b448:	100f883a 	mov	r7,r2
    b44c:	000bbe40 	call	bbe4 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
    b450:	e037883a 	mov	sp,fp
    b454:	dfc00117 	ldw	ra,4(sp)
    b458:	df000017 	ldw	fp,0(sp)
    b45c:	dec00204 	addi	sp,sp,8
    b460:	f800283a 	ret

0000b464 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
    b464:	defffc04 	addi	sp,sp,-16
    b468:	dfc00315 	stw	ra,12(sp)
    b46c:	df000215 	stw	fp,8(sp)
    b470:	df000204 	addi	fp,sp,8
    b474:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    b478:	e0bfff17 	ldw	r2,-4(fp)
    b47c:	10800017 	ldw	r2,0(r2)
    b480:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
    b484:	e0bffe17 	ldw	r2,-8(fp)
    b488:	10c00a04 	addi	r3,r2,40
    b48c:	e0bfff17 	ldw	r2,-4(fp)
    b490:	10800217 	ldw	r2,8(r2)
    b494:	1809883a 	mov	r4,r3
    b498:	100b883a 	mov	r5,r2
    b49c:	000b8700 	call	b870 <altera_avalon_jtag_uart_close>
}
    b4a0:	e037883a 	mov	sp,fp
    b4a4:	dfc00117 	ldw	ra,4(sp)
    b4a8:	df000017 	ldw	fp,0(sp)
    b4ac:	dec00204 	addi	sp,sp,8
    b4b0:	f800283a 	ret

0000b4b4 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
    b4b4:	defffa04 	addi	sp,sp,-24
    b4b8:	dfc00515 	stw	ra,20(sp)
    b4bc:	df000415 	stw	fp,16(sp)
    b4c0:	df000404 	addi	fp,sp,16
    b4c4:	e13ffd15 	stw	r4,-12(fp)
    b4c8:	e17ffe15 	stw	r5,-8(fp)
    b4cc:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
    b4d0:	e0bffd17 	ldw	r2,-12(fp)
    b4d4:	10800017 	ldw	r2,0(r2)
    b4d8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
    b4dc:	e0bffc17 	ldw	r2,-16(fp)
    b4e0:	10800a04 	addi	r2,r2,40
    b4e4:	1009883a 	mov	r4,r2
    b4e8:	e17ffe17 	ldw	r5,-8(fp)
    b4ec:	e1bfff17 	ldw	r6,-4(fp)
    b4f0:	000b8d80 	call	b8d8 <altera_avalon_jtag_uart_ioctl>
}
    b4f4:	e037883a 	mov	sp,fp
    b4f8:	dfc00117 	ldw	ra,4(sp)
    b4fc:	df000017 	ldw	fp,0(sp)
    b500:	dec00204 	addi	sp,sp,8
    b504:	f800283a 	ret

0000b508 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
    b508:	defffa04 	addi	sp,sp,-24
    b50c:	dfc00515 	stw	ra,20(sp)
    b510:	df000415 	stw	fp,16(sp)
    b514:	df000404 	addi	fp,sp,16
    b518:	e13ffd15 	stw	r4,-12(fp)
    b51c:	e17ffe15 	stw	r5,-8(fp)
    b520:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    b524:	e0bffd17 	ldw	r2,-12(fp)
    b528:	00c00044 	movi	r3,1
    b52c:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
    b530:	e0bffd17 	ldw	r2,-12(fp)
    b534:	10800017 	ldw	r2,0(r2)
    b538:	10800104 	addi	r2,r2,4
    b53c:	e0fffd17 	ldw	r3,-12(fp)
    b540:	18c00817 	ldw	r3,32(r3)
    b544:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
    b548:	e0fffe17 	ldw	r3,-8(fp)
    b54c:	e0bfff17 	ldw	r2,-4(fp)
    b550:	d8000015 	stw	zero,0(sp)
    b554:	1809883a 	mov	r4,r3
    b558:	100b883a 	mov	r5,r2
    b55c:	01800074 	movhi	r6,1
    b560:	31ad7204 	addi	r6,r6,-19000
    b564:	e1fffd17 	ldw	r7,-12(fp)
    b568:	000c0e40 	call	c0e4 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
    b56c:	e0bffd17 	ldw	r2,-12(fp)
    b570:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
    b574:	e0bffd17 	ldw	r2,-12(fp)
    b578:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    b57c:	00800074 	movhi	r2,1
    b580:	10828004 	addi	r2,r2,2560
    b584:	10800017 	ldw	r2,0(r2)
    b588:	1809883a 	mov	r4,r3
    b58c:	100b883a 	mov	r5,r2
    b590:	01800074 	movhi	r6,1
    b594:	31adf304 	addi	r6,r6,-18484
    b598:	e1fffd17 	ldw	r7,-12(fp)
    b59c:	000a3bc0 	call	a3bc <alt_alarm_start>
    b5a0:	1000040e 	bge	r2,zero,b5b4 <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
    b5a4:	e0bffd17 	ldw	r2,-12(fp)
    b5a8:	00e00034 	movhi	r3,32768
    b5ac:	18ffffc4 	addi	r3,r3,-1
    b5b0:	10c00115 	stw	r3,4(r2)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
    b5b4:	e037883a 	mov	sp,fp
    b5b8:	dfc00117 	ldw	ra,4(sp)
    b5bc:	df000017 	ldw	fp,0(sp)
    b5c0:	dec00204 	addi	sp,sp,8
    b5c4:	f800283a 	ret

0000b5c8 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
    b5c8:	defff804 	addi	sp,sp,-32
    b5cc:	df000715 	stw	fp,28(sp)
    b5d0:	df000704 	addi	fp,sp,28
    b5d4:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
    b5d8:	e0bfff17 	ldw	r2,-4(fp)
    b5dc:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
    b5e0:	e0bffb17 	ldw	r2,-20(fp)
    b5e4:	10800017 	ldw	r2,0(r2)
    b5e8:	e0bffc15 	stw	r2,-16(fp)
    b5ec:	00000106 	br	b5f4 <altera_avalon_jtag_uart_irq+0x2c>
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
    b5f0:	0001883a 	nop
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    b5f4:	e0bffc17 	ldw	r2,-16(fp)
    b5f8:	10800104 	addi	r2,r2,4
    b5fc:	10800037 	ldwio	r2,0(r2)
    b600:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
    b604:	e0bffd17 	ldw	r2,-12(fp)
    b608:	1080c00c 	andi	r2,r2,768
    b60c:	10006a26 	beq	r2,zero,b7b8 <altera_avalon_jtag_uart_irq+0x1f0>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
    b610:	e0bffd17 	ldw	r2,-12(fp)
    b614:	1080400c 	andi	r2,r2,256
    b618:	10003326 	beq	r2,zero,b6e8 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
    b61c:	00800074 	movhi	r2,1
    b620:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    b624:	e0bffb17 	ldw	r2,-20(fp)
    b628:	10800a17 	ldw	r2,40(r2)
    b62c:	10800044 	addi	r2,r2,1
    b630:	1081ffcc 	andi	r2,r2,2047
    b634:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
    b638:	e0bffb17 	ldw	r2,-20(fp)
    b63c:	10c00b17 	ldw	r3,44(r2)
    b640:	e0bffe17 	ldw	r2,-8(fp)
    b644:	18801426 	beq	r3,r2,b698 <altera_avalon_jtag_uart_irq+0xd0>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    b648:	e0bffc17 	ldw	r2,-16(fp)
    b64c:	10800037 	ldwio	r2,0(r2)
    b650:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
    b654:	e0bff917 	ldw	r2,-28(fp)
    b658:	10a0000c 	andi	r2,r2,32768
    b65c:	10001026 	beq	r2,zero,b6a0 <altera_avalon_jtag_uart_irq+0xd8>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    b660:	e0bffb17 	ldw	r2,-20(fp)
    b664:	10800a17 	ldw	r2,40(r2)
    b668:	e0fff917 	ldw	r3,-28(fp)
    b66c:	e13ffb17 	ldw	r4,-20(fp)
    b670:	2085883a 	add	r2,r4,r2
    b674:	10800e04 	addi	r2,r2,56
    b678:	10c00005 	stb	r3,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    b67c:	e0bffb17 	ldw	r2,-20(fp)
    b680:	10800a17 	ldw	r2,40(r2)
    b684:	10800044 	addi	r2,r2,1
    b688:	10c1ffcc 	andi	r3,r2,2047
    b68c:	e0bffb17 	ldw	r2,-20(fp)
    b690:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
    b694:	003fe306 	br	b624 <altera_avalon_jtag_uart_irq+0x5c>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
    b698:	0001883a 	nop
    b69c:	00000106 	br	b6a4 <altera_avalon_jtag_uart_irq+0xdc>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
    b6a0:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
    b6a4:	e0bff917 	ldw	r2,-28(fp)
    b6a8:	10bfffec 	andhi	r2,r2,65535
    b6ac:	10000e26 	beq	r2,zero,b6e8 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    b6b0:	e0bffb17 	ldw	r2,-20(fp)
    b6b4:	10c00817 	ldw	r3,32(r2)
    b6b8:	00bfff84 	movi	r2,-2
    b6bc:	1886703a 	and	r3,r3,r2
    b6c0:	e0bffb17 	ldw	r2,-20(fp)
    b6c4:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
    b6c8:	e0bffc17 	ldw	r2,-16(fp)
    b6cc:	10800104 	addi	r2,r2,4
    b6d0:	e0fffb17 	ldw	r3,-20(fp)
    b6d4:	18c00817 	ldw	r3,32(r3)
    b6d8:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    b6dc:	e0bffc17 	ldw	r2,-16(fp)
    b6e0:	10800104 	addi	r2,r2,4
    b6e4:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    b6e8:	e0bffd17 	ldw	r2,-12(fp)
    b6ec:	1080800c 	andi	r2,r2,512
    b6f0:	103fbf26 	beq	r2,zero,b5f0 <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
    b6f4:	e0bffd17 	ldw	r2,-12(fp)
    b6f8:	1004d43a 	srli	r2,r2,16
    b6fc:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
    b700:	00001406 	br	b754 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
    b704:	e0bffc17 	ldw	r2,-16(fp)
    b708:	e0fffb17 	ldw	r3,-20(fp)
    b70c:	18c00d17 	ldw	r3,52(r3)
    b710:	e13ffb17 	ldw	r4,-20(fp)
    b714:	20c7883a 	add	r3,r4,r3
    b718:	18c20e04 	addi	r3,r3,2104
    b71c:	18c00003 	ldbu	r3,0(r3)
    b720:	18c03fcc 	andi	r3,r3,255
    b724:	18c0201c 	xori	r3,r3,128
    b728:	18ffe004 	addi	r3,r3,-128
    b72c:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    b730:	e0bffb17 	ldw	r2,-20(fp)
    b734:	10800d17 	ldw	r2,52(r2)
    b738:	10800044 	addi	r2,r2,1
    b73c:	10c1ffcc 	andi	r3,r2,2047
    b740:	e0bffb17 	ldw	r2,-20(fp)
    b744:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
    b748:	e0bffa17 	ldw	r2,-24(fp)
    b74c:	10bfffc4 	addi	r2,r2,-1
    b750:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
    b754:	e0bffa17 	ldw	r2,-24(fp)
    b758:	10000526 	beq	r2,zero,b770 <altera_avalon_jtag_uart_irq+0x1a8>
    b75c:	e0bffb17 	ldw	r2,-20(fp)
    b760:	10c00d17 	ldw	r3,52(r2)
    b764:	e0bffb17 	ldw	r2,-20(fp)
    b768:	10800c17 	ldw	r2,48(r2)
    b76c:	18bfe51e 	bne	r3,r2,b704 <altera_avalon_jtag_uart_irq+0x13c>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
    b770:	e0bffa17 	ldw	r2,-24(fp)
    b774:	103f9e26 	beq	r2,zero,b5f0 <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    b778:	e0bffb17 	ldw	r2,-20(fp)
    b77c:	10c00817 	ldw	r3,32(r2)
    b780:	00bfff44 	movi	r2,-3
    b784:	1886703a 	and	r3,r3,r2
    b788:	e0bffb17 	ldw	r2,-20(fp)
    b78c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    b790:	e0bffb17 	ldw	r2,-20(fp)
    b794:	10800017 	ldw	r2,0(r2)
    b798:	10800104 	addi	r2,r2,4
    b79c:	e0fffb17 	ldw	r3,-20(fp)
    b7a0:	18c00817 	ldw	r3,32(r3)
    b7a4:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    b7a8:	e0bffc17 	ldw	r2,-16(fp)
    b7ac:	10800104 	addi	r2,r2,4
    b7b0:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
    b7b4:	003f8e06 	br	b5f0 <altera_avalon_jtag_uart_irq+0x28>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
    b7b8:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
    b7bc:	e037883a 	mov	sp,fp
    b7c0:	df000017 	ldw	fp,0(sp)
    b7c4:	dec00104 	addi	sp,sp,4
    b7c8:	f800283a 	ret

0000b7cc <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
    b7cc:	defffc04 	addi	sp,sp,-16
    b7d0:	df000315 	stw	fp,12(sp)
    b7d4:	df000304 	addi	fp,sp,12
    b7d8:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
    b7dc:	e0bfff17 	ldw	r2,-4(fp)
    b7e0:	e0bffd15 	stw	r2,-12(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
    b7e4:	e0bffd17 	ldw	r2,-12(fp)
    b7e8:	10800017 	ldw	r2,0(r2)
    b7ec:	10800104 	addi	r2,r2,4
    b7f0:	10800037 	ldwio	r2,0(r2)
    b7f4:	e0bffe15 	stw	r2,-8(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
    b7f8:	e0bffe17 	ldw	r2,-8(fp)
    b7fc:	1081000c 	andi	r2,r2,1024
    b800:	10000a26 	beq	r2,zero,b82c <altera_avalon_jtag_uart_timeout+0x60>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
    b804:	e0bffd17 	ldw	r2,-12(fp)
    b808:	10800017 	ldw	r2,0(r2)
    b80c:	10800104 	addi	r2,r2,4
    b810:	e0fffd17 	ldw	r3,-12(fp)
    b814:	18c00817 	ldw	r3,32(r3)
    b818:	18c10014 	ori	r3,r3,1024
    b81c:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
    b820:	e0bffd17 	ldw	r2,-12(fp)
    b824:	10000915 	stw	zero,36(r2)
    b828:	00000a06 	br	b854 <altera_avalon_jtag_uart_timeout+0x88>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
    b82c:	e0bffd17 	ldw	r2,-12(fp)
    b830:	10800917 	ldw	r2,36(r2)
    b834:	00e00034 	movhi	r3,32768
    b838:	18ffff04 	addi	r3,r3,-4
    b83c:	18800536 	bltu	r3,r2,b854 <altera_avalon_jtag_uart_timeout+0x88>
    sp->host_inactive++;
    b840:	e0bffd17 	ldw	r2,-12(fp)
    b844:	10800917 	ldw	r2,36(r2)
    b848:	10c00044 	addi	r3,r2,1
    b84c:	e0bffd17 	ldw	r2,-12(fp)
    b850:	10c00915 	stw	r3,36(r2)
    b854:	00800074 	movhi	r2,1
    b858:	10828004 	addi	r2,r2,2560
    b85c:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
    b860:	e037883a 	mov	sp,fp
    b864:	df000017 	ldw	fp,0(sp)
    b868:	dec00104 	addi	sp,sp,4
    b86c:	f800283a 	ret

0000b870 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
    b870:	defffd04 	addi	sp,sp,-12
    b874:	df000215 	stw	fp,8(sp)
    b878:	df000204 	addi	fp,sp,8
    b87c:	e13ffe15 	stw	r4,-8(fp)
    b880:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    b884:	00000506 	br	b89c <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
    b888:	e0bfff17 	ldw	r2,-4(fp)
    b88c:	1090000c 	andi	r2,r2,16384
    b890:	10000226 	beq	r2,zero,b89c <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
    b894:	00bffd44 	movi	r2,-11
    b898:	00000b06 	br	b8c8 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    b89c:	e0bffe17 	ldw	r2,-8(fp)
    b8a0:	10c00d17 	ldw	r3,52(r2)
    b8a4:	e0bffe17 	ldw	r2,-8(fp)
    b8a8:	10800c17 	ldw	r2,48(r2)
    b8ac:	18800526 	beq	r3,r2,b8c4 <altera_avalon_jtag_uart_close+0x54>
    b8b0:	e0bffe17 	ldw	r2,-8(fp)
    b8b4:	10c00917 	ldw	r3,36(r2)
    b8b8:	e0bffe17 	ldw	r2,-8(fp)
    b8bc:	10800117 	ldw	r2,4(r2)
    b8c0:	18bff136 	bltu	r3,r2,b888 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
    b8c4:	0005883a 	mov	r2,zero
}
    b8c8:	e037883a 	mov	sp,fp
    b8cc:	df000017 	ldw	fp,0(sp)
    b8d0:	dec00104 	addi	sp,sp,4
    b8d4:	f800283a 	ret

0000b8d8 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
    b8d8:	defffa04 	addi	sp,sp,-24
    b8dc:	df000515 	stw	fp,20(sp)
    b8e0:	df000504 	addi	fp,sp,20
    b8e4:	e13ffd15 	stw	r4,-12(fp)
    b8e8:	e17ffe15 	stw	r5,-8(fp)
    b8ec:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
    b8f0:	00bff9c4 	movi	r2,-25
    b8f4:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
    b8f8:	e0bffe17 	ldw	r2,-8(fp)
    b8fc:	10da8060 	cmpeqi	r3,r2,27137
    b900:	1800031e 	bne	r3,zero,b910 <altera_avalon_jtag_uart_ioctl+0x38>
    b904:	109a80a0 	cmpeqi	r2,r2,27138
    b908:	1000181e 	bne	r2,zero,b96c <altera_avalon_jtag_uart_ioctl+0x94>
    b90c:	00002606 	br	b9a8 <altera_avalon_jtag_uart_ioctl+0xd0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
    b910:	e0bffd17 	ldw	r2,-12(fp)
    b914:	10c00117 	ldw	r3,4(r2)
    b918:	00a00034 	movhi	r2,32768
    b91c:	10bfffc4 	addi	r2,r2,-1
    b920:	18802226 	beq	r3,r2,b9ac <altera_avalon_jtag_uart_ioctl+0xd4>
    {
      int timeout = *((int *)arg);
    b924:	e0bfff17 	ldw	r2,-4(fp)
    b928:	10800017 	ldw	r2,0(r2)
    b92c:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
    b930:	e0bffc17 	ldw	r2,-16(fp)
    b934:	10800090 	cmplti	r2,r2,2
    b938:	1000061e 	bne	r2,zero,b954 <altera_avalon_jtag_uart_ioctl+0x7c>
    b93c:	e0fffc17 	ldw	r3,-16(fp)
    b940:	00a00034 	movhi	r2,32768
    b944:	10bfffc4 	addi	r2,r2,-1
    b948:	18800226 	beq	r3,r2,b954 <altera_avalon_jtag_uart_ioctl+0x7c>
    b94c:	e0bffc17 	ldw	r2,-16(fp)
    b950:	00000206 	br	b95c <altera_avalon_jtag_uart_ioctl+0x84>
    b954:	00a00034 	movhi	r2,32768
    b958:	10bfff84 	addi	r2,r2,-2
    b95c:	e0fffd17 	ldw	r3,-12(fp)
    b960:	18800115 	stw	r2,4(r3)
      rc = 0;
    b964:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
    b968:	00001006 	br	b9ac <altera_avalon_jtag_uart_ioctl+0xd4>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
    b96c:	e0bffd17 	ldw	r2,-12(fp)
    b970:	10c00117 	ldw	r3,4(r2)
    b974:	00a00034 	movhi	r2,32768
    b978:	10bfffc4 	addi	r2,r2,-1
    b97c:	18800d26 	beq	r3,r2,b9b4 <altera_avalon_jtag_uart_ioctl+0xdc>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
    b980:	e0bffd17 	ldw	r2,-12(fp)
    b984:	10c00917 	ldw	r3,36(r2)
    b988:	e0bffd17 	ldw	r2,-12(fp)
    b98c:	10800117 	ldw	r2,4(r2)
    b990:	1885803a 	cmpltu	r2,r3,r2
    b994:	10c03fcc 	andi	r3,r2,255
    b998:	e0bfff17 	ldw	r2,-4(fp)
    b99c:	10c00015 	stw	r3,0(r2)
      rc = 0;
    b9a0:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
    b9a4:	00000306 	br	b9b4 <altera_avalon_jtag_uart_ioctl+0xdc>

  default:
    break;
    b9a8:	00000306 	br	b9b8 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
    b9ac:	0001883a 	nop
    b9b0:	00000106 	br	b9b8 <altera_avalon_jtag_uart_ioctl+0xe0>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
    b9b4:	0001883a 	nop

  default:
    break;
  }

  return rc;
    b9b8:	e0bffb17 	ldw	r2,-20(fp)
}
    b9bc:	e037883a 	mov	sp,fp
    b9c0:	df000017 	ldw	fp,0(sp)
    b9c4:	dec00104 	addi	sp,sp,4
    b9c8:	f800283a 	ret

0000b9cc <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
    b9cc:	defff304 	addi	sp,sp,-52
    b9d0:	dfc00c15 	stw	ra,48(sp)
    b9d4:	df000b15 	stw	fp,44(sp)
    b9d8:	df000b04 	addi	fp,sp,44
    b9dc:	e13ffc15 	stw	r4,-16(fp)
    b9e0:	e17ffd15 	stw	r5,-12(fp)
    b9e4:	e1bffe15 	stw	r6,-8(fp)
    b9e8:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
    b9ec:	e0bffd17 	ldw	r2,-12(fp)
    b9f0:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    b9f4:	00004706 	br	bb14 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
    b9f8:	e0bffc17 	ldw	r2,-16(fp)
    b9fc:	10800a17 	ldw	r2,40(r2)
    ba00:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
    ba04:	e0bffc17 	ldw	r2,-16(fp)
    ba08:	10800b17 	ldw	r2,44(r2)
    ba0c:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
    ba10:	e0fff717 	ldw	r3,-36(fp)
    ba14:	e0bff817 	ldw	r2,-32(fp)
    ba18:	18800536 	bltu	r3,r2,ba30 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
    ba1c:	e0fff717 	ldw	r3,-36(fp)
    ba20:	e0bff817 	ldw	r2,-32(fp)
    ba24:	1885c83a 	sub	r2,r3,r2
    ba28:	e0bff615 	stw	r2,-40(fp)
    ba2c:	00000406 	br	ba40 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
    ba30:	00c20004 	movi	r3,2048
    ba34:	e0bff817 	ldw	r2,-32(fp)
    ba38:	1885c83a 	sub	r2,r3,r2
    ba3c:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
    ba40:	e0bff617 	ldw	r2,-40(fp)
    ba44:	10001e26 	beq	r2,zero,bac0 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
    ba48:	e0fffe17 	ldw	r3,-8(fp)
    ba4c:	e0bff617 	ldw	r2,-40(fp)
    ba50:	1880022e 	bgeu	r3,r2,ba5c <altera_avalon_jtag_uart_read+0x90>
        n = space;
    ba54:	e0bffe17 	ldw	r2,-8(fp)
    ba58:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
    ba5c:	e0bff817 	ldw	r2,-32(fp)
    ba60:	10800e04 	addi	r2,r2,56
    ba64:	e0fffc17 	ldw	r3,-16(fp)
    ba68:	1885883a 	add	r2,r3,r2
    ba6c:	e13ff517 	ldw	r4,-44(fp)
    ba70:	100b883a 	mov	r5,r2
    ba74:	e1bff617 	ldw	r6,-40(fp)
    ba78:	00017000 	call	1700 <memcpy>
      ptr   += n;
    ba7c:	e0fff517 	ldw	r3,-44(fp)
    ba80:	e0bff617 	ldw	r2,-40(fp)
    ba84:	1885883a 	add	r2,r3,r2
    ba88:	e0bff515 	stw	r2,-44(fp)
      space -= n;
    ba8c:	e0fffe17 	ldw	r3,-8(fp)
    ba90:	e0bff617 	ldw	r2,-40(fp)
    ba94:	1885c83a 	sub	r2,r3,r2
    ba98:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    ba9c:	e0fff817 	ldw	r3,-32(fp)
    baa0:	e0bff617 	ldw	r2,-40(fp)
    baa4:	1885883a 	add	r2,r3,r2
    baa8:	10c1ffcc 	andi	r3,r2,2047
    baac:	e0bffc17 	ldw	r2,-16(fp)
    bab0:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
    bab4:	e0bffe17 	ldw	r2,-8(fp)
    bab8:	00bfcf16 	blt	zero,r2,b9f8 <altera_avalon_jtag_uart_read+0x2c>
    babc:	00000106 	br	bac4 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
    bac0:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
    bac4:	e0fff517 	ldw	r3,-44(fp)
    bac8:	e0bffd17 	ldw	r2,-12(fp)
    bacc:	1880141e 	bne	r3,r2,bb20 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
    bad0:	e0bfff17 	ldw	r2,-4(fp)
    bad4:	1090000c 	andi	r2,r2,16384
    bad8:	1000131e 	bne	r2,zero,bb28 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
    badc:	0001883a 	nop
    bae0:	e0bffc17 	ldw	r2,-16(fp)
    bae4:	10c00a17 	ldw	r3,40(r2)
    bae8:	e0bff717 	ldw	r2,-36(fp)
    baec:	1880051e 	bne	r3,r2,bb04 <altera_avalon_jtag_uart_read+0x138>
    baf0:	e0bffc17 	ldw	r2,-16(fp)
    baf4:	10c00917 	ldw	r3,36(r2)
    baf8:	e0bffc17 	ldw	r2,-16(fp)
    bafc:	10800117 	ldw	r2,4(r2)
    bb00:	18bff736 	bltu	r3,r2,bae0 <altera_avalon_jtag_uart_read+0x114>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
    bb04:	e0bffc17 	ldw	r2,-16(fp)
    bb08:	10c00a17 	ldw	r3,40(r2)
    bb0c:	e0bff717 	ldw	r2,-36(fp)
    bb10:	18800726 	beq	r3,r2,bb30 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    bb14:	e0bffe17 	ldw	r2,-8(fp)
    bb18:	00bfb716 	blt	zero,r2,b9f8 <altera_avalon_jtag_uart_read+0x2c>
    bb1c:	00000506 	br	bb34 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
    bb20:	0001883a 	nop
    bb24:	00000306 	br	bb34 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
    bb28:	0001883a 	nop
    bb2c:	00000106 	br	bb34 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
    bb30:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
    bb34:	e0fff517 	ldw	r3,-44(fp)
    bb38:	e0bffd17 	ldw	r2,-12(fp)
    bb3c:	18801726 	beq	r3,r2,bb9c <altera_avalon_jtag_uart_read+0x1d0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    bb40:	0005303a 	rdctl	r2,status
    bb44:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    bb48:	e0fffa17 	ldw	r3,-24(fp)
    bb4c:	00bfff84 	movi	r2,-2
    bb50:	1884703a 	and	r2,r3,r2
    bb54:	1001703a 	wrctl	status,r2
  
  return context;
    bb58:	e0bffa17 	ldw	r2,-24(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
    bb5c:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    bb60:	e0bffc17 	ldw	r2,-16(fp)
    bb64:	10800817 	ldw	r2,32(r2)
    bb68:	10c00054 	ori	r3,r2,1
    bb6c:	e0bffc17 	ldw	r2,-16(fp)
    bb70:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    bb74:	e0bffc17 	ldw	r2,-16(fp)
    bb78:	10800017 	ldw	r2,0(r2)
    bb7c:	10800104 	addi	r2,r2,4
    bb80:	e0fffc17 	ldw	r3,-16(fp)
    bb84:	18c00817 	ldw	r3,32(r3)
    bb88:	10c00035 	stwio	r3,0(r2)
    bb8c:	e0bff917 	ldw	r2,-28(fp)
    bb90:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    bb94:	e0bffb17 	ldw	r2,-20(fp)
    bb98:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
    bb9c:	e0fff517 	ldw	r3,-44(fp)
    bba0:	e0bffd17 	ldw	r2,-12(fp)
    bba4:	18800426 	beq	r3,r2,bbb8 <altera_avalon_jtag_uart_read+0x1ec>
    return ptr - buffer;
    bba8:	e0fff517 	ldw	r3,-44(fp)
    bbac:	e0bffd17 	ldw	r2,-12(fp)
    bbb0:	1885c83a 	sub	r2,r3,r2
    bbb4:	00000606 	br	bbd0 <altera_avalon_jtag_uart_read+0x204>
  else if (flags & O_NONBLOCK)
    bbb8:	e0bfff17 	ldw	r2,-4(fp)
    bbbc:	1090000c 	andi	r2,r2,16384
    bbc0:	10000226 	beq	r2,zero,bbcc <altera_avalon_jtag_uart_read+0x200>
    return -EWOULDBLOCK;
    bbc4:	00bffd44 	movi	r2,-11
    bbc8:	00000106 	br	bbd0 <altera_avalon_jtag_uart_read+0x204>
  else
    return -EIO;
    bbcc:	00bffec4 	movi	r2,-5
}
    bbd0:	e037883a 	mov	sp,fp
    bbd4:	dfc00117 	ldw	ra,4(sp)
    bbd8:	df000017 	ldw	fp,0(sp)
    bbdc:	dec00204 	addi	sp,sp,8
    bbe0:	f800283a 	ret

0000bbe4 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    bbe4:	defff304 	addi	sp,sp,-52
    bbe8:	dfc00c15 	stw	ra,48(sp)
    bbec:	df000b15 	stw	fp,44(sp)
    bbf0:	df000b04 	addi	fp,sp,44
    bbf4:	e13ffc15 	stw	r4,-16(fp)
    bbf8:	e17ffd15 	stw	r5,-12(fp)
    bbfc:	e1bffe15 	stw	r6,-8(fp)
    bc00:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
    bc04:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
    bc08:	e0bffd17 	ldw	r2,-12(fp)
    bc0c:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    bc10:	00003706 	br	bcf0 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
    bc14:	e0bffc17 	ldw	r2,-16(fp)
    bc18:	10800c17 	ldw	r2,48(r2)
    bc1c:	e0bff815 	stw	r2,-32(fp)
      out = sp->tx_out;
    bc20:	e0bffc17 	ldw	r2,-16(fp)
    bc24:	10800d17 	ldw	r2,52(r2)
    bc28:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
    bc2c:	e0fff817 	ldw	r3,-32(fp)
    bc30:	e0bff517 	ldw	r2,-44(fp)
    bc34:	1880062e 	bgeu	r3,r2,bc50 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
    bc38:	e0fff517 	ldw	r3,-44(fp)
    bc3c:	e0bff817 	ldw	r2,-32(fp)
    bc40:	1885c83a 	sub	r2,r3,r2
    bc44:	10bfffc4 	addi	r2,r2,-1
    bc48:	e0bff615 	stw	r2,-40(fp)
    bc4c:	00000b06 	br	bc7c <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
    bc50:	e0bff517 	ldw	r2,-44(fp)
    bc54:	10000526 	beq	r2,zero,bc6c <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
    bc58:	00c20004 	movi	r3,2048
    bc5c:	e0bff817 	ldw	r2,-32(fp)
    bc60:	1885c83a 	sub	r2,r3,r2
    bc64:	e0bff615 	stw	r2,-40(fp)
    bc68:	00000406 	br	bc7c <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
    bc6c:	00c1ffc4 	movi	r3,2047
    bc70:	e0bff817 	ldw	r2,-32(fp)
    bc74:	1885c83a 	sub	r2,r3,r2
    bc78:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
    bc7c:	e0bff617 	ldw	r2,-40(fp)
    bc80:	10001e26 	beq	r2,zero,bcfc <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
    bc84:	e0fffe17 	ldw	r3,-8(fp)
    bc88:	e0bff617 	ldw	r2,-40(fp)
    bc8c:	1880022e 	bgeu	r3,r2,bc98 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
    bc90:	e0bffe17 	ldw	r2,-8(fp)
    bc94:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
    bc98:	e0bff817 	ldw	r2,-32(fp)
    bc9c:	10820e04 	addi	r2,r2,2104
    bca0:	e0fffc17 	ldw	r3,-16(fp)
    bca4:	1885883a 	add	r2,r3,r2
    bca8:	1009883a 	mov	r4,r2
    bcac:	e17ffd17 	ldw	r5,-12(fp)
    bcb0:	e1bff617 	ldw	r6,-40(fp)
    bcb4:	00017000 	call	1700 <memcpy>
      ptr   += n;
    bcb8:	e0fffd17 	ldw	r3,-12(fp)
    bcbc:	e0bff617 	ldw	r2,-40(fp)
    bcc0:	1885883a 	add	r2,r3,r2
    bcc4:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
    bcc8:	e0fffe17 	ldw	r3,-8(fp)
    bccc:	e0bff617 	ldw	r2,-40(fp)
    bcd0:	1885c83a 	sub	r2,r3,r2
    bcd4:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    bcd8:	e0fff817 	ldw	r3,-32(fp)
    bcdc:	e0bff617 	ldw	r2,-40(fp)
    bce0:	1885883a 	add	r2,r3,r2
    bce4:	10c1ffcc 	andi	r3,r2,2047
    bce8:	e0bffc17 	ldw	r2,-16(fp)
    bcec:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    bcf0:	e0bffe17 	ldw	r2,-8(fp)
    bcf4:	00bfc716 	blt	zero,r2,bc14 <altera_avalon_jtag_uart_write+0x30>
    bcf8:	00000106 	br	bd00 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
    bcfc:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    bd00:	0005303a 	rdctl	r2,status
    bd04:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    bd08:	e0fffa17 	ldw	r3,-24(fp)
    bd0c:	00bfff84 	movi	r2,-2
    bd10:	1884703a 	and	r2,r3,r2
    bd14:	1001703a 	wrctl	status,r2
  
  return context;
    bd18:	e0bffa17 	ldw	r2,-24(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    bd1c:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    bd20:	e0bffc17 	ldw	r2,-16(fp)
    bd24:	10800817 	ldw	r2,32(r2)
    bd28:	10c00094 	ori	r3,r2,2
    bd2c:	e0bffc17 	ldw	r2,-16(fp)
    bd30:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    bd34:	e0bffc17 	ldw	r2,-16(fp)
    bd38:	10800017 	ldw	r2,0(r2)
    bd3c:	10800104 	addi	r2,r2,4
    bd40:	e0fffc17 	ldw	r3,-16(fp)
    bd44:	18c00817 	ldw	r3,32(r3)
    bd48:	10c00035 	stwio	r3,0(r2)
    bd4c:	e0bff917 	ldw	r2,-28(fp)
    bd50:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    bd54:	e0bffb17 	ldw	r2,-20(fp)
    bd58:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    bd5c:	e0bffe17 	ldw	r2,-8(fp)
    bd60:	0080110e 	bge	zero,r2,bda8 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
    bd64:	e0bfff17 	ldw	r2,-4(fp)
    bd68:	1090000c 	andi	r2,r2,16384
    bd6c:	1000111e 	bne	r2,zero,bdb4 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
    bd70:	0001883a 	nop
    bd74:	e0bffc17 	ldw	r2,-16(fp)
    bd78:	10c00d17 	ldw	r3,52(r2)
    bd7c:	e0bff517 	ldw	r2,-44(fp)
    bd80:	1880051e 	bne	r3,r2,bd98 <altera_avalon_jtag_uart_write+0x1b4>
    bd84:	e0bffc17 	ldw	r2,-16(fp)
    bd88:	10c00917 	ldw	r3,36(r2)
    bd8c:	e0bffc17 	ldw	r2,-16(fp)
    bd90:	10800117 	ldw	r2,4(r2)
    bd94:	18bff736 	bltu	r3,r2,bd74 <altera_avalon_jtag_uart_write+0x190>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
    bd98:	e0bffc17 	ldw	r2,-16(fp)
    bd9c:	10c00d17 	ldw	r3,52(r2)
    bda0:	e0bff517 	ldw	r2,-44(fp)
    bda4:	18800526 	beq	r3,r2,bdbc <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
    bda8:	e0bffe17 	ldw	r2,-8(fp)
    bdac:	00bfd016 	blt	zero,r2,bcf0 <altera_avalon_jtag_uart_write+0x10c>
    bdb0:	00000306 	br	bdc0 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
    bdb4:	0001883a 	nop
    bdb8:	00000106 	br	bdc0 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
         break;
    bdbc:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
    bdc0:	e0fffd17 	ldw	r3,-12(fp)
    bdc4:	e0bff717 	ldw	r2,-36(fp)
    bdc8:	18800426 	beq	r3,r2,bddc <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
    bdcc:	e0fffd17 	ldw	r3,-12(fp)
    bdd0:	e0bff717 	ldw	r2,-36(fp)
    bdd4:	1885c83a 	sub	r2,r3,r2
    bdd8:	00000606 	br	bdf4 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
    bddc:	e0bfff17 	ldw	r2,-4(fp)
    bde0:	1090000c 	andi	r2,r2,16384
    bde4:	10000226 	beq	r2,zero,bdf0 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
    bde8:	00bffd44 	movi	r2,-11
    bdec:	00000106 	br	bdf4 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
    bdf0:	00bffec4 	movi	r2,-5
}
    bdf4:	e037883a 	mov	sp,fp
    bdf8:	dfc00117 	ldw	ra,4(sp)
    bdfc:	df000017 	ldw	fp,0(sp)
    be00:	dec00204 	addi	sp,sp,8
    be04:	f800283a 	ret

0000be08 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
    be08:	defffa04 	addi	sp,sp,-24
    be0c:	dfc00515 	stw	ra,20(sp)
    be10:	df000415 	stw	fp,16(sp)
    be14:	df000404 	addi	fp,sp,16
    be18:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
    be1c:	0007883a 	mov	r3,zero
    be20:	e0bfff17 	ldw	r2,-4(fp)
    be24:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
    be28:	e0bfff17 	ldw	r2,-4(fp)
    be2c:	10800104 	addi	r2,r2,4
    be30:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    be34:	0005303a 	rdctl	r2,status
    be38:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    be3c:	e0fffd17 	ldw	r3,-12(fp)
    be40:	00bfff84 	movi	r2,-2
    be44:	1884703a 	and	r2,r3,r2
    be48:	1001703a 	wrctl	status,r2
  
  return context;
    be4c:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
    be50:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
    be54:	000b0940 	call	b094 <alt_tick>
    be58:	e0bffc17 	ldw	r2,-16(fp)
    be5c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    be60:	e0bffe17 	ldw	r2,-8(fp)
    be64:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
    be68:	e037883a 	mov	sp,fp
    be6c:	dfc00117 	ldw	ra,4(sp)
    be70:	df000017 	ldw	fp,0(sp)
    be74:	dec00204 	addi	sp,sp,8
    be78:	f800283a 	ret

0000be7c <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
    be7c:	defff804 	addi	sp,sp,-32
    be80:	dfc00715 	stw	ra,28(sp)
    be84:	df000615 	stw	fp,24(sp)
    be88:	df000604 	addi	fp,sp,24
    be8c:	e13ffc15 	stw	r4,-16(fp)
    be90:	e17ffd15 	stw	r5,-12(fp)
    be94:	e1bffe15 	stw	r6,-8(fp)
    be98:	e1ffff15 	stw	r7,-4(fp)
    be9c:	e0bfff17 	ldw	r2,-4(fp)
    bea0:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
    bea4:	00800074 	movhi	r2,1
    bea8:	10828004 	addi	r2,r2,2560
    beac:	10800017 	ldw	r2,0(r2)
    beb0:	1000041e 	bne	r2,zero,bec4 <alt_avalon_timer_sc_init+0x48>
  {
    _alt_tick_rate = nticks;
    beb4:	00800074 	movhi	r2,1
    beb8:	10828004 	addi	r2,r2,2560
    bebc:	e0fffb17 	ldw	r3,-20(fp)
    bec0:	10c00015 	stw	r3,0(r2)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
    bec4:	e0bffc17 	ldw	r2,-16(fp)
    bec8:	10800104 	addi	r2,r2,4
    becc:	00c001c4 	movi	r3,7
    bed0:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
    bed4:	d8000015 	stw	zero,0(sp)
    bed8:	e13ffd17 	ldw	r4,-12(fp)
    bedc:	e17ffe17 	ldw	r5,-8(fp)
    bee0:	01800074 	movhi	r6,1
    bee4:	31af8204 	addi	r6,r6,-16888
    bee8:	e1fffc17 	ldw	r7,-16(fp)
    beec:	000c0e40 	call	c0e4 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
    bef0:	e037883a 	mov	sp,fp
    bef4:	dfc00117 	ldw	ra,4(sp)
    bef8:	df000017 	ldw	fp,0(sp)
    befc:	dec00204 	addi	sp,sp,8
    bf00:	f800283a 	ret

0000bf04 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    bf04:	deffff04 	addi	sp,sp,-4
    bf08:	df000015 	stw	fp,0(sp)
    bf0c:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    bf10:	e037883a 	mov	sp,fp
    bf14:	df000017 	ldw	fp,0(sp)
    bf18:	dec00104 	addi	sp,sp,4
    bf1c:	f800283a 	ret

0000bf20 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    bf20:	defffe04 	addi	sp,sp,-8
    bf24:	dfc00115 	stw	ra,4(sp)
    bf28:	df000015 	stw	fp,0(sp)
    bf2c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    bf30:	00800074 	movhi	r2,1
    bf34:	10bbd904 	addi	r2,r2,-4252
    bf38:	10800017 	ldw	r2,0(r2)
    bf3c:	10000526 	beq	r2,zero,bf54 <alt_get_errno+0x34>
    bf40:	00800074 	movhi	r2,1
    bf44:	10bbd904 	addi	r2,r2,-4252
    bf48:	10800017 	ldw	r2,0(r2)
    bf4c:	103ee83a 	callr	r2
    bf50:	00000206 	br	bf5c <alt_get_errno+0x3c>
    bf54:	00800074 	movhi	r2,1
    bf58:	10827904 	addi	r2,r2,2532
}
    bf5c:	e037883a 	mov	sp,fp
    bf60:	dfc00117 	ldw	ra,4(sp)
    bf64:	df000017 	ldw	fp,0(sp)
    bf68:	dec00204 	addi	sp,sp,8
    bf6c:	f800283a 	ret

0000bf70 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
    bf70:	defffa04 	addi	sp,sp,-24
    bf74:	dfc00515 	stw	ra,20(sp)
    bf78:	df000415 	stw	fp,16(sp)
    bf7c:	df000404 	addi	fp,sp,16
    bf80:	e13ffe15 	stw	r4,-8(fp)
    bf84:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
    bf88:	e0bffe17 	ldw	r2,-8(fp)
    bf8c:	10000326 	beq	r2,zero,bf9c <alt_dev_llist_insert+0x2c>
    bf90:	e0bffe17 	ldw	r2,-8(fp)
    bf94:	10800217 	ldw	r2,8(r2)
    bf98:	1000051e 	bne	r2,zero,bfb0 <alt_dev_llist_insert+0x40>
  {
    ALT_ERRNO = EINVAL;
    bf9c:	000bf200 	call	bf20 <alt_get_errno>
    bfa0:	00c00584 	movi	r3,22
    bfa4:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
    bfa8:	00bffa84 	movi	r2,-22
    bfac:	00001306 	br	bffc <alt_dev_llist_insert+0x8c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
    bfb0:	e0bffe17 	ldw	r2,-8(fp)
    bfb4:	e0ffff17 	ldw	r3,-4(fp)
    bfb8:	e0fffc15 	stw	r3,-16(fp)
    bfbc:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    bfc0:	e0bffd17 	ldw	r2,-12(fp)
    bfc4:	e0fffc17 	ldw	r3,-16(fp)
    bfc8:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
    bfcc:	e0bffc17 	ldw	r2,-16(fp)
    bfd0:	10c00017 	ldw	r3,0(r2)
    bfd4:	e0bffd17 	ldw	r2,-12(fp)
    bfd8:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    bfdc:	e0bffc17 	ldw	r2,-16(fp)
    bfe0:	10800017 	ldw	r2,0(r2)
    bfe4:	e0fffd17 	ldw	r3,-12(fp)
    bfe8:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
    bfec:	e0bffc17 	ldw	r2,-16(fp)
    bff0:	e0fffd17 	ldw	r3,-12(fp)
    bff4:	10c00015 	stw	r3,0(r2)

  return 0;  
    bff8:	0005883a 	mov	r2,zero
}
    bffc:	e037883a 	mov	sp,fp
    c000:	dfc00117 	ldw	ra,4(sp)
    c004:	df000017 	ldw	fp,0(sp)
    c008:	dec00204 	addi	sp,sp,8
    c00c:	f800283a 	ret

0000c010 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
    c010:	defffd04 	addi	sp,sp,-12
    c014:	dfc00215 	stw	ra,8(sp)
    c018:	df000115 	stw	fp,4(sp)
    c01c:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    c020:	00800074 	movhi	r2,1
    c024:	10b44204 	addi	r2,r2,-12024
    c028:	e0bfff15 	stw	r2,-4(fp)
    c02c:	00000606 	br	c048 <_do_ctors+0x38>
        (*ctor) (); 
    c030:	e0bfff17 	ldw	r2,-4(fp)
    c034:	10800017 	ldw	r2,0(r2)
    c038:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    c03c:	e0bfff17 	ldw	r2,-4(fp)
    c040:	10bfff04 	addi	r2,r2,-4
    c044:	e0bfff15 	stw	r2,-4(fp)
    c048:	e0ffff17 	ldw	r3,-4(fp)
    c04c:	00800074 	movhi	r2,1
    c050:	10b44304 	addi	r2,r2,-12020
    c054:	18bff62e 	bgeu	r3,r2,c030 <_do_ctors+0x20>
        (*ctor) (); 
}
    c058:	e037883a 	mov	sp,fp
    c05c:	dfc00117 	ldw	ra,4(sp)
    c060:	df000017 	ldw	fp,0(sp)
    c064:	dec00204 	addi	sp,sp,8
    c068:	f800283a 	ret

0000c06c <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
    c06c:	defffd04 	addi	sp,sp,-12
    c070:	dfc00215 	stw	ra,8(sp)
    c074:	df000115 	stw	fp,4(sp)
    c078:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    c07c:	00800074 	movhi	r2,1
    c080:	10b44204 	addi	r2,r2,-12024
    c084:	e0bfff15 	stw	r2,-4(fp)
    c088:	00000606 	br	c0a4 <_do_dtors+0x38>
        (*dtor) (); 
    c08c:	e0bfff17 	ldw	r2,-4(fp)
    c090:	10800017 	ldw	r2,0(r2)
    c094:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    c098:	e0bfff17 	ldw	r2,-4(fp)
    c09c:	10bfff04 	addi	r2,r2,-4
    c0a0:	e0bfff15 	stw	r2,-4(fp)
    c0a4:	e0ffff17 	ldw	r3,-4(fp)
    c0a8:	00800074 	movhi	r2,1
    c0ac:	10b44304 	addi	r2,r2,-12020
    c0b0:	18bff62e 	bgeu	r3,r2,c08c <_do_dtors+0x20>
        (*dtor) (); 
}
    c0b4:	e037883a 	mov	sp,fp
    c0b8:	dfc00117 	ldw	ra,4(sp)
    c0bc:	df000017 	ldw	fp,0(sp)
    c0c0:	dec00204 	addi	sp,sp,8
    c0c4:	f800283a 	ret

0000c0c8 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    c0c8:	deffff04 	addi	sp,sp,-4
    c0cc:	df000015 	stw	fp,0(sp)
    c0d0:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
    c0d4:	e037883a 	mov	sp,fp
    c0d8:	df000017 	ldw	fp,0(sp)
    c0dc:	dec00104 	addi	sp,sp,4
    c0e0:	f800283a 	ret

0000c0e4 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    c0e4:	defff904 	addi	sp,sp,-28
    c0e8:	dfc00615 	stw	ra,24(sp)
    c0ec:	df000515 	stw	fp,20(sp)
    c0f0:	df000504 	addi	fp,sp,20
    c0f4:	e13ffc15 	stw	r4,-16(fp)
    c0f8:	e17ffd15 	stw	r5,-12(fp)
    c0fc:	e1bffe15 	stw	r6,-8(fp)
    c100:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
    c104:	e0800217 	ldw	r2,8(fp)
    c108:	d8800015 	stw	r2,0(sp)
    c10c:	e13ffc17 	ldw	r4,-16(fp)
    c110:	e17ffd17 	ldw	r5,-12(fp)
    c114:	e1bffe17 	ldw	r6,-8(fp)
    c118:	e1ffff17 	ldw	r7,-4(fp)
    c11c:	000c2bc0 	call	c2bc <alt_iic_isr_register>
}  
    c120:	e037883a 	mov	sp,fp
    c124:	dfc00117 	ldw	ra,4(sp)
    c128:	df000017 	ldw	fp,0(sp)
    c12c:	dec00204 	addi	sp,sp,8
    c130:	f800283a 	ret

0000c134 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
    c134:	defff904 	addi	sp,sp,-28
    c138:	df000615 	stw	fp,24(sp)
    c13c:	df000604 	addi	fp,sp,24
    c140:	e13ffe15 	stw	r4,-8(fp)
    c144:	e17fff15 	stw	r5,-4(fp)
    c148:	e0bfff17 	ldw	r2,-4(fp)
    c14c:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    c150:	0005303a 	rdctl	r2,status
    c154:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    c158:	e0fffb17 	ldw	r3,-20(fp)
    c15c:	00bfff84 	movi	r2,-2
    c160:	1884703a 	and	r2,r3,r2
    c164:	1001703a 	wrctl	status,r2
  
  return context;
    c168:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    c16c:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
    c170:	e0bffa17 	ldw	r2,-24(fp)
    c174:	00c00044 	movi	r3,1
    c178:	1884983a 	sll	r2,r3,r2
    c17c:	1007883a 	mov	r3,r2
    c180:	00800074 	movhi	r2,1
    c184:	10828204 	addi	r2,r2,2568
    c188:	10800017 	ldw	r2,0(r2)
    c18c:	1886b03a 	or	r3,r3,r2
    c190:	00800074 	movhi	r2,1
    c194:	10828204 	addi	r2,r2,2568
    c198:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    c19c:	00800074 	movhi	r2,1
    c1a0:	10828204 	addi	r2,r2,2568
    c1a4:	10800017 	ldw	r2,0(r2)
    c1a8:	100170fa 	wrctl	ienable,r2
    c1ac:	e0bffc17 	ldw	r2,-16(fp)
    c1b0:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    c1b4:	e0bffd17 	ldw	r2,-12(fp)
    c1b8:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    c1bc:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
    c1c0:	e037883a 	mov	sp,fp
    c1c4:	df000017 	ldw	fp,0(sp)
    c1c8:	dec00104 	addi	sp,sp,4
    c1cc:	f800283a 	ret

0000c1d0 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
    c1d0:	defff904 	addi	sp,sp,-28
    c1d4:	df000615 	stw	fp,24(sp)
    c1d8:	df000604 	addi	fp,sp,24
    c1dc:	e13ffe15 	stw	r4,-8(fp)
    c1e0:	e17fff15 	stw	r5,-4(fp)
    c1e4:	e0bfff17 	ldw	r2,-4(fp)
    c1e8:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    c1ec:	0005303a 	rdctl	r2,status
    c1f0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    c1f4:	e0fffb17 	ldw	r3,-20(fp)
    c1f8:	00bfff84 	movi	r2,-2
    c1fc:	1884703a 	and	r2,r3,r2
    c200:	1001703a 	wrctl	status,r2
  
  return context;
    c204:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    c208:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
    c20c:	e0bffa17 	ldw	r2,-24(fp)
    c210:	00c00044 	movi	r3,1
    c214:	1884983a 	sll	r2,r3,r2
    c218:	0084303a 	nor	r2,zero,r2
    c21c:	1007883a 	mov	r3,r2
    c220:	00800074 	movhi	r2,1
    c224:	10828204 	addi	r2,r2,2568
    c228:	10800017 	ldw	r2,0(r2)
    c22c:	1886703a 	and	r3,r3,r2
    c230:	00800074 	movhi	r2,1
    c234:	10828204 	addi	r2,r2,2568
    c238:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    c23c:	00800074 	movhi	r2,1
    c240:	10828204 	addi	r2,r2,2568
    c244:	10800017 	ldw	r2,0(r2)
    c248:	100170fa 	wrctl	ienable,r2
    c24c:	e0bffc17 	ldw	r2,-16(fp)
    c250:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    c254:	e0bffd17 	ldw	r2,-12(fp)
    c258:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    c25c:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
    c260:	e037883a 	mov	sp,fp
    c264:	df000017 	ldw	fp,0(sp)
    c268:	dec00104 	addi	sp,sp,4
    c26c:	f800283a 	ret

0000c270 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
    c270:	defffc04 	addi	sp,sp,-16
    c274:	df000315 	stw	fp,12(sp)
    c278:	df000304 	addi	fp,sp,12
    c27c:	e13ffe15 	stw	r4,-8(fp)
    c280:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
    c284:	000530fa 	rdctl	r2,ienable
    c288:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
    c28c:	e0bfff17 	ldw	r2,-4(fp)
    c290:	00c00044 	movi	r3,1
    c294:	1884983a 	sll	r2,r3,r2
    c298:	1007883a 	mov	r3,r2
    c29c:	e0bffd17 	ldw	r2,-12(fp)
    c2a0:	1884703a 	and	r2,r3,r2
    c2a4:	1004c03a 	cmpne	r2,r2,zero
    c2a8:	10803fcc 	andi	r2,r2,255
}
    c2ac:	e037883a 	mov	sp,fp
    c2b0:	df000017 	ldw	fp,0(sp)
    c2b4:	dec00104 	addi	sp,sp,4
    c2b8:	f800283a 	ret

0000c2bc <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    c2bc:	defff504 	addi	sp,sp,-44
    c2c0:	dfc00a15 	stw	ra,40(sp)
    c2c4:	df000915 	stw	fp,36(sp)
    c2c8:	df000904 	addi	fp,sp,36
    c2cc:	e13ffc15 	stw	r4,-16(fp)
    c2d0:	e17ffd15 	stw	r5,-12(fp)
    c2d4:	e1bffe15 	stw	r6,-8(fp)
    c2d8:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
    c2dc:	00bffa84 	movi	r2,-22
    c2e0:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
    c2e4:	e0bffd17 	ldw	r2,-12(fp)
    c2e8:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
    c2ec:	e0bff817 	ldw	r2,-32(fp)
    c2f0:	10800808 	cmpgei	r2,r2,32
    c2f4:	1000271e 	bne	r2,zero,c394 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    c2f8:	0005303a 	rdctl	r2,status
    c2fc:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    c300:	e0fffa17 	ldw	r3,-24(fp)
    c304:	00bfff84 	movi	r2,-2
    c308:	1884703a 	and	r2,r3,r2
    c30c:	1001703a 	wrctl	status,r2
  
  return context;
    c310:	e0bffa17 	ldw	r2,-24(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
    c314:	e0bff915 	stw	r2,-28(fp)

    alt_irq[id].handler = isr;
    c318:	00c00074 	movhi	r3,1
    c31c:	18c29204 	addi	r3,r3,2632
    c320:	e0bff817 	ldw	r2,-32(fp)
    c324:	100490fa 	slli	r2,r2,3
    c328:	1885883a 	add	r2,r3,r2
    c32c:	e0fffe17 	ldw	r3,-8(fp)
    c330:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
    c334:	00c00074 	movhi	r3,1
    c338:	18c29204 	addi	r3,r3,2632
    c33c:	e0bff817 	ldw	r2,-32(fp)
    c340:	100490fa 	slli	r2,r2,3
    c344:	1885883a 	add	r2,r3,r2
    c348:	10800104 	addi	r2,r2,4
    c34c:	e0ffff17 	ldw	r3,-4(fp)
    c350:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
    c354:	e0bffe17 	ldw	r2,-8(fp)
    c358:	10000526 	beq	r2,zero,c370 <alt_iic_isr_register+0xb4>
    c35c:	e0bff817 	ldw	r2,-32(fp)
    c360:	e13ffc17 	ldw	r4,-16(fp)
    c364:	100b883a 	mov	r5,r2
    c368:	000c1340 	call	c134 <alt_ic_irq_enable>
    c36c:	00000406 	br	c380 <alt_iic_isr_register+0xc4>
    c370:	e0bff817 	ldw	r2,-32(fp)
    c374:	e13ffc17 	ldw	r4,-16(fp)
    c378:	100b883a 	mov	r5,r2
    c37c:	000c1d00 	call	c1d0 <alt_ic_irq_disable>
    c380:	e0bff715 	stw	r2,-36(fp)
    c384:	e0bff917 	ldw	r2,-28(fp)
    c388:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    c38c:	e0bffb17 	ldw	r2,-20(fp)
    c390:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
    c394:	e0bff717 	ldw	r2,-36(fp)
}
    c398:	e037883a 	mov	sp,fp
    c39c:	dfc00117 	ldw	ra,4(sp)
    c3a0:	df000017 	ldw	fp,0(sp)
    c3a4:	dec00204 	addi	sp,sp,8
    c3a8:	f800283a 	ret

0000c3ac <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
    c3ac:	defff804 	addi	sp,sp,-32
    c3b0:	dfc00715 	stw	ra,28(sp)
    c3b4:	df000615 	stw	fp,24(sp)
    c3b8:	dc000515 	stw	r16,20(sp)
    c3bc:	df000504 	addi	fp,sp,20
    c3c0:	e13ffc15 	stw	r4,-16(fp)
    c3c4:	e17ffd15 	stw	r5,-12(fp)
    c3c8:	e1bffe15 	stw	r6,-8(fp)
    c3cc:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
    c3d0:	e13ffd17 	ldw	r4,-12(fp)
    c3d4:	e17ffe17 	ldw	r5,-8(fp)
    c3d8:	e1bfff17 	ldw	r6,-4(fp)
    c3dc:	000c6440 	call	c644 <open>
    c3e0:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
    c3e4:	e0bffb17 	ldw	r2,-20(fp)
    c3e8:	10002216 	blt	r2,zero,c474 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
    c3ec:	04000074 	movhi	r16,1
    c3f0:	84375704 	addi	r16,r16,-8868
    c3f4:	e0bffb17 	ldw	r2,-20(fp)
    c3f8:	1009883a 	mov	r4,r2
    c3fc:	01400304 	movi	r5,12
    c400:	0000e440 	call	e44 <__mulsi3>
    c404:	8085883a 	add	r2,r16,r2
    c408:	10c00017 	ldw	r3,0(r2)
    c40c:	e0bffc17 	ldw	r2,-16(fp)
    c410:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
    c414:	04000074 	movhi	r16,1
    c418:	84375704 	addi	r16,r16,-8868
    c41c:	e0bffb17 	ldw	r2,-20(fp)
    c420:	1009883a 	mov	r4,r2
    c424:	01400304 	movi	r5,12
    c428:	0000e440 	call	e44 <__mulsi3>
    c42c:	8085883a 	add	r2,r16,r2
    c430:	10800104 	addi	r2,r2,4
    c434:	10c00017 	ldw	r3,0(r2)
    c438:	e0bffc17 	ldw	r2,-16(fp)
    c43c:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
    c440:	04000074 	movhi	r16,1
    c444:	84375704 	addi	r16,r16,-8868
    c448:	e0bffb17 	ldw	r2,-20(fp)
    c44c:	1009883a 	mov	r4,r2
    c450:	01400304 	movi	r5,12
    c454:	0000e440 	call	e44 <__mulsi3>
    c458:	8085883a 	add	r2,r16,r2
    c45c:	10800204 	addi	r2,r2,8
    c460:	10c00017 	ldw	r3,0(r2)
    c464:	e0bffc17 	ldw	r2,-16(fp)
    c468:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
    c46c:	e13ffb17 	ldw	r4,-20(fp)
    c470:	000aecc0 	call	aecc <alt_release_fd>
  }
} 
    c474:	e037883a 	mov	sp,fp
    c478:	dfc00217 	ldw	ra,8(sp)
    c47c:	df000117 	ldw	fp,4(sp)
    c480:	dc000017 	ldw	r16,0(sp)
    c484:	dec00304 	addi	sp,sp,12
    c488:	f800283a 	ret

0000c48c <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    c48c:	defffb04 	addi	sp,sp,-20
    c490:	dfc00415 	stw	ra,16(sp)
    c494:	df000315 	stw	fp,12(sp)
    c498:	df000304 	addi	fp,sp,12
    c49c:	e13ffd15 	stw	r4,-12(fp)
    c4a0:	e17ffe15 	stw	r5,-8(fp)
    c4a4:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
    c4a8:	01000074 	movhi	r4,1
    c4ac:	21375a04 	addi	r4,r4,-8856
    c4b0:	e17ffd17 	ldw	r5,-12(fp)
    c4b4:	01800044 	movi	r6,1
    c4b8:	01c07fc4 	movi	r7,511
    c4bc:	000c3ac0 	call	c3ac <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
    c4c0:	01000074 	movhi	r4,1
    c4c4:	21375704 	addi	r4,r4,-8868
    c4c8:	e17ffe17 	ldw	r5,-8(fp)
    c4cc:	000d883a 	mov	r6,zero
    c4d0:	01c07fc4 	movi	r7,511
    c4d4:	000c3ac0 	call	c3ac <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
    c4d8:	01000074 	movhi	r4,1
    c4dc:	21375d04 	addi	r4,r4,-8844
    c4e0:	e17fff17 	ldw	r5,-4(fp)
    c4e4:	01800044 	movi	r6,1
    c4e8:	01c07fc4 	movi	r7,511
    c4ec:	000c3ac0 	call	c3ac <alt_open_fd>
}  
    c4f0:	e037883a 	mov	sp,fp
    c4f4:	dfc00117 	ldw	ra,4(sp)
    c4f8:	df000017 	ldw	fp,0(sp)
    c4fc:	dec00204 	addi	sp,sp,8
    c500:	f800283a 	ret

0000c504 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    c504:	defffe04 	addi	sp,sp,-8
    c508:	dfc00115 	stw	ra,4(sp)
    c50c:	df000015 	stw	fp,0(sp)
    c510:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    c514:	00800074 	movhi	r2,1
    c518:	10bbd904 	addi	r2,r2,-4252
    c51c:	10800017 	ldw	r2,0(r2)
    c520:	10000526 	beq	r2,zero,c538 <alt_get_errno+0x34>
    c524:	00800074 	movhi	r2,1
    c528:	10bbd904 	addi	r2,r2,-4252
    c52c:	10800017 	ldw	r2,0(r2)
    c530:	103ee83a 	callr	r2
    c534:	00000206 	br	c540 <alt_get_errno+0x3c>
    c538:	00800074 	movhi	r2,1
    c53c:	10827904 	addi	r2,r2,2532
}
    c540:	e037883a 	mov	sp,fp
    c544:	dfc00117 	ldw	ra,4(sp)
    c548:	df000017 	ldw	fp,0(sp)
    c54c:	dec00204 	addi	sp,sp,8
    c550:	f800283a 	ret

0000c554 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
    c554:	defffb04 	addi	sp,sp,-20
    c558:	dfc00415 	stw	ra,16(sp)
    c55c:	df000315 	stw	fp,12(sp)
    c560:	dc000215 	stw	r16,8(sp)
    c564:	df000204 	addi	fp,sp,8
    c568:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    c56c:	e0bfff17 	ldw	r2,-4(fp)
    c570:	10800217 	ldw	r2,8(r2)
    c574:	10d00034 	orhi	r3,r2,16384
    c578:	e0bfff17 	ldw	r2,-4(fp)
    c57c:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    c580:	e03ffe15 	stw	zero,-8(fp)
    c584:	00002206 	br	c610 <alt_file_locked+0xbc>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    c588:	04000074 	movhi	r16,1
    c58c:	84375704 	addi	r16,r16,-8868
    c590:	e0bffe17 	ldw	r2,-8(fp)
    c594:	1009883a 	mov	r4,r2
    c598:	01400304 	movi	r5,12
    c59c:	0000e440 	call	e44 <__mulsi3>
    c5a0:	8085883a 	add	r2,r16,r2
    c5a4:	10c00017 	ldw	r3,0(r2)
    c5a8:	e0bfff17 	ldw	r2,-4(fp)
    c5ac:	10800017 	ldw	r2,0(r2)
    c5b0:	1880141e 	bne	r3,r2,c604 <alt_file_locked+0xb0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    c5b4:	04000074 	movhi	r16,1
    c5b8:	84375704 	addi	r16,r16,-8868
    c5bc:	e0bffe17 	ldw	r2,-8(fp)
    c5c0:	1009883a 	mov	r4,r2
    c5c4:	01400304 	movi	r5,12
    c5c8:	0000e440 	call	e44 <__mulsi3>
    c5cc:	8085883a 	add	r2,r16,r2
    c5d0:	10800204 	addi	r2,r2,8
    c5d4:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    c5d8:	10000a0e 	bge	r2,zero,c604 <alt_file_locked+0xb0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    c5dc:	e13ffe17 	ldw	r4,-8(fp)
    c5e0:	01400304 	movi	r5,12
    c5e4:	0000e440 	call	e44 <__mulsi3>
    c5e8:	00c00074 	movhi	r3,1
    c5ec:	18f75704 	addi	r3,r3,-8868
    c5f0:	10c7883a 	add	r3,r2,r3
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    c5f4:	e0bfff17 	ldw	r2,-4(fp)
    c5f8:	18800226 	beq	r3,r2,c604 <alt_file_locked+0xb0>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
    c5fc:	00bffcc4 	movi	r2,-13
    c600:	00000a06 	br	c62c <alt_file_locked+0xd8>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    c604:	e0bffe17 	ldw	r2,-8(fp)
    c608:	10800044 	addi	r2,r2,1
    c60c:	e0bffe15 	stw	r2,-8(fp)
    c610:	00800074 	movhi	r2,1
    c614:	10bbd804 	addi	r2,r2,-4256
    c618:	10800017 	ldw	r2,0(r2)
    c61c:	1007883a 	mov	r3,r2
    c620:	e0bffe17 	ldw	r2,-8(fp)
    c624:	18bfd82e 	bgeu	r3,r2,c588 <alt_file_locked+0x34>
    }
  }
  
  /* The device is not locked */
 
  return 0;
    c628:	0005883a 	mov	r2,zero
}
    c62c:	e037883a 	mov	sp,fp
    c630:	dfc00217 	ldw	ra,8(sp)
    c634:	df000117 	ldw	fp,4(sp)
    c638:	dc000017 	ldw	r16,0(sp)
    c63c:	dec00304 	addi	sp,sp,12
    c640:	f800283a 	ret

0000c644 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
    c644:	defff604 	addi	sp,sp,-40
    c648:	dfc00915 	stw	ra,36(sp)
    c64c:	df000815 	stw	fp,32(sp)
    c650:	df000804 	addi	fp,sp,32
    c654:	e13ffd15 	stw	r4,-12(fp)
    c658:	e17ffe15 	stw	r5,-8(fp)
    c65c:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
    c660:	00bfffc4 	movi	r2,-1
    c664:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
    c668:	00bffb44 	movi	r2,-19
    c66c:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
    c670:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
    c674:	e13ffd17 	ldw	r4,-12(fp)
    c678:	01400074 	movhi	r5,1
    c67c:	297bd604 	addi	r5,r5,-4264
    c680:	000c7bc0 	call	c7bc <alt_find_dev>
    c684:	e0bff815 	stw	r2,-32(fp)
    c688:	e0bff817 	ldw	r2,-32(fp)
    c68c:	1000051e 	bne	r2,zero,c6a4 <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
    c690:	e13ffd17 	ldw	r4,-12(fp)
    c694:	000c84c0 	call	c84c <alt_find_file>
    c698:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
    c69c:	00800044 	movi	r2,1
    c6a0:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
    c6a4:	e0bff817 	ldw	r2,-32(fp)
    c6a8:	10002a26 	beq	r2,zero,c754 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
    c6ac:	e13ff817 	ldw	r4,-32(fp)
    c6b0:	000c9600 	call	c960 <alt_get_fd>
    c6b4:	e0bff915 	stw	r2,-28(fp)
    c6b8:	e0bff917 	ldw	r2,-28(fp)
    c6bc:	1000030e 	bge	r2,zero,c6cc <open+0x88>
    {
      status = index;
    c6c0:	e0bff917 	ldw	r2,-28(fp)
    c6c4:	e0bffa15 	stw	r2,-24(fp)
    c6c8:	00002406 	br	c75c <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
    c6cc:	e13ff917 	ldw	r4,-28(fp)
    c6d0:	01400304 	movi	r5,12
    c6d4:	0000e440 	call	e44 <__mulsi3>
    c6d8:	00c00074 	movhi	r3,1
    c6dc:	18f75704 	addi	r3,r3,-8868
    c6e0:	10c5883a 	add	r2,r2,r3
    c6e4:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
    c6e8:	e0fffe17 	ldw	r3,-8(fp)
    c6ec:	00900034 	movhi	r2,16384
    c6f0:	10bfffc4 	addi	r2,r2,-1
    c6f4:	1886703a 	and	r3,r3,r2
    c6f8:	e0bffc17 	ldw	r2,-16(fp)
    c6fc:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
    c700:	e0bffb17 	ldw	r2,-20(fp)
    c704:	1000051e 	bne	r2,zero,c71c <open+0xd8>
    c708:	e13ffc17 	ldw	r4,-16(fp)
    c70c:	000c5540 	call	c554 <alt_file_locked>
    c710:	e0bffa15 	stw	r2,-24(fp)
    c714:	e0bffa17 	ldw	r2,-24(fp)
    c718:	10001016 	blt	r2,zero,c75c <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
    c71c:	e0bff817 	ldw	r2,-32(fp)
    c720:	10800317 	ldw	r2,12(r2)
    c724:	10000826 	beq	r2,zero,c748 <open+0x104>
    c728:	e0bff817 	ldw	r2,-32(fp)
    c72c:	10800317 	ldw	r2,12(r2)
    c730:	e13ffc17 	ldw	r4,-16(fp)
    c734:	e17ffd17 	ldw	r5,-12(fp)
    c738:	e1bffe17 	ldw	r6,-8(fp)
    c73c:	e1ffff17 	ldw	r7,-4(fp)
    c740:	103ee83a 	callr	r2
    c744:	00000106 	br	c74c <open+0x108>
    c748:	0005883a 	mov	r2,zero
    c74c:	e0bffa15 	stw	r2,-24(fp)
    c750:	00000206 	br	c75c <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
    c754:	00bffb44 	movi	r2,-19
    c758:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
    c75c:	e0bffa17 	ldw	r2,-24(fp)
    c760:	1000080e 	bge	r2,zero,c784 <open+0x140>
  {
    alt_release_fd (index);  
    c764:	e13ff917 	ldw	r4,-28(fp)
    c768:	000aecc0 	call	aecc <alt_release_fd>
    ALT_ERRNO = -status;
    c76c:	000c5040 	call	c504 <alt_get_errno>
    c770:	e0fffa17 	ldw	r3,-24(fp)
    c774:	00c7c83a 	sub	r3,zero,r3
    c778:	10c00015 	stw	r3,0(r2)
    return -1;
    c77c:	00bfffc4 	movi	r2,-1
    c780:	00000106 	br	c788 <open+0x144>
  }
  
  /* return the reference upon success */

  return index;
    c784:	e0bff917 	ldw	r2,-28(fp)
}
    c788:	e037883a 	mov	sp,fp
    c78c:	dfc00117 	ldw	ra,4(sp)
    c790:	df000017 	ldw	fp,0(sp)
    c794:	dec00204 	addi	sp,sp,8
    c798:	f800283a 	ret

0000c79c <altera_nios2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_irq_init(void) 
{
    c79c:	deffff04 	addi	sp,sp,-4
    c7a0:	df000015 	stw	fp,0(sp)
    c7a4:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
    c7a8:	000170fa 	wrctl	ienable,zero
}
    c7ac:	e037883a 	mov	sp,fp
    c7b0:	df000017 	ldw	fp,0(sp)
    c7b4:	dec00104 	addi	sp,sp,4
    c7b8:	f800283a 	ret

0000c7bc <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    c7bc:	defffa04 	addi	sp,sp,-24
    c7c0:	dfc00515 	stw	ra,20(sp)
    c7c4:	df000415 	stw	fp,16(sp)
    c7c8:	df000404 	addi	fp,sp,16
    c7cc:	e13ffe15 	stw	r4,-8(fp)
    c7d0:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
    c7d4:	e0bfff17 	ldw	r2,-4(fp)
    c7d8:	10800017 	ldw	r2,0(r2)
    c7dc:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
    c7e0:	e13ffe17 	ldw	r4,-8(fp)
    c7e4:	0007f780 	call	7f78 <strlen>
    c7e8:	10800044 	addi	r2,r2,1
    c7ec:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    c7f0:	00000d06 	br	c828 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
    c7f4:	e0bffc17 	ldw	r2,-16(fp)
    c7f8:	10c00217 	ldw	r3,8(r2)
    c7fc:	e0bffd17 	ldw	r2,-12(fp)
    c800:	1809883a 	mov	r4,r3
    c804:	e17ffe17 	ldw	r5,-8(fp)
    c808:	100d883a 	mov	r6,r2
    c80c:	000ca800 	call	ca80 <memcmp>
    c810:	1000021e 	bne	r2,zero,c81c <alt_find_dev+0x60>
    {
      /* match found */

      return next;
    c814:	e0bffc17 	ldw	r2,-16(fp)
    c818:	00000706 	br	c838 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
    c81c:	e0bffc17 	ldw	r2,-16(fp)
    c820:	10800017 	ldw	r2,0(r2)
    c824:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    c828:	e0fffc17 	ldw	r3,-16(fp)
    c82c:	e0bfff17 	ldw	r2,-4(fp)
    c830:	18bff01e 	bne	r3,r2,c7f4 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
    c834:	0005883a 	mov	r2,zero
}
    c838:	e037883a 	mov	sp,fp
    c83c:	dfc00117 	ldw	ra,4(sp)
    c840:	df000017 	ldw	fp,0(sp)
    c844:	dec00204 	addi	sp,sp,8
    c848:	f800283a 	ret

0000c84c <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
    c84c:	defffb04 	addi	sp,sp,-20
    c850:	dfc00415 	stw	ra,16(sp)
    c854:	df000315 	stw	fp,12(sp)
    c858:	df000304 	addi	fp,sp,12
    c85c:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
    c860:	00800074 	movhi	r2,1
    c864:	10bbd404 	addi	r2,r2,-4272
    c868:	10800017 	ldw	r2,0(r2)
    c86c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    c870:	00003106 	br	c938 <alt_find_file+0xec>
  {
    len = strlen(next->name);
    c874:	e0bffd17 	ldw	r2,-12(fp)
    c878:	10800217 	ldw	r2,8(r2)
    c87c:	1009883a 	mov	r4,r2
    c880:	0007f780 	call	7f78 <strlen>
    c884:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
    c888:	e0bffd17 	ldw	r2,-12(fp)
    c88c:	10c00217 	ldw	r3,8(r2)
    c890:	e0bffe17 	ldw	r2,-8(fp)
    c894:	10bfffc4 	addi	r2,r2,-1
    c898:	1885883a 	add	r2,r3,r2
    c89c:	10800003 	ldbu	r2,0(r2)
    c8a0:	10803fcc 	andi	r2,r2,255
    c8a4:	1080201c 	xori	r2,r2,128
    c8a8:	10bfe004 	addi	r2,r2,-128
    c8ac:	10800bd8 	cmpnei	r2,r2,47
    c8b0:	1000031e 	bne	r2,zero,c8c0 <alt_find_file+0x74>
    {
      len -= 1;
    c8b4:	e0bffe17 	ldw	r2,-8(fp)
    c8b8:	10bfffc4 	addi	r2,r2,-1
    c8bc:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    c8c0:	e0bffe17 	ldw	r2,-8(fp)
    c8c4:	e0ffff17 	ldw	r3,-4(fp)
    c8c8:	1885883a 	add	r2,r3,r2
    c8cc:	10800003 	ldbu	r2,0(r2)
    c8d0:	10803fcc 	andi	r2,r2,255
    c8d4:	1080201c 	xori	r2,r2,128
    c8d8:	10bfe004 	addi	r2,r2,-128
    c8dc:	10800be0 	cmpeqi	r2,r2,47
    c8e0:	1000081e 	bne	r2,zero,c904 <alt_find_file+0xb8>
    c8e4:	e0bffe17 	ldw	r2,-8(fp)
    c8e8:	e0ffff17 	ldw	r3,-4(fp)
    c8ec:	1885883a 	add	r2,r3,r2
    c8f0:	10800003 	ldbu	r2,0(r2)
    c8f4:	10803fcc 	andi	r2,r2,255
    c8f8:	1080201c 	xori	r2,r2,128
    c8fc:	10bfe004 	addi	r2,r2,-128
    c900:	10000a1e 	bne	r2,zero,c92c <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    c904:	e0bffd17 	ldw	r2,-12(fp)
    c908:	10c00217 	ldw	r3,8(r2)
    c90c:	e0bffe17 	ldw	r2,-8(fp)
    c910:	1809883a 	mov	r4,r3
    c914:	e17fff17 	ldw	r5,-4(fp)
    c918:	100d883a 	mov	r6,r2
    c91c:	000ca800 	call	ca80 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    c920:	1000021e 	bne	r2,zero,c92c <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
    c924:	e0bffd17 	ldw	r2,-12(fp)
    c928:	00000806 	br	c94c <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
    c92c:	e0bffd17 	ldw	r2,-12(fp)
    c930:	10800017 	ldw	r2,0(r2)
    c934:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    c938:	e0fffd17 	ldw	r3,-12(fp)
    c93c:	00800074 	movhi	r2,1
    c940:	10bbd404 	addi	r2,r2,-4272
    c944:	18bfcb1e 	bne	r3,r2,c874 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
    c948:	0005883a 	mov	r2,zero
}
    c94c:	e037883a 	mov	sp,fp
    c950:	dfc00117 	ldw	ra,4(sp)
    c954:	df000017 	ldw	fp,0(sp)
    c958:	dec00204 	addi	sp,sp,8
    c95c:	f800283a 	ret

0000c960 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
    c960:	defffa04 	addi	sp,sp,-24
    c964:	dfc00515 	stw	ra,20(sp)
    c968:	df000415 	stw	fp,16(sp)
    c96c:	dc000315 	stw	r16,12(sp)
    c970:	df000304 	addi	fp,sp,12
    c974:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
    c978:	00bffa04 	movi	r2,-24
    c97c:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    c980:	e03ffd15 	stw	zero,-12(fp)
    c984:	00002106 	br	ca0c <alt_get_fd+0xac>
  {
    if (!alt_fd_list[i].dev)
    c988:	04000074 	movhi	r16,1
    c98c:	84375704 	addi	r16,r16,-8868
    c990:	e0bffd17 	ldw	r2,-12(fp)
    c994:	1009883a 	mov	r4,r2
    c998:	01400304 	movi	r5,12
    c99c:	0000e440 	call	e44 <__mulsi3>
    c9a0:	8085883a 	add	r2,r16,r2
    c9a4:	10800017 	ldw	r2,0(r2)
    c9a8:	1000151e 	bne	r2,zero,ca00 <alt_get_fd+0xa0>
    {
      alt_fd_list[i].dev = dev;
    c9ac:	04000074 	movhi	r16,1
    c9b0:	84375704 	addi	r16,r16,-8868
    c9b4:	e0bffd17 	ldw	r2,-12(fp)
    c9b8:	1009883a 	mov	r4,r2
    c9bc:	01400304 	movi	r5,12
    c9c0:	0000e440 	call	e44 <__mulsi3>
    c9c4:	8085883a 	add	r2,r16,r2
    c9c8:	e0ffff17 	ldw	r3,-4(fp)
    c9cc:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
    c9d0:	00800074 	movhi	r2,1
    c9d4:	10bbd804 	addi	r2,r2,-4256
    c9d8:	10c00017 	ldw	r3,0(r2)
    c9dc:	e0bffd17 	ldw	r2,-12(fp)
    c9e0:	1880040e 	bge	r3,r2,c9f4 <alt_get_fd+0x94>
      {
        alt_max_fd = i;
    c9e4:	00800074 	movhi	r2,1
    c9e8:	10bbd804 	addi	r2,r2,-4256
    c9ec:	e0fffd17 	ldw	r3,-12(fp)
    c9f0:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
    c9f4:	e0bffd17 	ldw	r2,-12(fp)
    c9f8:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
    c9fc:	00000606 	br	ca18 <alt_get_fd+0xb8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    ca00:	e0bffd17 	ldw	r2,-12(fp)
    ca04:	10800044 	addi	r2,r2,1
    ca08:	e0bffd15 	stw	r2,-12(fp)
    ca0c:	e0bffd17 	ldw	r2,-12(fp)
    ca10:	10800810 	cmplti	r2,r2,32
    ca14:	103fdc1e 	bne	r2,zero,c988 <alt_get_fd+0x28>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
    ca18:	e0bffe17 	ldw	r2,-8(fp)
}
    ca1c:	e037883a 	mov	sp,fp
    ca20:	dfc00217 	ldw	ra,8(sp)
    ca24:	df000117 	ldw	fp,4(sp)
    ca28:	dc000017 	ldw	r16,0(sp)
    ca2c:	dec00304 	addi	sp,sp,12
    ca30:	f800283a 	ret

0000ca34 <atexit>:
    ca34:	200b883a 	mov	r5,r4
    ca38:	000d883a 	mov	r6,zero
    ca3c:	0009883a 	mov	r4,zero
    ca40:	000f883a 	mov	r7,zero
    ca44:	000ce001 	jmpi	ce00 <__register_exitproc>

0000ca48 <exit>:
    ca48:	defffe04 	addi	sp,sp,-8
    ca4c:	000b883a 	mov	r5,zero
    ca50:	dc000015 	stw	r16,0(sp)
    ca54:	dfc00115 	stw	ra,4(sp)
    ca58:	2021883a 	mov	r16,r4
    ca5c:	000cf300 	call	cf30 <__call_exitprocs>
    ca60:	00800074 	movhi	r2,1
    ca64:	10bbcf04 	addi	r2,r2,-4292
    ca68:	11000017 	ldw	r4,0(r2)
    ca6c:	20800f17 	ldw	r2,60(r4)
    ca70:	10000126 	beq	r2,zero,ca78 <exit+0x30>
    ca74:	103ee83a 	callr	r2
    ca78:	8009883a 	mov	r4,r16
    ca7c:	000d0d00 	call	d0d0 <_exit>

0000ca80 <memcmp>:
    ca80:	01c000c4 	movi	r7,3
    ca84:	3980192e 	bgeu	r7,r6,caec <memcmp+0x6c>
    ca88:	2904b03a 	or	r2,r5,r4
    ca8c:	11c4703a 	and	r2,r2,r7
    ca90:	10000f26 	beq	r2,zero,cad0 <memcmp+0x50>
    ca94:	20c00003 	ldbu	r3,0(r4)
    ca98:	28800003 	ldbu	r2,0(r5)
    ca9c:	1880151e 	bne	r3,r2,caf4 <memcmp+0x74>
    caa0:	31bfff84 	addi	r6,r6,-2
    caa4:	01ffffc4 	movi	r7,-1
    caa8:	00000406 	br	cabc <memcmp+0x3c>
    caac:	20c00003 	ldbu	r3,0(r4)
    cab0:	28800003 	ldbu	r2,0(r5)
    cab4:	31bfffc4 	addi	r6,r6,-1
    cab8:	18800e1e 	bne	r3,r2,caf4 <memcmp+0x74>
    cabc:	21000044 	addi	r4,r4,1
    cac0:	29400044 	addi	r5,r5,1
    cac4:	31fff91e 	bne	r6,r7,caac <memcmp+0x2c>
    cac8:	0005883a 	mov	r2,zero
    cacc:	f800283a 	ret
    cad0:	20c00017 	ldw	r3,0(r4)
    cad4:	28800017 	ldw	r2,0(r5)
    cad8:	1880041e 	bne	r3,r2,caec <memcmp+0x6c>
    cadc:	31bfff04 	addi	r6,r6,-4
    cae0:	21000104 	addi	r4,r4,4
    cae4:	29400104 	addi	r5,r5,4
    cae8:	39bff936 	bltu	r7,r6,cad0 <memcmp+0x50>
    caec:	303fe91e 	bne	r6,zero,ca94 <memcmp+0x14>
    caf0:	003ff506 	br	cac8 <memcmp+0x48>
    caf4:	1885c83a 	sub	r2,r3,r2
    caf8:	f800283a 	ret

0000cafc <_putc_r>:
    cafc:	defffc04 	addi	sp,sp,-16
    cb00:	dc000215 	stw	r16,8(sp)
    cb04:	dfc00315 	stw	ra,12(sp)
    cb08:	2021883a 	mov	r16,r4
    cb0c:	20000226 	beq	r4,zero,cb18 <_putc_r+0x1c>
    cb10:	20800e17 	ldw	r2,56(r4)
    cb14:	10001d26 	beq	r2,zero,cb8c <_putc_r+0x90>
    cb18:	30800217 	ldw	r2,8(r6)
    cb1c:	10bfffc4 	addi	r2,r2,-1
    cb20:	30800215 	stw	r2,8(r6)
    cb24:	10000a16 	blt	r2,zero,cb50 <_putc_r+0x54>
    cb28:	30800017 	ldw	r2,0(r6)
    cb2c:	11400005 	stb	r5,0(r2)
    cb30:	30800017 	ldw	r2,0(r6)
    cb34:	10c00044 	addi	r3,r2,1
    cb38:	10800003 	ldbu	r2,0(r2)
    cb3c:	30c00015 	stw	r3,0(r6)
    cb40:	dfc00317 	ldw	ra,12(sp)
    cb44:	dc000217 	ldw	r16,8(sp)
    cb48:	dec00404 	addi	sp,sp,16
    cb4c:	f800283a 	ret
    cb50:	30c00617 	ldw	r3,24(r6)
    cb54:	10c01316 	blt	r2,r3,cba4 <_putc_r+0xa8>
    cb58:	30800017 	ldw	r2,0(r6)
    cb5c:	01000284 	movi	r4,10
    cb60:	11400005 	stb	r5,0(r2)
    cb64:	30c00017 	ldw	r3,0(r6)
    cb68:	19400003 	ldbu	r5,0(r3)
    cb6c:	29000d26 	beq	r5,r4,cba4 <_putc_r+0xa8>
    cb70:	18c00044 	addi	r3,r3,1
    cb74:	2805883a 	mov	r2,r5
    cb78:	30c00015 	stw	r3,0(r6)
    cb7c:	dfc00317 	ldw	ra,12(sp)
    cb80:	dc000217 	ldw	r16,8(sp)
    cb84:	dec00404 	addi	sp,sp,16
    cb88:	f800283a 	ret
    cb8c:	d9400015 	stw	r5,0(sp)
    cb90:	d9800115 	stw	r6,4(sp)
    cb94:	00055440 	call	5544 <__sinit>
    cb98:	d9800117 	ldw	r6,4(sp)
    cb9c:	d9400017 	ldw	r5,0(sp)
    cba0:	003fdd06 	br	cb18 <_putc_r+0x1c>
    cba4:	8009883a 	mov	r4,r16
    cba8:	dfc00317 	ldw	ra,12(sp)
    cbac:	dc000217 	ldw	r16,8(sp)
    cbb0:	dec00404 	addi	sp,sp,16
    cbb4:	000cca81 	jmpi	cca8 <__swbuf_r>

0000cbb8 <putc>:
    cbb8:	defffc04 	addi	sp,sp,-16
    cbbc:	dc400115 	stw	r17,4(sp)
    cbc0:	04400074 	movhi	r17,1
    cbc4:	8c7bd004 	addi	r17,r17,-4288
    cbc8:	88800017 	ldw	r2,0(r17)
    cbcc:	dc800215 	stw	r18,8(sp)
    cbd0:	dc000015 	stw	r16,0(sp)
    cbd4:	dfc00315 	stw	ra,12(sp)
    cbd8:	2025883a 	mov	r18,r4
    cbdc:	2821883a 	mov	r16,r5
    cbe0:	10000226 	beq	r2,zero,cbec <putc+0x34>
    cbe4:	10c00e17 	ldw	r3,56(r2)
    cbe8:	18002126 	beq	r3,zero,cc70 <putc+0xb8>
    cbec:	80800217 	ldw	r2,8(r16)
    cbf0:	10bfffc4 	addi	r2,r2,-1
    cbf4:	80800215 	stw	r2,8(r16)
    cbf8:	10000c16 	blt	r2,zero,cc2c <putc+0x74>
    cbfc:	80800017 	ldw	r2,0(r16)
    cc00:	14800005 	stb	r18,0(r2)
    cc04:	80800017 	ldw	r2,0(r16)
    cc08:	10c00044 	addi	r3,r2,1
    cc0c:	10800003 	ldbu	r2,0(r2)
    cc10:	80c00015 	stw	r3,0(r16)
    cc14:	dfc00317 	ldw	ra,12(sp)
    cc18:	dc800217 	ldw	r18,8(sp)
    cc1c:	dc400117 	ldw	r17,4(sp)
    cc20:	dc000017 	ldw	r16,0(sp)
    cc24:	dec00404 	addi	sp,sp,16
    cc28:	f800283a 	ret
    cc2c:	80c00617 	ldw	r3,24(r16)
    cc30:	10c01216 	blt	r2,r3,cc7c <putc+0xc4>
    cc34:	80800017 	ldw	r2,0(r16)
    cc38:	01000284 	movi	r4,10
    cc3c:	14800005 	stb	r18,0(r2)
    cc40:	80c00017 	ldw	r3,0(r16)
    cc44:	19400003 	ldbu	r5,0(r3)
    cc48:	29001526 	beq	r5,r4,cca0 <putc+0xe8>
    cc4c:	18c00044 	addi	r3,r3,1
    cc50:	2805883a 	mov	r2,r5
    cc54:	80c00015 	stw	r3,0(r16)
    cc58:	dfc00317 	ldw	ra,12(sp)
    cc5c:	dc800217 	ldw	r18,8(sp)
    cc60:	dc400117 	ldw	r17,4(sp)
    cc64:	dc000017 	ldw	r16,0(sp)
    cc68:	dec00404 	addi	sp,sp,16
    cc6c:	f800283a 	ret
    cc70:	1009883a 	mov	r4,r2
    cc74:	00055440 	call	5544 <__sinit>
    cc78:	003fdc06 	br	cbec <putc+0x34>
    cc7c:	89000017 	ldw	r4,0(r17)
    cc80:	900b883a 	mov	r5,r18
    cc84:	800d883a 	mov	r6,r16
    cc88:	dfc00317 	ldw	ra,12(sp)
    cc8c:	dc800217 	ldw	r18,8(sp)
    cc90:	dc400117 	ldw	r17,4(sp)
    cc94:	dc000017 	ldw	r16,0(sp)
    cc98:	dec00404 	addi	sp,sp,16
    cc9c:	000cca81 	jmpi	cca8 <__swbuf_r>
    cca0:	89000017 	ldw	r4,0(r17)
    cca4:	003ff706 	br	cc84 <putc+0xcc>

0000cca8 <__swbuf_r>:
    cca8:	defffc04 	addi	sp,sp,-16
    ccac:	dc800215 	stw	r18,8(sp)
    ccb0:	dc400115 	stw	r17,4(sp)
    ccb4:	dc000015 	stw	r16,0(sp)
    ccb8:	dfc00315 	stw	ra,12(sp)
    ccbc:	2023883a 	mov	r17,r4
    ccc0:	2825883a 	mov	r18,r5
    ccc4:	3021883a 	mov	r16,r6
    ccc8:	20000226 	beq	r4,zero,ccd4 <__swbuf_r+0x2c>
    cccc:	20800e17 	ldw	r2,56(r4)
    ccd0:	10003b26 	beq	r2,zero,cdc0 <__swbuf_r+0x118>
    ccd4:	8080030b 	ldhu	r2,12(r16)
    ccd8:	80c00617 	ldw	r3,24(r16)
    ccdc:	1080020c 	andi	r2,r2,8
    cce0:	10bfffcc 	andi	r2,r2,65535
    cce4:	10a0001c 	xori	r2,r2,32768
    cce8:	80c00215 	stw	r3,8(r16)
    ccec:	10a00004 	addi	r2,r2,-32768
    ccf0:	10002226 	beq	r2,zero,cd7c <__swbuf_r+0xd4>
    ccf4:	80800417 	ldw	r2,16(r16)
    ccf8:	10002026 	beq	r2,zero,cd7c <__swbuf_r+0xd4>
    ccfc:	80c00017 	ldw	r3,0(r16)
    cd00:	81000517 	ldw	r4,20(r16)
    cd04:	94803fcc 	andi	r18,r18,255
    cd08:	1885c83a 	sub	r2,r3,r2
    cd0c:	1100250e 	bge	r2,r4,cda4 <__swbuf_r+0xfc>
    cd10:	10800044 	addi	r2,r2,1
    cd14:	81400217 	ldw	r5,8(r16)
    cd18:	19000044 	addi	r4,r3,1
    cd1c:	297fffc4 	addi	r5,r5,-1
    cd20:	81400215 	stw	r5,8(r16)
    cd24:	1c800005 	stb	r18,0(r3)
    cd28:	80c00517 	ldw	r3,20(r16)
    cd2c:	81000015 	stw	r4,0(r16)
    cd30:	18800c26 	beq	r3,r2,cd64 <__swbuf_r+0xbc>
    cd34:	8080030b 	ldhu	r2,12(r16)
    cd38:	1080004c 	andi	r2,r2,1
    cd3c:	10000226 	beq	r2,zero,cd48 <__swbuf_r+0xa0>
    cd40:	00800284 	movi	r2,10
    cd44:	90800726 	beq	r18,r2,cd64 <__swbuf_r+0xbc>
    cd48:	9005883a 	mov	r2,r18
    cd4c:	dfc00317 	ldw	ra,12(sp)
    cd50:	dc800217 	ldw	r18,8(sp)
    cd54:	dc400117 	ldw	r17,4(sp)
    cd58:	dc000017 	ldw	r16,0(sp)
    cd5c:	dec00404 	addi	sp,sp,16
    cd60:	f800283a 	ret
    cd64:	8809883a 	mov	r4,r17
    cd68:	800b883a 	mov	r5,r16
    cd6c:	00052880 	call	5288 <_fflush_r>
    cd70:	103ff526 	beq	r2,zero,cd48 <__swbuf_r+0xa0>
    cd74:	04bfffc4 	movi	r18,-1
    cd78:	003ff306 	br	cd48 <__swbuf_r+0xa0>
    cd7c:	8809883a 	mov	r4,r17
    cd80:	800b883a 	mov	r5,r16
    cd84:	00038bc0 	call	38bc <__swsetup_r>
    cd88:	10000f1e 	bne	r2,zero,cdc8 <__swbuf_r+0x120>
    cd8c:	80800417 	ldw	r2,16(r16)
    cd90:	80c00017 	ldw	r3,0(r16)
    cd94:	81000517 	ldw	r4,20(r16)
    cd98:	94803fcc 	andi	r18,r18,255
    cd9c:	1885c83a 	sub	r2,r3,r2
    cda0:	113fdb16 	blt	r2,r4,cd10 <__swbuf_r+0x68>
    cda4:	8809883a 	mov	r4,r17
    cda8:	800b883a 	mov	r5,r16
    cdac:	00052880 	call	5288 <_fflush_r>
    cdb0:	103ff01e 	bne	r2,zero,cd74 <__swbuf_r+0xcc>
    cdb4:	80c00017 	ldw	r3,0(r16)
    cdb8:	00800044 	movi	r2,1
    cdbc:	003fd506 	br	cd14 <__swbuf_r+0x6c>
    cdc0:	00055440 	call	5544 <__sinit>
    cdc4:	003fc306 	br	ccd4 <__swbuf_r+0x2c>
    cdc8:	8080030b 	ldhu	r2,12(r16)
    cdcc:	04bfffc4 	movi	r18,-1
    cdd0:	10801014 	ori	r2,r2,64
    cdd4:	8080030d 	sth	r2,12(r16)
    cdd8:	00800244 	movi	r2,9
    cddc:	88800015 	stw	r2,0(r17)
    cde0:	003fd906 	br	cd48 <__swbuf_r+0xa0>

0000cde4 <__swbuf>:
    cde4:	00c00074 	movhi	r3,1
    cde8:	18fbd004 	addi	r3,r3,-4288
    cdec:	2005883a 	mov	r2,r4
    cdf0:	19000017 	ldw	r4,0(r3)
    cdf4:	280d883a 	mov	r6,r5
    cdf8:	100b883a 	mov	r5,r2
    cdfc:	000cca81 	jmpi	cca8 <__swbuf_r>

0000ce00 <__register_exitproc>:
    ce00:	defffa04 	addi	sp,sp,-24
    ce04:	00800074 	movhi	r2,1
    ce08:	10bbcf04 	addi	r2,r2,-4292
    ce0c:	dc000315 	stw	r16,12(sp)
    ce10:	14000017 	ldw	r16,0(r2)
    ce14:	dc400415 	stw	r17,16(sp)
    ce18:	dfc00515 	stw	ra,20(sp)
    ce1c:	80805217 	ldw	r2,328(r16)
    ce20:	2023883a 	mov	r17,r4
    ce24:	10003e26 	beq	r2,zero,cf20 <__register_exitproc+0x120>
    ce28:	10c00117 	ldw	r3,4(r2)
    ce2c:	020007c4 	movi	r8,31
    ce30:	40c0180e 	bge	r8,r3,ce94 <__register_exitproc+0x94>
    ce34:	00800034 	movhi	r2,0
    ce38:	1083d504 	addi	r2,r2,3924
    ce3c:	1000061e 	bne	r2,zero,ce58 <__register_exitproc+0x58>
    ce40:	00bfffc4 	movi	r2,-1
    ce44:	dfc00517 	ldw	ra,20(sp)
    ce48:	dc400417 	ldw	r17,16(sp)
    ce4c:	dc000317 	ldw	r16,12(sp)
    ce50:	dec00604 	addi	sp,sp,24
    ce54:	f800283a 	ret
    ce58:	01006404 	movi	r4,400
    ce5c:	d9400015 	stw	r5,0(sp)
    ce60:	d9800115 	stw	r6,4(sp)
    ce64:	d9c00215 	stw	r7,8(sp)
    ce68:	0000f540 	call	f54 <malloc>
    ce6c:	d9400017 	ldw	r5,0(sp)
    ce70:	d9800117 	ldw	r6,4(sp)
    ce74:	d9c00217 	ldw	r7,8(sp)
    ce78:	103ff126 	beq	r2,zero,ce40 <__register_exitproc+0x40>
    ce7c:	80c05217 	ldw	r3,328(r16)
    ce80:	10000115 	stw	zero,4(r2)
    ce84:	10c00015 	stw	r3,0(r2)
    ce88:	80805215 	stw	r2,328(r16)
    ce8c:	10006215 	stw	zero,392(r2)
    ce90:	10006315 	stw	zero,396(r2)
    ce94:	10c00117 	ldw	r3,4(r2)
    ce98:	88000d1e 	bne	r17,zero,ced0 <__register_exitproc+0xd0>
    ce9c:	19000084 	addi	r4,r3,2
    cea0:	2109883a 	add	r4,r4,r4
    cea4:	18c00044 	addi	r3,r3,1
    cea8:	2109883a 	add	r4,r4,r4
    ceac:	1109883a 	add	r4,r2,r4
    ceb0:	10c00115 	stw	r3,4(r2)
    ceb4:	0005883a 	mov	r2,zero
    ceb8:	21400015 	stw	r5,0(r4)
    cebc:	dfc00517 	ldw	ra,20(sp)
    cec0:	dc400417 	ldw	r17,16(sp)
    cec4:	dc000317 	ldw	r16,12(sp)
    cec8:	dec00604 	addi	sp,sp,24
    cecc:	f800283a 	ret
    ced0:	02400044 	movi	r9,1
    ced4:	12806217 	ldw	r10,392(r2)
    ced8:	48d2983a 	sll	r9,r9,r3
    cedc:	19000804 	addi	r4,r3,32
    cee0:	18d1883a 	add	r8,r3,r3
    cee4:	2109883a 	add	r4,r4,r4
    cee8:	4211883a 	add	r8,r8,r8
    ceec:	2109883a 	add	r4,r4,r4
    cef0:	1109883a 	add	r4,r2,r4
    cef4:	1211883a 	add	r8,r2,r8
    cef8:	5254b03a 	or	r10,r10,r9
    cefc:	21c02215 	stw	r7,136(r4)
    cf00:	41802215 	stw	r6,136(r8)
    cf04:	12806215 	stw	r10,392(r2)
    cf08:	01000084 	movi	r4,2
    cf0c:	893fe31e 	bne	r17,r4,ce9c <__register_exitproc+0x9c>
    cf10:	11006317 	ldw	r4,396(r2)
    cf14:	2252b03a 	or	r9,r4,r9
    cf18:	12406315 	stw	r9,396(r2)
    cf1c:	003fdf06 	br	ce9c <__register_exitproc+0x9c>
    cf20:	00800074 	movhi	r2,1
    cf24:	1082d204 	addi	r2,r2,2888
    cf28:	80805215 	stw	r2,328(r16)
    cf2c:	003fbe06 	br	ce28 <__register_exitproc+0x28>

0000cf30 <__call_exitprocs>:
    cf30:	00800074 	movhi	r2,1
    cf34:	10bbcf04 	addi	r2,r2,-4292
    cf38:	10800017 	ldw	r2,0(r2)
    cf3c:	defff304 	addi	sp,sp,-52
    cf40:	df000b15 	stw	fp,44(sp)
    cf44:	d8800015 	stw	r2,0(sp)
    cf48:	10805204 	addi	r2,r2,328
    cf4c:	dd400815 	stw	r21,32(sp)
    cf50:	dfc00c15 	stw	ra,48(sp)
    cf54:	ddc00a15 	stw	r23,40(sp)
    cf58:	dd800915 	stw	r22,36(sp)
    cf5c:	dd000715 	stw	r20,28(sp)
    cf60:	dcc00615 	stw	r19,24(sp)
    cf64:	dc800515 	stw	r18,20(sp)
    cf68:	dc400415 	stw	r17,16(sp)
    cf6c:	dc000315 	stw	r16,12(sp)
    cf70:	d9000115 	stw	r4,4(sp)
    cf74:	2839883a 	mov	fp,r5
    cf78:	d8800215 	stw	r2,8(sp)
    cf7c:	057fffc4 	movi	r21,-1
    cf80:	d8800017 	ldw	r2,0(sp)
    cf84:	ddc00217 	ldw	r23,8(sp)
    cf88:	14805217 	ldw	r18,328(r2)
    cf8c:	90001726 	beq	r18,zero,cfec <__call_exitprocs+0xbc>
    cf90:	94400117 	ldw	r17,4(r18)
    cf94:	8c3fffc4 	addi	r16,r17,-1
    cf98:	80001116 	blt	r16,zero,cfe0 <__call_exitprocs+0xb0>
    cf9c:	8c400044 	addi	r17,r17,1
    cfa0:	8427883a 	add	r19,r16,r16
    cfa4:	8c63883a 	add	r17,r17,r17
    cfa8:	95802204 	addi	r22,r18,136
    cfac:	9ce7883a 	add	r19,r19,r19
    cfb0:	8c63883a 	add	r17,r17,r17
    cfb4:	b4e7883a 	add	r19,r22,r19
    cfb8:	9463883a 	add	r17,r18,r17
    cfbc:	e0001726 	beq	fp,zero,d01c <__call_exitprocs+0xec>
    cfc0:	8c87c83a 	sub	r3,r17,r18
    cfc4:	b0c7883a 	add	r3,r22,r3
    cfc8:	18c01e17 	ldw	r3,120(r3)
    cfcc:	1f001326 	beq	r3,fp,d01c <__call_exitprocs+0xec>
    cfd0:	843fffc4 	addi	r16,r16,-1
    cfd4:	9cffff04 	addi	r19,r19,-4
    cfd8:	8c7fff04 	addi	r17,r17,-4
    cfdc:	857ff71e 	bne	r16,r21,cfbc <__call_exitprocs+0x8c>
    cfe0:	00800034 	movhi	r2,0
    cfe4:	1083da04 	addi	r2,r2,3944
    cfe8:	10002a1e 	bne	r2,zero,d094 <__call_exitprocs+0x164>
    cfec:	dfc00c17 	ldw	ra,48(sp)
    cff0:	df000b17 	ldw	fp,44(sp)
    cff4:	ddc00a17 	ldw	r23,40(sp)
    cff8:	dd800917 	ldw	r22,36(sp)
    cffc:	dd400817 	ldw	r21,32(sp)
    d000:	dd000717 	ldw	r20,28(sp)
    d004:	dcc00617 	ldw	r19,24(sp)
    d008:	dc800517 	ldw	r18,20(sp)
    d00c:	dc400417 	ldw	r17,16(sp)
    d010:	dc000317 	ldw	r16,12(sp)
    d014:	dec00d04 	addi	sp,sp,52
    d018:	f800283a 	ret
    d01c:	91000117 	ldw	r4,4(r18)
    d020:	88c00017 	ldw	r3,0(r17)
    d024:	213fffc4 	addi	r4,r4,-1
    d028:	24001526 	beq	r4,r16,d080 <__call_exitprocs+0x150>
    d02c:	88000015 	stw	zero,0(r17)
    d030:	183fe726 	beq	r3,zero,cfd0 <__call_exitprocs+0xa0>
    d034:	00800044 	movi	r2,1
    d038:	1408983a 	sll	r4,r2,r16
    d03c:	91406217 	ldw	r5,392(r18)
    d040:	95000117 	ldw	r20,4(r18)
    d044:	214a703a 	and	r5,r4,r5
    d048:	28000b26 	beq	r5,zero,d078 <__call_exitprocs+0x148>
    d04c:	91406317 	ldw	r5,396(r18)
    d050:	2148703a 	and	r4,r4,r5
    d054:	20000c1e 	bne	r4,zero,d088 <__call_exitprocs+0x158>
    d058:	99400017 	ldw	r5,0(r19)
    d05c:	d9000117 	ldw	r4,4(sp)
    d060:	183ee83a 	callr	r3
    d064:	90c00117 	ldw	r3,4(r18)
    d068:	1d3fc51e 	bne	r3,r20,cf80 <__call_exitprocs+0x50>
    d06c:	b8c00017 	ldw	r3,0(r23)
    d070:	1cbfd726 	beq	r3,r18,cfd0 <__call_exitprocs+0xa0>
    d074:	003fc206 	br	cf80 <__call_exitprocs+0x50>
    d078:	183ee83a 	callr	r3
    d07c:	003ff906 	br	d064 <__call_exitprocs+0x134>
    d080:	94000115 	stw	r16,4(r18)
    d084:	003fea06 	br	d030 <__call_exitprocs+0x100>
    d088:	99000017 	ldw	r4,0(r19)
    d08c:	183ee83a 	callr	r3
    d090:	003ff406 	br	d064 <__call_exitprocs+0x134>
    d094:	90c00117 	ldw	r3,4(r18)
    d098:	1800071e 	bne	r3,zero,d0b8 <__call_exitprocs+0x188>
    d09c:	90c00017 	ldw	r3,0(r18)
    d0a0:	18000926 	beq	r3,zero,d0c8 <__call_exitprocs+0x198>
    d0a4:	9009883a 	mov	r4,r18
    d0a8:	b8c00015 	stw	r3,0(r23)
    d0ac:	0000f680 	call	f68 <free>
    d0b0:	bc800017 	ldw	r18,0(r23)
    d0b4:	003fb506 	br	cf8c <__call_exitprocs+0x5c>
    d0b8:	90c00017 	ldw	r3,0(r18)
    d0bc:	902f883a 	mov	r23,r18
    d0c0:	1825883a 	mov	r18,r3
    d0c4:	003fb106 	br	cf8c <__call_exitprocs+0x5c>
    d0c8:	0007883a 	mov	r3,zero
    d0cc:	003ffb06 	br	d0bc <__call_exitprocs+0x18c>

0000d0d0 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
    d0d0:	defffc04 	addi	sp,sp,-16
    d0d4:	df000315 	stw	fp,12(sp)
    d0d8:	df000304 	addi	fp,sp,12
    d0dc:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
    d0e0:	0001883a 	nop
    d0e4:	e0bfff17 	ldw	r2,-4(fp)
    d0e8:	e0bffd15 	stw	r2,-12(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  int r2 = exit_code;
    d0ec:	e0bffd17 	ldw	r2,-12(fp)
    d0f0:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
    d0f4:	e0bffe17 	ldw	r2,-8(fp)
    d0f8:	10000226 	beq	r2,zero,d104 <_exit+0x34>
    ALT_SIM_FAIL();
    d0fc:	002af070 	cmpltui	zero,zero,43969
    d100:	00000106 	br	d108 <_exit+0x38>
  } else {
    ALT_SIM_PASS();
    d104:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
    d108:	003fff06 	br	d108 <_exit+0x38>
